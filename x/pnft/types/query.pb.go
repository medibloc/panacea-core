// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/pnft/v2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryServiceDenomsRequest is the response type for the Query RPC method.
type QueryServiceDenomsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryServiceDenomsRequest) Reset()         { *m = QueryServiceDenomsRequest{} }
func (m *QueryServiceDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDenomsRequest) ProtoMessage()    {}
func (*QueryServiceDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef03de89249ecec, []int{0}
}
func (m *QueryServiceDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDenomsRequest.Merge(m, src)
}
func (m *QueryServiceDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDenomsRequest proto.InternalMessageInfo

func (m *QueryServiceDenomsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryServiceDenomsResponse is the response type for the Query RPC method.
type QueryServiceDenomsResponse struct {
	Denoms     []*Denom            `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryServiceDenomsResponse) Reset()         { *m = QueryServiceDenomsResponse{} }
func (m *QueryServiceDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDenomsResponse) ProtoMessage()    {}
func (*QueryServiceDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef03de89249ecec, []int{1}
}
func (m *QueryServiceDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDenomsResponse.Merge(m, src)
}
func (m *QueryServiceDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDenomsResponse proto.InternalMessageInfo

func (m *QueryServiceDenomsResponse) GetDenoms() []*Denom {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *QueryServiceDenomsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryServiceDenomsByCreatorRequest is the response type for the Query RPC method.
type QueryServiceDenomsByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryServiceDenomsByCreatorRequest) Reset()         { *m = QueryServiceDenomsByCreatorRequest{} }
func (m *QueryServiceDenomsByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDenomsByCreatorRequest) ProtoMessage()    {}
func (*QueryServiceDenomsByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef03de89249ecec, []int{2}
}
func (m *QueryServiceDenomsByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDenomsByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDenomsByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDenomsByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDenomsByCreatorRequest.Merge(m, src)
}
func (m *QueryServiceDenomsByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDenomsByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDenomsByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDenomsByCreatorRequest proto.InternalMessageInfo

func (m *QueryServiceDenomsByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// QueryServiceDenomsByCreatorResponse is the response type for the Query RPC method.
type QueryServiceDenomsByCreatorResponse struct {
	Denoms []*Denom `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
}

func (m *QueryServiceDenomsByCreatorResponse) Reset()         { *m = QueryServiceDenomsByCreatorResponse{} }
func (m *QueryServiceDenomsByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDenomsByCreatorResponse) ProtoMessage()    {}
func (*QueryServiceDenomsByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef03de89249ecec, []int{3}
}
func (m *QueryServiceDenomsByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDenomsByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDenomsByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDenomsByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDenomsByCreatorResponse.Merge(m, src)
}
func (m *QueryServiceDenomsByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDenomsByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDenomsByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDenomsByCreatorResponse proto.InternalMessageInfo

func (m *QueryServiceDenomsByCreatorResponse) GetDenoms() []*Denom {
	if m != nil {
		return m.Denoms
	}
	return nil
}

// QueryServiceDenomRequest is the response type for the Query RPC method.
type QueryServiceDenomRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryServiceDenomRequest) Reset()         { *m = QueryServiceDenomRequest{} }
func (m *QueryServiceDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDenomRequest) ProtoMessage()    {}
func (*QueryServiceDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef03de89249ecec, []int{4}
}
func (m *QueryServiceDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDenomRequest.Merge(m, src)
}
func (m *QueryServiceDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDenomRequest proto.InternalMessageInfo

func (m *QueryServiceDenomRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryServiceDenomResponse is the response type for the Query RPC method.
type QueryServiceDenomResponse struct {
	Denom *Denom `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryServiceDenomResponse) Reset()         { *m = QueryServiceDenomResponse{} }
func (m *QueryServiceDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDenomResponse) ProtoMessage()    {}
func (*QueryServiceDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ef03de89249ecec, []int{5}
}
func (m *QueryServiceDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDenomResponse.Merge(m, src)
}
func (m *QueryServiceDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDenomResponse proto.InternalMessageInfo

func (m *QueryServiceDenomResponse) GetDenom() *Denom {
	if m != nil {
		return m.Denom
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryServiceDenomsRequest)(nil), "panacea.pnft.v2.QueryServiceDenomsRequest")
	proto.RegisterType((*QueryServiceDenomsResponse)(nil), "panacea.pnft.v2.QueryServiceDenomsResponse")
	proto.RegisterType((*QueryServiceDenomsByCreatorRequest)(nil), "panacea.pnft.v2.QueryServiceDenomsByCreatorRequest")
	proto.RegisterType((*QueryServiceDenomsByCreatorResponse)(nil), "panacea.pnft.v2.QueryServiceDenomsByCreatorResponse")
	proto.RegisterType((*QueryServiceDenomRequest)(nil), "panacea.pnft.v2.QueryServiceDenomRequest")
	proto.RegisterType((*QueryServiceDenomResponse)(nil), "panacea.pnft.v2.QueryServiceDenomResponse")
}

func init() { proto.RegisterFile("panacea/pnft/v2/query.proto", fileDescriptor_2ef03de89249ecec) }

var fileDescriptor_2ef03de89249ecec = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0xc7, 0xeb, 0x4e, 0x2b, 0xc2, 0x43, 0x4c, 0xf2, 0x01, 0xb2, 0x30, 0x85, 0x2a, 0x20, 0x28,
	0x61, 0xb3, 0xb5, 0x8c, 0x33, 0x87, 0x81, 0x40, 0xbb, 0x8d, 0x22, 0x2e, 0xdc, 0x9c, 0xc4, 0x04,
	0x4b, 0xab, 0x9d, 0xc5, 0x6e, 0x45, 0x35, 0xed, 0x32, 0xf1, 0x00, 0x48, 0x88, 0xf7, 0xe0, 0x31,
	0xb8, 0x20, 0x4d, 0xe2, 0xc2, 0x11, 0xb5, 0x3c, 0x08, 0xaa, 0xed, 0xc0, 0x48, 0x1b, 0x56, 0x76,
	0x6b, 0xed, 0xef, 0x9f, 0x8f, 0xed, 0x9f, 0x02, 0x6f, 0x15, 0x54, 0xd0, 0x94, 0x51, 0x52, 0x88,
	0x37, 0x9a, 0x8c, 0x62, 0x72, 0x34, 0x64, 0xe5, 0x18, 0x17, 0xa5, 0xd4, 0x12, 0xad, 0xbb, 0x4d,
	0x3c, 0xdb, 0xc4, 0xa3, 0xd8, 0xdf, 0xcc, 0xa5, 0xcc, 0x0f, 0x19, 0xa1, 0x05, 0x27, 0x54, 0x08,
	0xa9, 0xa9, 0xe6, 0x52, 0x28, 0x2b, 0xf7, 0xa3, 0x54, 0xaa, 0x81, 0x54, 0x24, 0xa1, 0x8a, 0xd9,
	0x1c, 0x32, 0xda, 0x49, 0x98, 0xa6, 0x3b, 0xa4, 0xa0, 0x39, 0x17, 0x46, 0xec, 0xb4, 0x7e, 0xbd,
	0xd7, 0x54, 0x98, 0xbd, 0x30, 0x85, 0x1b, 0x2f, 0x66, 0xee, 0x97, 0xac, 0x1c, 0xf1, 0x94, 0x3d,
	0x65, 0x42, 0x0e, 0x54, 0x9f, 0x1d, 0x0d, 0x99, 0xd2, 0xe8, 0x19, 0x84, 0x7f, 0xc2, 0xbc, 0x76,
	0x17, 0xf4, 0xd6, 0xe2, 0x7b, 0xd8, 0x36, 0xe3, 0x59, 0x33, 0xb6, 0x27, 0x70, 0xcd, 0xf8, 0x80,
	0xe6, 0xcc, 0x79, 0xfb, 0xe7, 0x9c, 0xe1, 0x27, 0x00, 0xfd, 0x45, 0x2d, 0xaa, 0x90, 0x42, 0x31,
	0x84, 0x61, 0x27, 0x33, 0x2b, 0x1e, 0xe8, 0xae, 0xf4, 0xd6, 0xe2, 0x1b, 0xb8, 0x76, 0x17, 0xd8,
	0x18, 0xfa, 0x4e, 0x85, 0x9e, 0x2f, 0xc0, 0xba, 0x7f, 0x21, 0x96, 0x2d, 0xfb, 0x8b, 0xeb, 0x31,
	0x0c, 0xe7, 0xb1, 0xf6, 0xc6, 0x4f, 0x4a, 0x46, 0xb5, 0x2c, 0xab, 0x5b, 0xf0, 0xe0, 0x95, 0xd4,
	0xae, 0x78, 0xa0, 0x0b, 0x7a, 0x57, 0xfb, 0xd5, 0xdf, 0xf0, 0x15, 0xbc, 0xf3, 0x4f, 0xff, 0xe5,
	0xce, 0x17, 0x46, 0xd0, 0x9b, 0x8b, 0xad, 0x60, 0xae, 0xc3, 0x36, 0xcf, 0x1c, 0x47, 0x9b, 0x67,
	0xe1, 0xfe, 0x82, 0xf7, 0xfb, 0x5d, 0xbc, 0x05, 0x57, 0x4d, 0xa4, 0xd1, 0x37, 0xf7, 0x5a, 0x51,
	0xfc, 0x75, 0x05, 0x5e, 0x3b, 0x9f, 0x85, 0x4e, 0x01, 0xec, 0xd8, 0x33, 0xa1, 0x68, 0xce, 0xda,
	0x38, 0x35, 0xfe, 0xc3, 0xa5, 0xb4, 0x16, 0x31, 0xbc, 0x7d, 0xfa, 0xed, 0xe7, 0xc7, 0xf6, 0x06,
	0xba, 0x49, 0xea, 0x43, 0xea, 0x1e, 0xfb, 0x33, 0x80, 0xeb, 0xb5, 0x8b, 0x45, 0xbb, 0x4b, 0x34,
	0xd4, 0x9f, 0xd1, 0x7f, 0xf4, 0x7f, 0x26, 0xc7, 0x17, 0x1b, 0xbe, 0x2d, 0x14, 0x35, 0xf0, 0x11,
	0x37, 0x0b, 0x8a, 0x1c, 0xbb, 0x5f, 0x27, 0xe8, 0x3d, 0x80, 0xab, 0x26, 0x0f, 0x3d, 0xb8, 0xb8,
	0xb3, 0xc2, 0x8b, 0x96, 0x91, 0x3a, 0xa8, 0xbb, 0x06, 0x2a, 0x40, 0x9b, 0x4d, 0x50, 0xc7, 0x3c,
	0x3b, 0xd9, 0xdb, 0xff, 0x32, 0x09, 0xc0, 0xd9, 0x24, 0x00, 0x3f, 0x26, 0x01, 0xf8, 0x30, 0x0d,
	0x5a, 0x67, 0xd3, 0xa0, 0xf5, 0x7d, 0x1a, 0xb4, 0x0e, 0xc0, 0xeb, 0xed, 0x9c, 0xeb, 0xb7, 0xc3,
	0x04, 0xa7, 0x72, 0x40, 0x06, 0x2c, 0xe3, 0xc9, 0xa1, 0x4c, 0xab, 0xb0, 0xed, 0x54, 0x96, 0x8c,
	0xbc, 0xb3, 0x99, 0x7a, 0x5c, 0x30, 0x95, 0x74, 0xcc, 0xc7, 0x62, 0xf7, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x14, 0x6e, 0xc6, 0x3f, 0xc2, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Denoms returns denom list.
	Denoms(ctx context.Context, in *QueryServiceDenomsRequest, opts ...grpc.CallOption) (*QueryServiceDenomsResponse, error)
	DenomsByCreator(ctx context.Context, in *QueryServiceDenomsByCreatorRequest, opts ...grpc.CallOption) (*QueryServiceDenomsByCreatorResponse, error)
	// Denom returns denom detail.
	Denom(ctx context.Context, in *QueryServiceDenomRequest, opts ...grpc.CallOption) (*QueryServiceDenomResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Denoms(ctx context.Context, in *QueryServiceDenomsRequest, opts ...grpc.CallOption) (*QueryServiceDenomsResponse, error) {
	out := new(QueryServiceDenomsResponse)
	err := c.cc.Invoke(ctx, "/panacea.pnft.v2.QueryService/Denoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) DenomsByCreator(ctx context.Context, in *QueryServiceDenomsByCreatorRequest, opts ...grpc.CallOption) (*QueryServiceDenomsByCreatorResponse, error) {
	out := new(QueryServiceDenomsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/panacea.pnft.v2.QueryService/DenomsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) Denom(ctx context.Context, in *QueryServiceDenomRequest, opts ...grpc.CallOption) (*QueryServiceDenomResponse, error) {
	out := new(QueryServiceDenomResponse)
	err := c.cc.Invoke(ctx, "/panacea.pnft.v2.QueryService/Denom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Denoms returns denom list.
	Denoms(context.Context, *QueryServiceDenomsRequest) (*QueryServiceDenomsResponse, error)
	DenomsByCreator(context.Context, *QueryServiceDenomsByCreatorRequest) (*QueryServiceDenomsByCreatorResponse, error)
	// Denom returns denom detail.
	Denom(context.Context, *QueryServiceDenomRequest) (*QueryServiceDenomResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) Denoms(ctx context.Context, req *QueryServiceDenomsRequest) (*QueryServiceDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Denoms not implemented")
}
func (*UnimplementedQueryServiceServer) DenomsByCreator(ctx context.Context, req *QueryServiceDenomsByCreatorRequest) (*QueryServiceDenomsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomsByCreator not implemented")
}
func (*UnimplementedQueryServiceServer) Denom(ctx context.Context, req *QueryServiceDenomRequest) (*QueryServiceDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Denom not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_Denoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Denoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.pnft.v2.QueryService/Denoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Denoms(ctx, req.(*QueryServiceDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_DenomsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDenomsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).DenomsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.pnft.v2.QueryService/DenomsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).DenomsByCreator(ctx, req.(*QueryServiceDenomsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.pnft.v2.QueryService/Denom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Denom(ctx, req.(*QueryServiceDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.pnft.v2.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Denoms",
			Handler:    _QueryService_Denoms_Handler,
		},
		{
			MethodName: "DenomsByCreator",
			Handler:    _QueryService_DenomsByCreator_Handler,
		},
		{
			MethodName: "Denom",
			Handler:    _QueryService_Denom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/pnft/v2/query.proto",
}

func (m *QueryServiceDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDenomsByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDenomsByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDenomsByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDenomsByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDenomsByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDenomsByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Denom != nil {
		{
			size, err := m.Denom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryServiceDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDenomsByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDenomsByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, e := range m.Denoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryServiceDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Denom != nil {
		l = m.Denom.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryServiceDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &Denom{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDenomsByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDenomsByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDenomsByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDenomsByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDenomsByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDenomsByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, &Denom{})
			if err := m.Denoms[len(m.Denoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Denom == nil {
				m.Denom = &Denom{}
			}
			if err := m.Denom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
