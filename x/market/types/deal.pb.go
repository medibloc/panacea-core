// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/market/v2/deal.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deal defines a deal.
type Deal struct {
	DealId                uint64      `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DealAddress           string      `protobuf:"bytes,2,opt,name=deal_address,json=dealAddress,proto3" json:"deal_address,omitempty"`
	DataSchema            []string    `protobuf:"bytes,3,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	Budget                *types.Coin `protobuf:"bytes,4,opt,name=budget,proto3" json:"budget,omitempty"`
	TrustedDataValidators []string    `protobuf:"bytes,5,rep,name=trusted_data_validators,json=trustedDataValidators,proto3" json:"trusted_data_validators,omitempty"`
	MaxNumData            uint64      `protobuf:"varint,6,opt,name=max_num_data,json=maxNumData,proto3" json:"max_num_data,omitempty"`
	CurNumData            uint64      `protobuf:"varint,7,opt,name=cur_num_data,json=curNumData,proto3" json:"cur_num_data,omitempty"`
	Owner                 string      `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	Status                string      `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}
func (*Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5fa671ef5f22b6, []int{0}
}
func (m *Deal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deal.Merge(m, src)
}
func (m *Deal) XXX_Size() int {
	return m.Size()
}
func (m *Deal) XXX_DiscardUnknown() {
	xxx_messageInfo_Deal.DiscardUnknown(m)
}

var xxx_messageInfo_Deal proto.InternalMessageInfo

func (m *Deal) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *Deal) GetDealAddress() string {
	if m != nil {
		return m.DealAddress
	}
	return ""
}

func (m *Deal) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *Deal) GetBudget() *types.Coin {
	if m != nil {
		return m.Budget
	}
	return nil
}

func (m *Deal) GetTrustedDataValidators() []string {
	if m != nil {
		return m.TrustedDataValidators
	}
	return nil
}

func (m *Deal) GetMaxNumData() uint64 {
	if m != nil {
		return m.MaxNumData
	}
	return 0
}

func (m *Deal) GetCurNumData() uint64 {
	if m != nil {
		return m.CurNumData
	}
	return 0
}

func (m *Deal) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Deal) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Deal)(nil), "panacea.market.v2.Deal")
}

func init() { proto.RegisterFile("panacea/market/v2/deal.proto", fileDescriptor_ad5fa671ef5f22b6) }

var fileDescriptor_ad5fa671ef5f22b6 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xbf, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0xbb, 0x5e, 0x8e, 0xba, 0xb7, 0x60, 0x1d, 0x9c, 0x39, 0xa1, 0x10, 0x98, 0xb2,
	0x60, 0xab, 0x45, 0x62, 0x07, 0x6e, 0xe9, 0xc2, 0x10, 0x24, 0x06, 0x96, 0xe8, 0xc5, 0xb6, 0xd2,
	0x88, 0x38, 0xae, 0xfc, 0x23, 0x94, 0xff, 0x82, 0x3f, 0x89, 0x91, 0xb1, 0x23, 0x23, 0x6a, 0xff,
	0x11, 0x64, 0x27, 0x85, 0xcd, 0xef, 0xfb, 0xf9, 0xf8, 0xe9, 0x3d, 0x3d, 0xf4, 0x7c, 0x07, 0x3d,
	0x70, 0x09, 0x4c, 0x81, 0xf9, 0x2a, 0x1d, 0x1b, 0xd6, 0x4c, 0x48, 0xe8, 0xe8, 0xce, 0x68, 0xa7,
	0xf1, 0xe3, 0x89, 0xd2, 0x91, 0xd2, 0x61, 0x7d, 0x7f, 0xdb, 0xe8, 0x46, 0x47, 0xca, 0xc2, 0x6b,
	0x14, 0xef, 0x33, 0xae, 0xad, 0xd2, 0x96, 0xd5, 0x60, 0x25, 0x1b, 0x56, 0xb5, 0x74, 0xb0, 0x62,
	0x5c, 0xb7, 0xfd, 0xc8, 0x5f, 0xfd, 0xbc, 0x40, 0xf3, 0x07, 0x09, 0x1d, 0xbe, 0x43, 0xd7, 0xa1,
	0x7f, 0xd5, 0x0a, 0x92, 0xe4, 0x49, 0x31, 0x2f, 0xd3, 0x50, 0x6e, 0x04, 0x7e, 0x89, 0x6e, 0x22,
	0x00, 0x21, 0x8c, 0xb4, 0x96, 0x5c, 0xe4, 0x49, 0xb1, 0x28, 0x97, 0x21, 0x7b, 0x37, 0x46, 0xf8,
	0x05, 0x5a, 0x0a, 0x70, 0x50, 0x59, 0xbe, 0x95, 0x0a, 0xc8, 0x65, 0x7e, 0x59, 0x2c, 0x4a, 0x14,
	0xa2, 0x4f, 0x31, 0xc1, 0x2b, 0x94, 0xd6, 0x5e, 0x34, 0xd2, 0x91, 0x79, 0x9e, 0x14, 0xcb, 0xf5,
	0x33, 0x3a, 0x8e, 0x45, 0xc3, 0x58, 0x74, 0x1a, 0x8b, 0x7e, 0xd0, 0x6d, 0x5f, 0x4e, 0x22, 0x7e,
	0x8b, 0xee, 0x9c, 0xf1, 0xd6, 0x49, 0x51, 0xc5, 0xde, 0x03, 0x74, 0xad, 0x00, 0xa7, 0x8d, 0x25,
	0x57, 0xb1, 0xff, 0x93, 0x09, 0x3f, 0x80, 0x83, 0xcf, 0xff, 0x20, 0xce, 0xd1, 0x8d, 0x82, 0x7d,
	0xd5, 0x7b, 0x15, 0xff, 0x91, 0x34, 0x2e, 0x83, 0x14, 0xec, 0x3f, 0x7a, 0x15, 0xdc, 0x60, 0x70,
	0x6f, 0xfe, 0x1b, 0xd7, 0xa3, 0xc1, 0xbd, 0x39, 0x1b, 0xb7, 0xe8, 0x4a, 0x7f, 0xeb, 0xa5, 0x21,
	0x8f, 0xe2, 0xae, 0x63, 0x81, 0x9f, 0xa2, 0xd4, 0x3a, 0x70, 0xde, 0x92, 0x45, 0x8c, 0xa7, 0xea,
	0xfd, 0xe6, 0xd7, 0x31, 0x4b, 0x0e, 0xc7, 0x2c, 0xf9, 0x73, 0xcc, 0x92, 0x1f, 0xa7, 0x6c, 0x76,
	0x38, 0x65, 0xb3, 0xdf, 0xa7, 0x6c, 0xf6, 0x85, 0x35, 0xad, 0xdb, 0xfa, 0x9a, 0x72, 0xad, 0x98,
	0x92, 0xa2, 0xad, 0x3b, 0xcd, 0xd9, 0x74, 0xb9, 0xd7, 0x5c, 0x1b, 0xc9, 0xf6, 0xe7, 0xf3, 0xba,
	0xef, 0x3b, 0x69, 0xeb, 0x34, 0x1e, 0xe5, 0xcd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x44,
	0x3d, 0x1a, 0xfd, 0x01, 0x00, 0x00,
}

func (m *Deal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	if m.CurNumData != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.CurNumData))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxNumData != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.MaxNumData))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TrustedDataValidators) > 0 {
		for iNdEx := len(m.TrustedDataValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataValidators[iNdEx])
			copy(dAtA[i:], m.TrustedDataValidators[iNdEx])
			i = encodeVarintDeal(dAtA, i, uint64(len(m.TrustedDataValidators[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Budget != nil {
		{
			size, err := m.Budget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintDeal(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DealAddress) > 0 {
		i -= len(m.DealAddress)
		copy(dAtA[i:], m.DealAddress)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.DealAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeal(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Deal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovDeal(uint64(m.DealId))
	}
	l = len(m.DealAddress)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovDeal(uint64(l))
		}
	}
	if m.Budget != nil {
		l = m.Budget.Size()
		n += 1 + l + sovDeal(uint64(l))
	}
	if len(m.TrustedDataValidators) > 0 {
		for _, s := range m.TrustedDataValidators {
			l = len(s)
			n += 1 + l + sovDeal(uint64(l))
		}
	}
	if m.MaxNumData != 0 {
		n += 1 + sovDeal(uint64(m.MaxNumData))
	}
	if m.CurNumData != 0 {
		n += 1 + sovDeal(uint64(m.CurNumData))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	return n
}

func sovDeal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeal(x uint64) (n int) {
	return sovDeal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Budget == nil {
				m.Budget = &types.Coin{}
			}
			if err := m.Budget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataValidators = append(m.TrustedDataValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumData", wireType)
			}
			m.MaxNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurNumData", wireType)
			}
			m.CurNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeal = fmt.Errorf("proto: unexpected end of group")
)
