// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/did/v2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateDID defines the Msg/CreateDID request type.
type MsgServiceCreateDIDRequest struct {
	Did                  string       `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Document             *DIDDocument `protobuf:"bytes,2,opt,name=document,proto3" json:"document,omitempty"`
	VerificationMethodId string       `protobuf:"bytes,3,opt,name=verification_method_id,json=verificationMethodId,proto3" json:"verification_method_id,omitempty"`
	Signature            []byte       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	FromAddress          string       `protobuf:"bytes,5,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgServiceCreateDIDRequest) Reset()         { *m = MsgServiceCreateDIDRequest{} }
func (m *MsgServiceCreateDIDRequest) String() string { return proto.CompactTextString(m) }
func (*MsgServiceCreateDIDRequest) ProtoMessage()    {}
func (*MsgServiceCreateDIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90e89c02ae9a760, []int{0}
}
func (m *MsgServiceCreateDIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceCreateDIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceCreateDIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceCreateDIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceCreateDIDRequest.Merge(m, src)
}
func (m *MsgServiceCreateDIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceCreateDIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceCreateDIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceCreateDIDRequest proto.InternalMessageInfo

func (m *MsgServiceCreateDIDRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgServiceCreateDIDRequest) GetDocument() *DIDDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *MsgServiceCreateDIDRequest) GetVerificationMethodId() string {
	if m != nil {
		return m.VerificationMethodId
	}
	return ""
}

func (m *MsgServiceCreateDIDRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MsgServiceCreateDIDRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

// MsgCreateDIDResponse defines the Msg/CreateDID response type.
type MsgServiceCreateDIDResponse struct {
}

func (m *MsgServiceCreateDIDResponse) Reset()         { *m = MsgServiceCreateDIDResponse{} }
func (m *MsgServiceCreateDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgServiceCreateDIDResponse) ProtoMessage()    {}
func (*MsgServiceCreateDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90e89c02ae9a760, []int{1}
}
func (m *MsgServiceCreateDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceCreateDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceCreateDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceCreateDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceCreateDIDResponse.Merge(m, src)
}
func (m *MsgServiceCreateDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceCreateDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceCreateDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceCreateDIDResponse proto.InternalMessageInfo

// MsgUpdateDID defines the Msg/UpdateDID request type.
type MsgServiceUpdateDIDRequest struct {
	Did                  string       `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Document             *DIDDocument `protobuf:"bytes,2,opt,name=document,proto3" json:"document,omitempty"`
	VerificationMethodId string       `protobuf:"bytes,3,opt,name=verification_method_id,json=verificationMethodId,proto3" json:"verification_method_id,omitempty"`
	Signature            []byte       `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	FromAddress          string       `protobuf:"bytes,5,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgServiceUpdateDIDRequest) Reset()         { *m = MsgServiceUpdateDIDRequest{} }
func (m *MsgServiceUpdateDIDRequest) String() string { return proto.CompactTextString(m) }
func (*MsgServiceUpdateDIDRequest) ProtoMessage()    {}
func (*MsgServiceUpdateDIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90e89c02ae9a760, []int{2}
}
func (m *MsgServiceUpdateDIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceUpdateDIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceUpdateDIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceUpdateDIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceUpdateDIDRequest.Merge(m, src)
}
func (m *MsgServiceUpdateDIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceUpdateDIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceUpdateDIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceUpdateDIDRequest proto.InternalMessageInfo

func (m *MsgServiceUpdateDIDRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgServiceUpdateDIDRequest) GetDocument() *DIDDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *MsgServiceUpdateDIDRequest) GetVerificationMethodId() string {
	if m != nil {
		return m.VerificationMethodId
	}
	return ""
}

func (m *MsgServiceUpdateDIDRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MsgServiceUpdateDIDRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

// MsgUpdateDIDResponse defines the Msg/UpdateDID response type.
type MsgServiceUpdateDIDResponse struct {
}

func (m *MsgServiceUpdateDIDResponse) Reset()         { *m = MsgServiceUpdateDIDResponse{} }
func (m *MsgServiceUpdateDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgServiceUpdateDIDResponse) ProtoMessage()    {}
func (*MsgServiceUpdateDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90e89c02ae9a760, []int{3}
}
func (m *MsgServiceUpdateDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceUpdateDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceUpdateDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceUpdateDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceUpdateDIDResponse.Merge(m, src)
}
func (m *MsgServiceUpdateDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceUpdateDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceUpdateDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceUpdateDIDResponse proto.InternalMessageInfo

// MsgDeactivateDID defines the Msg/DeactivateDID request type.
type MsgServiceDeactivateDIDRequest struct {
	Did                  string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	VerificationMethodId string `protobuf:"bytes,2,opt,name=verification_method_id,json=verificationMethodId,proto3" json:"verification_method_id,omitempty"`
	Signature            []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	FromAddress          string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgServiceDeactivateDIDRequest) Reset()         { *m = MsgServiceDeactivateDIDRequest{} }
func (m *MsgServiceDeactivateDIDRequest) String() string { return proto.CompactTextString(m) }
func (*MsgServiceDeactivateDIDRequest) ProtoMessage()    {}
func (*MsgServiceDeactivateDIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90e89c02ae9a760, []int{4}
}
func (m *MsgServiceDeactivateDIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceDeactivateDIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceDeactivateDIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceDeactivateDIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceDeactivateDIDRequest.Merge(m, src)
}
func (m *MsgServiceDeactivateDIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceDeactivateDIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceDeactivateDIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceDeactivateDIDRequest proto.InternalMessageInfo

func (m *MsgServiceDeactivateDIDRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *MsgServiceDeactivateDIDRequest) GetVerificationMethodId() string {
	if m != nil {
		return m.VerificationMethodId
	}
	return ""
}

func (m *MsgServiceDeactivateDIDRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MsgServiceDeactivateDIDRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

// MsgDeactivateDIDResponse defines the Msg/DeactivateDID response type.
type MsgServiceDeactivateDIDResponse struct {
}

func (m *MsgServiceDeactivateDIDResponse) Reset()         { *m = MsgServiceDeactivateDIDResponse{} }
func (m *MsgServiceDeactivateDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgServiceDeactivateDIDResponse) ProtoMessage()    {}
func (*MsgServiceDeactivateDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c90e89c02ae9a760, []int{5}
}
func (m *MsgServiceDeactivateDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgServiceDeactivateDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgServiceDeactivateDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgServiceDeactivateDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgServiceDeactivateDIDResponse.Merge(m, src)
}
func (m *MsgServiceDeactivateDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgServiceDeactivateDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgServiceDeactivateDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgServiceDeactivateDIDResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgServiceCreateDIDRequest)(nil), "panacea.did.v2.MsgServiceCreateDIDRequest")
	proto.RegisterType((*MsgServiceCreateDIDResponse)(nil), "panacea.did.v2.MsgServiceCreateDIDResponse")
	proto.RegisterType((*MsgServiceUpdateDIDRequest)(nil), "panacea.did.v2.MsgServiceUpdateDIDRequest")
	proto.RegisterType((*MsgServiceUpdateDIDResponse)(nil), "panacea.did.v2.MsgServiceUpdateDIDResponse")
	proto.RegisterType((*MsgServiceDeactivateDIDRequest)(nil), "panacea.did.v2.MsgServiceDeactivateDIDRequest")
	proto.RegisterType((*MsgServiceDeactivateDIDResponse)(nil), "panacea.did.v2.MsgServiceDeactivateDIDResponse")
}

func init() { proto.RegisterFile("panacea/did/v2/tx.proto", fileDescriptor_c90e89c02ae9a760) }

var fileDescriptor_c90e89c02ae9a760 = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xeb, 0x76, 0x40, 0xd4, 0x33, 0x20, 0x64, 0x21, 0x88, 0x32, 0x10, 0x3a, 0xb3, 0xaa,
	0xb8, 0x24, 0x52, 0x40, 0x62, 0x0d, 0x64, 0x41, 0x17, 0x23, 0xa1, 0x20, 0x36, 0x6c, 0x2a, 0xd7,
	0x3e, 0xd3, 0x5a, 0x22, 0x71, 0xb0, 0x9d, 0xa8, 0xbc, 0x05, 0xaf, 0xc1, 0x9b, 0x20, 0x56, 0x5d,
	0xb2, 0x42, 0xa8, 0x7d, 0x11, 0x94, 0x8b, 0x7a, 0x49, 0x9b, 0xb6, 0xeb, 0xd9, 0x45, 0xe7, 0xfc,
	0x39, 0xbf, 0x3f, 0xff, 0xd6, 0xc1, 0x8f, 0x12, 0x1a, 0x53, 0x06, 0xd4, 0xe3, 0x82, 0x7b, 0x99,
	0xef, 0x99, 0xa9, 0x9b, 0x28, 0x69, 0x24, 0xb9, 0x57, 0x35, 0x5c, 0x2e, 0xb8, 0x9b, 0xf9, 0xb6,
	0x55, 0x13, 0xe6, 0xe5, 0x42, 0x79, 0xf9, 0x17, 0x61, 0xfb, 0x4a, 0x8f, 0x3f, 0x81, 0xca, 0x04,
	0x83, 0xf7, 0x0a, 0xa8, 0x81, 0x60, 0x10, 0x84, 0xf0, 0x2d, 0x05, 0x6d, 0xc8, 0x7d, 0xdc, 0xe1,
	0x82, 0x5b, 0xa8, 0x87, 0xfa, 0xdd, 0x30, 0xff, 0x24, 0x6f, 0xf0, 0x1d, 0x2e, 0x59, 0x1a, 0x41,
	0x6c, 0xac, 0x76, 0x0f, 0xf5, 0x4f, 0xfd, 0x73, 0x77, 0xd3, 0xcd, 0x0d, 0x06, 0x41, 0x50, 0x49,
	0xc2, 0xa5, 0x98, 0xbc, 0xc6, 0x0f, 0x33, 0x50, 0xe2, 0x5a, 0x30, 0x6a, 0x84, 0x8c, 0x87, 0x11,
	0x98, 0x89, 0xe4, 0x43, 0xc1, 0xad, 0x4e, 0x31, 0xfd, 0xc1, 0x7a, 0xf7, 0xaa, 0x68, 0x0e, 0x38,
	0x79, 0x8c, 0xbb, 0x5a, 0x8c, 0x63, 0x6a, 0x52, 0x05, 0xd6, 0x49, 0x0f, 0xf5, 0xcf, 0xc2, 0x55,
	0x81, 0x5c, 0xe0, 0xb3, 0x6b, 0x25, 0xa3, 0x21, 0xe5, 0x5c, 0x81, 0xd6, 0xd6, 0xad, 0x62, 0xd2,
	0x69, 0x5e, 0x7b, 0x5b, 0x96, 0x2e, 0x9f, 0xe0, 0xf3, 0x9d, 0x7c, 0x3a, 0x91, 0xb1, 0x86, 0x1a,
	0xff, 0xe7, 0x84, 0xdf, 0x68, 0xfe, 0x35, 0xbe, 0x8a, 0xff, 0x27, 0xc2, 0xce, 0xaa, 0x1f, 0x00,
	0x65, 0x46, 0x64, 0x87, 0xee, 0xa0, 0x19, 0xa5, 0x7d, 0x2c, 0x4a, 0xe7, 0x10, 0xca, 0xc9, 0x36,
	0xca, 0x05, 0x7e, 0xda, 0x78, 0xd4, 0x12, 0xc7, 0xff, 0xdd, 0xc6, 0x78, 0xa5, 0x21, 0x1c, 0x77,
	0x97, 0x91, 0x93, 0x67, 0xf5, 0x9c, 0x9a, 0xdf, 0xbd, 0xfd, 0xfc, 0x28, 0x6d, 0x69, 0x9a, 0xbb,
	0x2c, 0x2f, 0x76, 0x9f, 0x4b, 0xfd, 0x75, 0xed, 0x73, 0xd9, 0x4a, 0x8a, 0x24, 0xf8, 0xee, 0x06,
	0x33, 0x71, 0x9b, 0xff, 0xde, 0x95, 0xa3, 0xed, 0x1d, 0xad, 0x2f, 0x1d, 0xdf, 0x7d, 0xf8, 0x35,
	0x77, 0xd0, 0x6c, 0xee, 0xa0, 0x7f, 0x73, 0x07, 0xfd, 0x58, 0x38, 0xad, 0xd9, 0xc2, 0x69, 0xfd,
	0x59, 0x38, 0xad, 0x8f, 0xe8, 0xcb, 0x8b, 0xb1, 0x30, 0x93, 0x74, 0xe4, 0x32, 0x19, 0x79, 0x11,
	0x70, 0x31, 0xfa, 0x2a, 0x99, 0x57, 0xcd, 0x7f, 0xc9, 0xa4, 0x02, 0x6f, 0x5a, 0x2c, 0x1b, 0xf3,
	0x3d, 0x01, 0x3d, 0xba, 0x5d, 0x2c, 0x9b, 0x57, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x61,
	0x1b, 0x60, 0xb1, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	// CreateDID defines a method for creating a DID.
	CreateDID(ctx context.Context, in *MsgServiceCreateDIDRequest, opts ...grpc.CallOption) (*MsgServiceCreateDIDResponse, error)
	// UpdateDID defines a method for updating a DID.
	UpdateDID(ctx context.Context, in *MsgServiceUpdateDIDRequest, opts ...grpc.CallOption) (*MsgServiceUpdateDIDResponse, error)
	// DeactivateDID defines a method for deactivating a DID.
	DeactivateDID(ctx context.Context, in *MsgServiceDeactivateDIDRequest, opts ...grpc.CallOption) (*MsgServiceDeactivateDIDResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) CreateDID(ctx context.Context, in *MsgServiceCreateDIDRequest, opts ...grpc.CallOption) (*MsgServiceCreateDIDResponse, error) {
	out := new(MsgServiceCreateDIDResponse)
	err := c.cc.Invoke(ctx, "/panacea.did.v2.MsgService/CreateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) UpdateDID(ctx context.Context, in *MsgServiceUpdateDIDRequest, opts ...grpc.CallOption) (*MsgServiceUpdateDIDResponse, error) {
	out := new(MsgServiceUpdateDIDResponse)
	err := c.cc.Invoke(ctx, "/panacea.did.v2.MsgService/UpdateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) DeactivateDID(ctx context.Context, in *MsgServiceDeactivateDIDRequest, opts ...grpc.CallOption) (*MsgServiceDeactivateDIDResponse, error) {
	out := new(MsgServiceDeactivateDIDResponse)
	err := c.cc.Invoke(ctx, "/panacea.did.v2.MsgService/DeactivateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	// CreateDID defines a method for creating a DID.
	CreateDID(context.Context, *MsgServiceCreateDIDRequest) (*MsgServiceCreateDIDResponse, error)
	// UpdateDID defines a method for updating a DID.
	UpdateDID(context.Context, *MsgServiceUpdateDIDRequest) (*MsgServiceUpdateDIDResponse, error)
	// DeactivateDID defines a method for deactivating a DID.
	DeactivateDID(context.Context, *MsgServiceDeactivateDIDRequest) (*MsgServiceDeactivateDIDResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) CreateDID(ctx context.Context, req *MsgServiceCreateDIDRequest) (*MsgServiceCreateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDID not implemented")
}
func (*UnimplementedMsgServiceServer) UpdateDID(ctx context.Context, req *MsgServiceUpdateDIDRequest) (*MsgServiceUpdateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDID not implemented")
}
func (*UnimplementedMsgServiceServer) DeactivateDID(ctx context.Context, req *MsgServiceDeactivateDIDRequest) (*MsgServiceDeactivateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateDID not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_CreateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgServiceCreateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).CreateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.did.v2.MsgService/CreateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).CreateDID(ctx, req.(*MsgServiceCreateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_UpdateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgServiceUpdateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).UpdateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.did.v2.MsgService/UpdateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).UpdateDID(ctx, req.(*MsgServiceUpdateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_DeactivateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgServiceDeactivateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).DeactivateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.did.v2.MsgService/DeactivateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).DeactivateDID(ctx, req.(*MsgServiceDeactivateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.did.v2.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDID",
			Handler:    _MsgService_CreateDID_Handler,
		},
		{
			MethodName: "UpdateDID",
			Handler:    _MsgService_UpdateDID_Handler,
		},
		{
			MethodName: "DeactivateDID",
			Handler:    _MsgService_DeactivateDID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/did/v2/tx.proto",
}

func (m *MsgServiceCreateDIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceCreateDIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceCreateDIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerificationMethodId) > 0 {
		i -= len(m.VerificationMethodId)
		copy(dAtA[i:], m.VerificationMethodId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationMethodId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgServiceCreateDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceCreateDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceCreateDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgServiceUpdateDIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceUpdateDIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceUpdateDIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerificationMethodId) > 0 {
		i -= len(m.VerificationMethodId)
		copy(dAtA[i:], m.VerificationMethodId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationMethodId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgServiceUpdateDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceUpdateDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceUpdateDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgServiceDeactivateDIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceDeactivateDIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceDeactivateDIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerificationMethodId) > 0 {
		i -= len(m.VerificationMethodId)
		copy(dAtA[i:], m.VerificationMethodId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationMethodId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgServiceDeactivateDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgServiceDeactivateDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgServiceDeactivateDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgServiceCreateDIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerificationMethodId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgServiceCreateDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgServiceUpdateDIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerificationMethodId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgServiceUpdateDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgServiceDeactivateDIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerificationMethodId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgServiceDeactivateDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgServiceCreateDIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceCreateDIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceCreateDIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &DIDDocument{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceCreateDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceCreateDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceCreateDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceUpdateDIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceUpdateDIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceUpdateDIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &DIDDocument{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceUpdateDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceUpdateDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceUpdateDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceDeactivateDIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceDeactivateDIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceDeactivateDIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgServiceDeactivateDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgServiceDeactivateDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgServiceDeactivateDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
