// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2alpha2/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the datadeal module's genesis state.
type GenesisState struct {
	Deals                 []Deal                  `protobuf:"bytes,1,rep,name=deals,proto3" json:"deals"`
	NextDealNumber        uint64                  `protobuf:"varint,2,opt,name=next_deal_number,json=nextDealNumber,proto3" json:"next_deal_number,omitempty"`
	DataSales             []DataSale              `protobuf:"bytes,3,rep,name=data_sales,json=dataSales,proto3" json:"data_sales"`
	DataVerificationVotes []DataVerificationVote  `protobuf:"bytes,4,rep,name=data_verification_votes,json=dataVerificationVotes,proto3" json:"data_verification_votes"`
	DataDeliveryVotes     []DataDeliveryVote      `protobuf:"bytes,5,rep,name=data_delivery_votes,json=dataDeliveryVotes,proto3" json:"data_delivery_votes"`
	DataVerificationQueue []DataVerificationQueue `protobuf:"bytes,6,rep,name=data_verification_queue,json=dataVerificationQueue,proto3" json:"data_verification_queue"`
	DataDeliveryQueue     []DataDeliveryQueue     `protobuf:"bytes,7,rep,name=data_delivery_queue,json=dataDeliveryQueue,proto3" json:"data_delivery_queue"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_148a7361fee02e04, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetDeals() []Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

func (m *GenesisState) GetNextDealNumber() uint64 {
	if m != nil {
		return m.NextDealNumber
	}
	return 0
}

func (m *GenesisState) GetDataSales() []DataSale {
	if m != nil {
		return m.DataSales
	}
	return nil
}

func (m *GenesisState) GetDataVerificationVotes() []DataVerificationVote {
	if m != nil {
		return m.DataVerificationVotes
	}
	return nil
}

func (m *GenesisState) GetDataDeliveryVotes() []DataDeliveryVote {
	if m != nil {
		return m.DataDeliveryVotes
	}
	return nil
}

func (m *GenesisState) GetDataVerificationQueue() []DataVerificationQueue {
	if m != nil {
		return m.DataVerificationQueue
	}
	return nil
}

func (m *GenesisState) GetDataDeliveryQueue() []DataDeliveryQueue {
	if m != nil {
		return m.DataDeliveryQueue
	}
	return nil
}

// DataVerificationQueue defines a data verification queue.
type DataVerificationQueue struct {
	DataHash      string    `protobuf:"bytes,1,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DealId        uint64    `protobuf:"varint,2,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	VotingEndTime time.Time `protobuf:"bytes,3,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time" yaml:"voting_end_time"`
}

func (m *DataVerificationQueue) Reset()         { *m = DataVerificationQueue{} }
func (m *DataVerificationQueue) String() string { return proto.CompactTextString(m) }
func (*DataVerificationQueue) ProtoMessage()    {}
func (*DataVerificationQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_148a7361fee02e04, []int{1}
}
func (m *DataVerificationQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataVerificationQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataVerificationQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataVerificationQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataVerificationQueue.Merge(m, src)
}
func (m *DataVerificationQueue) XXX_Size() int {
	return m.Size()
}
func (m *DataVerificationQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_DataVerificationQueue.DiscardUnknown(m)
}

var xxx_messageInfo_DataVerificationQueue proto.InternalMessageInfo

func (m *DataVerificationQueue) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *DataVerificationQueue) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *DataVerificationQueue) GetVotingEndTime() time.Time {
	if m != nil {
		return m.VotingEndTime
	}
	return time.Time{}
}

// DataDeliveryQueue defines a data delivery queue.
type DataDeliveryQueue struct {
	DataHash      string    `protobuf:"bytes,1,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DealId        uint64    `protobuf:"varint,2,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	VotingEndTime time.Time `protobuf:"bytes,3,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time" yaml:"voting_end_time"`
}

func (m *DataDeliveryQueue) Reset()         { *m = DataDeliveryQueue{} }
func (m *DataDeliveryQueue) String() string { return proto.CompactTextString(m) }
func (*DataDeliveryQueue) ProtoMessage()    {}
func (*DataDeliveryQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_148a7361fee02e04, []int{2}
}
func (m *DataDeliveryQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDeliveryQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataDeliveryQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataDeliveryQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDeliveryQueue.Merge(m, src)
}
func (m *DataDeliveryQueue) XXX_Size() int {
	return m.Size()
}
func (m *DataDeliveryQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDeliveryQueue.DiscardUnknown(m)
}

var xxx_messageInfo_DataDeliveryQueue proto.InternalMessageInfo

func (m *DataDeliveryQueue) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *DataDeliveryQueue) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *DataDeliveryQueue) GetVotingEndTime() time.Time {
	if m != nil {
		return m.VotingEndTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "panacea.datadeal.v2alpha2.GenesisState")
	proto.RegisterType((*DataVerificationQueue)(nil), "panacea.datadeal.v2alpha2.DataVerificationQueue")
	proto.RegisterType((*DataDeliveryQueue)(nil), "panacea.datadeal.v2alpha2.DataDeliveryQueue")
}

func init() {
	proto.RegisterFile("panacea/datadeal/v2alpha2/genesis.proto", fileDescriptor_148a7361fee02e04)
}

var fileDescriptor_148a7361fee02e04 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x69, 0xda, 0xd2, 0x2d, 0x7f, 0x5d, 0x28, 0x35, 0x41, 0x72, 0x22, 0x83, 0x84, 0x25,
	0xc0, 0x8b, 0x02, 0x27, 0xb8, 0x45, 0x45, 0x94, 0x4b, 0x25, 0x52, 0xd4, 0x03, 0x17, 0x6b, 0x9c,
	0x9d, 0x38, 0x96, 0x6c, 0x6f, 0xc8, 0x6e, 0xac, 0xe4, 0x2d, 0xfa, 0x2a, 0x1c, 0x78, 0x87, 0x1e,
	0x7b, 0xe4, 0x54, 0x50, 0x22, 0x5e, 0x80, 0x27, 0x40, 0xbb, 0x76, 0x44, 0x08, 0x49, 0x0b, 0x37,
	0x6e, 0x9e, 0x99, 0xef, 0x67, 0x3e, 0xed, 0xc8, 0xe4, 0x51, 0x1f, 0x32, 0xe8, 0x20, 0x30, 0x0e,
	0x0a, 0x38, 0x42, 0xc2, 0xf2, 0x26, 0x24, 0xfd, 0x1e, 0x34, 0x59, 0x84, 0x19, 0xca, 0x58, 0xfa,
	0xfd, 0x81, 0x50, 0x82, 0xde, 0x2b, 0x81, 0xfe, 0x0c, 0xe8, 0xcf, 0x80, 0xb5, 0x3b, 0x91, 0x88,
	0x84, 0x41, 0x31, 0xfd, 0x55, 0x10, 0x6a, 0x0f, 0x57, 0x2b, 0x1b, 0x7a, 0x81, 0xf2, 0x2e, 0x40,
	0x81, 0x02, 0x09, 0x09, 0x96, 0x48, 0x77, 0x35, 0x52, 0x8d, 0x4a, 0x4c, 0x3d, 0x12, 0x22, 0x4a,
	0x90, 0x99, 0x2a, 0x1c, 0x76, 0x99, 0x8a, 0x53, 0x94, 0x0a, 0xd2, 0x7e, 0x01, 0x70, 0xbf, 0x57,
	0xc9, 0xb5, 0x37, 0x45, 0xae, 0x23, 0x05, 0x0a, 0xe9, 0x2b, 0xb2, 0xae, 0xb5, 0xa4, 0x6d, 0x35,
	0xd6, 0xbc, 0xed, 0x66, 0xdd, 0x5f, 0x19, 0xd3, 0xdf, 0x47, 0x48, 0x5a, 0xd5, 0xd3, 0xf3, 0x7a,
	0xa5, 0x5d, 0x70, 0xa8, 0x47, 0x6e, 0x65, 0x38, 0x52, 0x81, 0xae, 0x82, 0x6c, 0x98, 0x86, 0x38,
	0xb0, 0xaf, 0x34, 0x2c, 0xaf, 0xda, 0xbe, 0xa1, 0xfb, 0x9a, 0x70, 0x68, 0xba, 0xf4, 0x80, 0x10,
	0x2d, 0x18, 0xe8, 0x3c, 0xd2, 0x5e, 0x33, 0x5e, 0x0f, 0x2e, 0xf2, 0x02, 0x05, 0x47, 0x90, 0x60,
	0xe9, 0xb7, 0xc5, 0xcb, 0x5a, 0xd2, 0x94, 0xec, 0x19, 0xa5, 0x1c, 0x07, 0x71, 0x37, 0xee, 0x80,
	0x8a, 0x45, 0x16, 0xe4, 0x42, 0xa1, 0xb4, 0xab, 0x46, 0x96, 0x5d, 0x22, 0x7b, 0x3c, 0x47, 0x3c,
	0x16, 0x6a, 0x66, 0xb1, 0xcb, 0x97, 0xcc, 0x24, 0x05, 0x72, 0xdb, 0xd8, 0x71, 0x4c, 0xe2, 0x1c,
	0x07, 0xe3, 0xd2, 0x6a, 0xdd, 0x58, 0x3d, 0xbe, 0xc4, 0x6a, 0xbf, 0x24, 0xcd, 0xd9, 0xec, 0xf0,
	0x85, 0xbe, 0xa4, 0xd9, 0xb2, 0x44, 0x1f, 0x87, 0x38, 0x44, 0x7b, 0xc3, 0xd8, 0x3c, 0xfb, 0x87,
	0x44, 0xef, 0x34, 0x6f, 0x55, 0x24, 0x33, 0xa4, 0xe1, 0x62, 0xa4, 0xc2, 0x6b, 0xd3, 0x78, 0x3d,
	0xf9, 0xcb, 0x48, 0xf3, 0x3e, 0xbf, 0x65, 0x32, 0x03, 0xf7, 0xb3, 0x45, 0x76, 0x97, 0xae, 0x46,
	0xef, 0x13, 0xf3, 0x98, 0x41, 0x0f, 0x64, 0xcf, 0xb6, 0x1a, 0x96, 0xb7, 0xd5, 0xbe, 0xaa, 0x1b,
	0x07, 0x20, 0x7b, 0x74, 0x8f, 0x6c, 0x9a, 0x5b, 0x8a, 0x79, 0x79, 0x47, 0x1b, 0xba, 0x7c, 0xcb,
	0x69, 0x97, 0xdc, 0xcc, 0x85, 0x8a, 0xb3, 0x28, 0xc0, 0x8c, 0x07, 0xfa, 0xaa, 0xed, 0xb5, 0x86,
	0xe5, 0x6d, 0x37, 0x6b, 0x7e, 0x71, 0xf2, 0xfe, 0xec, 0xe4, 0xfd, 0xf7, 0xb3, 0x93, 0x6f, 0xb9,
	0x7a, 0xbb, 0x1f, 0xe7, 0xf5, 0xbb, 0x63, 0x48, 0x93, 0x97, 0xee, 0x82, 0x80, 0x7b, 0xf2, 0xb5,
	0x6e, 0xb5, 0xaf, 0x17, 0xdd, 0xd7, 0x19, 0xd7, 0x3c, 0xf7, 0x93, 0x45, 0x76, 0xfe, 0x88, 0xf9,
	0x7f, 0xef, 0xdc, 0x3a, 0x3c, 0x9d, 0x38, 0xd6, 0xd9, 0xc4, 0xb1, 0xbe, 0x4d, 0x1c, 0xeb, 0x64,
	0xea, 0x54, 0xce, 0xa6, 0x4e, 0xe5, 0xcb, 0xd4, 0xa9, 0x7c, 0x78, 0x11, 0xc5, 0xaa, 0x37, 0x0c,
	0xfd, 0x8e, 0x48, 0x59, 0x8a, 0x3c, 0x0e, 0x13, 0xd1, 0x61, 0xe5, 0xfb, 0x3e, 0xed, 0x88, 0x01,
	0xb2, 0xbc, 0xc9, 0x46, 0xbf, 0x7e, 0x28, 0x6a, 0xdc, 0x47, 0x19, 0x6e, 0x98, 0xb5, 0x9e, 0xff,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x1c, 0x1d, 0x46, 0x1b, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataDeliveryQueue) > 0 {
		for iNdEx := len(m.DataDeliveryQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataDeliveryQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DataVerificationQueue) > 0 {
		for iNdEx := len(m.DataVerificationQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataVerificationQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DataDeliveryVotes) > 0 {
		for iNdEx := len(m.DataDeliveryVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataDeliveryVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DataVerificationVotes) > 0 {
		for iNdEx := len(m.DataVerificationVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataVerificationVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DataSales) > 0 {
		for iNdEx := len(m.DataSales) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSales[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextDealNumber != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextDealNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Deals) > 0 {
		for iNdEx := len(m.Deals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataVerificationQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataVerificationQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataVerificationQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.DealId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataDeliveryQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDeliveryQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDeliveryQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGenesis(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.DealId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deals) > 0 {
		for _, e := range m.Deals {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.NextDealNumber != 0 {
		n += 1 + sovGenesis(uint64(m.NextDealNumber))
	}
	if len(m.DataSales) > 0 {
		for _, e := range m.DataSales {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DataVerificationVotes) > 0 {
		for _, e := range m.DataVerificationVotes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DataDeliveryVotes) > 0 {
		for _, e := range m.DataDeliveryVotes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DataVerificationQueue) > 0 {
		for _, e := range m.DataVerificationQueue {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DataDeliveryQueue) > 0 {
		for _, e := range m.DataDeliveryQueue {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DataVerificationQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DealId != 0 {
		n += 1 + sovGenesis(uint64(m.DealId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *DataDeliveryQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DealId != 0 {
		n += 1 + sovGenesis(uint64(m.DealId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deals = append(m.Deals, Deal{})
			if err := m.Deals[len(m.Deals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDealNumber", wireType)
			}
			m.NextDealNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDealNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSales", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSales = append(m.DataSales, DataSale{})
			if err := m.DataSales[len(m.DataSales)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVerificationVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataVerificationVotes = append(m.DataVerificationVotes, DataVerificationVote{})
			if err := m.DataVerificationVotes[len(m.DataVerificationVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDeliveryVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataDeliveryVotes = append(m.DataDeliveryVotes, DataDeliveryVote{})
			if err := m.DataDeliveryVotes[len(m.DataDeliveryVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVerificationQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataVerificationQueue = append(m.DataVerificationQueue, DataVerificationQueue{})
			if err := m.DataVerificationQueue[len(m.DataVerificationQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDeliveryQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataDeliveryQueue = append(m.DataDeliveryQueue, DataDeliveryQueue{})
			if err := m.DataDeliveryQueue[len(m.DataDeliveryQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataVerificationQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataVerificationQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataVerificationQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDeliveryQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDeliveryQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDeliveryQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
