// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2/consent.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Consent contains the data provider's consent to a specific deal
// and necessary information to complete data provision.
type Consent struct {
	DealId      uint64       `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	Certificate *Certificate `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Agreements  []*Agreement `protobuf:"bytes,3,rep,name=agreements,proto3" json:"agreements,omitempty"`
}

func (m *Consent) Reset()         { *m = Consent{} }
func (m *Consent) String() string { return proto.CompactTextString(m) }
func (*Consent) ProtoMessage()    {}
func (*Consent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d80581f65c4381, []int{0}
}
func (m *Consent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Consent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Consent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Consent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consent.Merge(m, src)
}
func (m *Consent) XXX_Size() int {
	return m.Size()
}
func (m *Consent) XXX_DiscardUnknown() {
	xxx_messageInfo_Consent.DiscardUnknown(m)
}

var xxx_messageInfo_Consent proto.InternalMessageInfo

func (m *Consent) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *Consent) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *Consent) GetAgreements() []*Agreement {
	if m != nil {
		return m.Agreements
	}
	return nil
}

// Certificate defines a certificate signed by an oracle who issued the certificate.
type Certificate struct {
	UnsignedCertificate *UnsignedCertificate `protobuf:"bytes,1,opt,name=unsigned_certificate,json=unsignedCertificate,proto3" json:"unsigned_certificate,omitempty"`
	Signature           []byte               `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d80581f65c4381, []int{1}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetUnsignedCertificate() *UnsignedCertificate {
	if m != nil {
		return m.UnsignedCertificate
	}
	return nil
}

func (m *Certificate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// UnsignedCertificate defines a certificate issued by an oracle as a result of data validation.
type UnsignedCertificate struct {
	UniqueId        string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	OracleAddress   string `protobuf:"bytes,2,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	DealId          uint64 `protobuf:"varint,3,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	ProviderAddress string `protobuf:"bytes,4,opt,name=provider_address,json=providerAddress,proto3" json:"provider_address,omitempty"`
	DataHash        string `protobuf:"bytes,5,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
}

func (m *UnsignedCertificate) Reset()         { *m = UnsignedCertificate{} }
func (m *UnsignedCertificate) String() string { return proto.CompactTextString(m) }
func (*UnsignedCertificate) ProtoMessage()    {}
func (*UnsignedCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d80581f65c4381, []int{2}
}
func (m *UnsignedCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedCertificate.Merge(m, src)
}
func (m *UnsignedCertificate) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedCertificate proto.InternalMessageInfo

func (m *UnsignedCertificate) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *UnsignedCertificate) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *UnsignedCertificate) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *UnsignedCertificate) GetProviderAddress() string {
	if m != nil {
		return m.ProviderAddress
	}
	return ""
}

func (m *UnsignedCertificate) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

// Agreement represents whether the data provider, submitting the consent, agrees to a specific agreement term.
type Agreement struct {
	TermId    uint32 `protobuf:"varint,1,opt,name=term_id,json=termId,proto3" json:"term_id,omitempty"`
	Agreement bool   `protobuf:"varint,2,opt,name=agreement,proto3" json:"agreement,omitempty"`
}

func (m *Agreement) Reset()         { *m = Agreement{} }
func (m *Agreement) String() string { return proto.CompactTextString(m) }
func (*Agreement) ProtoMessage()    {}
func (*Agreement) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d80581f65c4381, []int{3}
}
func (m *Agreement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agreement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agreement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agreement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agreement.Merge(m, src)
}
func (m *Agreement) XXX_Size() int {
	return m.Size()
}
func (m *Agreement) XXX_DiscardUnknown() {
	xxx_messageInfo_Agreement.DiscardUnknown(m)
}

var xxx_messageInfo_Agreement proto.InternalMessageInfo

func (m *Agreement) GetTermId() uint32 {
	if m != nil {
		return m.TermId
	}
	return 0
}

func (m *Agreement) GetAgreement() bool {
	if m != nil {
		return m.Agreement
	}
	return false
}

func init() {
	proto.RegisterType((*Consent)(nil), "panacea.datadeal.v2.Consent")
	proto.RegisterType((*Certificate)(nil), "panacea.datadeal.v2.Certificate")
	proto.RegisterType((*UnsignedCertificate)(nil), "panacea.datadeal.v2.UnsignedCertificate")
	proto.RegisterType((*Agreement)(nil), "panacea.datadeal.v2.Agreement")
}

func init() { proto.RegisterFile("panacea/datadeal/v2/consent.proto", fileDescriptor_b5d80581f65c4381) }

var fileDescriptor_b5d80581f65c4381 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x8e, 0xd3, 0x30,
	0x14, 0xc6, 0x6b, 0x3a, 0x74, 0x26, 0x2e, 0x03, 0xc8, 0x45, 0xa2, 0xd2, 0xa0, 0xa8, 0x44, 0x42,
	0x0a, 0x0b, 0x12, 0x29, 0xb0, 0x46, 0x9a, 0xce, 0x86, 0x6e, 0x58, 0x58, 0x62, 0x03, 0x8b, 0xc8,
	0xb5, 0x1f, 0x8d, 0xa5, 0x26, 0x0e, 0xb6, 0x53, 0xc1, 0x0d, 0x58, 0x72, 0x0a, 0x0e, 0xc1, 0x09,
	0x58, 0xce, 0x92, 0x25, 0x6a, 0x2f, 0x82, 0x9c, 0x34, 0x4d, 0xd0, 0x64, 0xe9, 0x9f, 0xbe, 0xf7,
	0xf9, 0x7b, 0x7f, 0xf0, 0xf3, 0x92, 0x15, 0x8c, 0x03, 0x8b, 0x05, 0xb3, 0x4c, 0x00, 0xdb, 0xc6,
	0xbb, 0x24, 0xe6, 0xaa, 0x30, 0x50, 0xd8, 0xa8, 0xd4, 0xca, 0x2a, 0x32, 0x3b, 0x4a, 0xa2, 0x56,
	0x12, 0xed, 0x92, 0xe0, 0x27, 0xc2, 0xe7, 0x37, 0x8d, 0x8c, 0x3c, 0xc5, 0xe7, 0x0e, 0xa7, 0x52,
	0xcc, 0xd1, 0x02, 0x85, 0x67, 0x74, 0xe2, 0x9e, 0x2b, 0x41, 0x96, 0x78, 0xca, 0x41, 0x5b, 0xf9,
	0x59, 0x72, 0x66, 0x61, 0x7e, 0x6f, 0x81, 0xc2, 0x69, 0xb2, 0x88, 0x06, 0xfc, 0xa2, 0x9b, 0x4e,
	0x47, 0xfb, 0x45, 0xe4, 0x2d, 0xc6, 0x6c, 0xa3, 0x01, 0x72, 0x28, 0xac, 0x99, 0x8f, 0x17, 0xe3,
	0x70, 0x9a, 0xf8, 0x83, 0x16, 0xd7, 0xad, 0x8c, 0xf6, 0x2a, 0x82, 0xef, 0x08, 0x4f, 0x7b, 0xe6,
	0xe4, 0x13, 0x7e, 0x52, 0x15, 0x46, 0x6e, 0x0a, 0x10, 0x69, 0x3f, 0x1c, 0xaa, 0xc3, 0x85, 0x83,
	0xce, 0x1f, 0x8e, 0x05, 0xfd, 0x90, 0xb3, 0xea, 0x2e, 0x24, 0xcf, 0xb0, 0xe7, 0x20, 0xb3, 0x95,
	0x6e, 0xda, 0x7d, 0x40, 0x3b, 0x10, 0xfc, 0x42, 0x78, 0x36, 0x60, 0x45, 0xae, 0xb0, 0x57, 0x15,
	0xf2, 0x4b, 0x05, 0xed, 0x04, 0x3d, 0x7a, 0xd1, 0x80, 0x95, 0x20, 0x2f, 0xf0, 0x43, 0xa5, 0x19,
	0xdf, 0x42, 0xca, 0x84, 0xd0, 0x60, 0x4c, 0xed, 0xeb, 0xd1, 0xcb, 0x86, 0x5e, 0x37, 0xb0, 0xbf,
	0x83, 0xf1, 0x7f, 0x3b, 0x78, 0x89, 0x1f, 0x97, 0x5a, 0xed, 0xa4, 0x00, 0x7d, 0x72, 0x38, 0xab,
	0x1d, 0x1e, 0xb5, 0xbc, 0xf5, 0xb8, 0xc2, 0x9e, 0xeb, 0x3a, 0xcd, 0x98, 0xc9, 0xe6, 0xf7, 0x9b,
	0x1c, 0x0e, 0xbc, 0x63, 0x26, 0x0b, 0x96, 0xd8, 0x3b, 0x0d, 0xd8, 0xfd, 0x66, 0x41, 0xe7, 0x6d,
	0xde, 0x4b, 0x3a, 0x71, 0xcf, 0x95, 0x70, 0x03, 0x38, 0xcd, 0xbe, 0x0e, 0x7a, 0x41, 0x3b, 0xb0,
	0x7c, 0xff, 0x7b, 0xef, 0xa3, 0xdb, 0xbd, 0x8f, 0xfe, 0xee, 0x7d, 0xf4, 0xe3, 0xe0, 0x8f, 0x6e,
	0x0f, 0xfe, 0xe8, 0xcf, 0xc1, 0x1f, 0x7d, 0x7c, 0xb3, 0x91, 0x36, 0xab, 0xd6, 0x11, 0x57, 0x79,
	0x9c, 0x83, 0x90, 0xeb, 0xad, 0xe2, 0xf1, 0x71, 0x15, 0xaf, 0xb8, 0xd2, 0xe0, 0xce, 0xf2, 0x6b,
	0x77, 0xa4, 0xf6, 0x5b, 0x09, 0x66, 0x3d, 0xa9, 0x0f, 0xf4, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xaf, 0x67, 0x36, 0x52, 0xc5, 0x02, 0x00, 0x00,
}

func (m *Consent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Consent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Consent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Agreements) > 0 {
		for iNdEx := len(m.Agreements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Agreements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Certificate != nil {
		{
			size, err := m.Certificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintConsent(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintConsent(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.UnsignedCertificate != nil {
		{
			size, err := m.UnsignedCertificate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintConsent(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProviderAddress) > 0 {
		i -= len(m.ProviderAddress)
		copy(dAtA[i:], m.ProviderAddress)
		i = encodeVarintConsent(dAtA, i, uint64(len(m.ProviderAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.DealId != 0 {
		i = encodeVarintConsent(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintConsent(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintConsent(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Agreement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agreement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agreement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Agreement {
		i--
		if m.Agreement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TermId != 0 {
		i = encodeVarintConsent(dAtA, i, uint64(m.TermId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsent(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Consent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovConsent(uint64(m.DealId))
	}
	if m.Certificate != nil {
		l = m.Certificate.Size()
		n += 1 + l + sovConsent(uint64(l))
	}
	if len(m.Agreements) > 0 {
		for _, e := range m.Agreements {
			l = e.Size()
			n += 1 + l + sovConsent(uint64(l))
		}
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsignedCertificate != nil {
		l = m.UnsignedCertificate.Size()
		n += 1 + l + sovConsent(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovConsent(uint64(l))
	}
	return n
}

func (m *UnsignedCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovConsent(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovConsent(uint64(l))
	}
	if m.DealId != 0 {
		n += 1 + sovConsent(uint64(m.DealId))
	}
	l = len(m.ProviderAddress)
	if l > 0 {
		n += 1 + l + sovConsent(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovConsent(uint64(l))
	}
	return n
}

func (m *Agreement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermId != 0 {
		n += 1 + sovConsent(uint64(m.TermId))
	}
	if m.Agreement {
		n += 2
	}
	return n
}

func sovConsent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsent(x uint64) (n int) {
	return sovConsent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Consent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Consent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Consent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Certificate == nil {
				m.Certificate = &Certificate{}
			}
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agreements = append(m.Agreements, &Agreement{})
			if err := m.Agreements[len(m.Agreements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsignedCertificate == nil {
				m.UnsignedCertificate = &UnsignedCertificate{}
			}
			if err := m.UnsignedCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Agreement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agreement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agreement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermId", wireType)
			}
			m.TermId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TermId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agreement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agreement = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConsent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsent = fmt.Errorf("proto: unexpected end of group")
)
