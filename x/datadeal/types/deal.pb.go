// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2alpha2/deal.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DealStatus enumerates the status of deal.
type DealStatus int32

const (
	// DEAL_STATUS_UNSPECIFIED
	DEAL_STATUS_UNSPECIFIED DealStatus = 0
	// DEAL_STATUS_ACTIVE defines the deal status that is active.
	DEAL_STATUS_ACTIVE DealStatus = 1
	// DEAL_STATUS_INACTIVE defines the deal status in the process of deactivate.
	DEAL_STATUS_DEACTIVATING DealStatus = 2
	// DEAL_STATUS_DEACTIVATED defines the deal status that is deactivate has been processed.
	DEAL_STATUS_DEACTIVATED DealStatus = 3
	// DEAL_STATUS_COMPLETED defines the deal status that is completed.
	DEAL_STATUS_COMPLETED DealStatus = 4
)

var DealStatus_name = map[int32]string{
	0: "DEAL_STATUS_UNSPECIFIED",
	1: "DEAL_STATUS_ACTIVE",
	2: "DEAL_STATUS_DEACTIVATING",
	3: "DEAL_STATUS_DEACTIVATED",
	4: "DEAL_STATUS_COMPLETED",
}

var DealStatus_value = map[string]int32{
	"DEAL_STATUS_UNSPECIFIED":  0,
	"DEAL_STATUS_ACTIVE":       1,
	"DEAL_STATUS_DEACTIVATING": 2,
	"DEAL_STATUS_DEACTIVATED":  3,
	"DEAL_STATUS_COMPLETED":    4,
}

func (x DealStatus) String() string {
	return proto.EnumName(DealStatus_name, int32(x))
}

func (DealStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1f270d6d7e68cb6, []int{0}
}

// Deal defines a deal.
type Deal struct {
	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address      string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DataSchema   []string    `protobuf:"bytes,3,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	Budget       *types.Coin `protobuf:"bytes,4,opt,name=budget,proto3" json:"budget,omitempty"`
	MaxNumData   uint64      `protobuf:"varint,5,opt,name=max_num_data,json=maxNumData,proto3" json:"max_num_data,omitempty"`
	CurNumData   uint64      `protobuf:"varint,6,opt,name=cur_num_data,json=curNumData,proto3" json:"cur_num_data,omitempty"`
	BuyerAddress string      `protobuf:"bytes,7,opt,name=buyer_address,json=buyerAddress,proto3" json:"buyer_address,omitempty"`
	Status       DealStatus  `protobuf:"varint,8,opt,name=status,proto3,enum=panacea.datadeal.v2alpha2.DealStatus" json:"status,omitempty"`
	Nonce        []byte      `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}
func (*Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f270d6d7e68cb6, []int{0}
}
func (m *Deal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deal.Merge(m, src)
}
func (m *Deal) XXX_Size() int {
	return m.Size()
}
func (m *Deal) XXX_DiscardUnknown() {
	xxx_messageInfo_Deal.DiscardUnknown(m)
}

var xxx_messageInfo_Deal proto.InternalMessageInfo

func (m *Deal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Deal) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Deal) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *Deal) GetBudget() *types.Coin {
	if m != nil {
		return m.Budget
	}
	return nil
}

func (m *Deal) GetMaxNumData() uint64 {
	if m != nil {
		return m.MaxNumData
	}
	return 0
}

func (m *Deal) GetCurNumData() uint64 {
	if m != nil {
		return m.CurNumData
	}
	return 0
}

func (m *Deal) GetBuyerAddress() string {
	if m != nil {
		return m.BuyerAddress
	}
	return ""
}

func (m *Deal) GetStatus() DealStatus {
	if m != nil {
		return m.Status
	}
	return DEAL_STATUS_UNSPECIFIED
}

func (m *Deal) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func init() {
	proto.RegisterEnum("panacea.datadeal.v2alpha2.DealStatus", DealStatus_name, DealStatus_value)
	proto.RegisterType((*Deal)(nil), "panacea.datadeal.v2alpha2.Deal")
}

func init() {
	proto.RegisterFile("panacea/datadeal/v2alpha2/deal.proto", fileDescriptor_f1f270d6d7e68cb6)
}

var fileDescriptor_f1f270d6d7e68cb6 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xc7, 0x33, 0x69, 0xb6, 0x6b, 0x67, 0xeb, 0x52, 0x86, 0x55, 0xd3, 0x2a, 0x31, 0xf8, 0x02,
	0x41, 0x70, 0x86, 0x46, 0xaf, 0x1e, 0x62, 0x13, 0xa5, 0xb0, 0xd6, 0x25, 0xe9, 0x7a, 0xf0, 0x12,
	0x26, 0x93, 0xa1, 0x0d, 0x34, 0x99, 0x92, 0x97, 0xd2, 0xfd, 0x06, 0x1e, 0xfd, 0x02, 0x9e, 0xfc,
	0x26, 0x9e, 0x3c, 0xee, 0xd1, 0xa3, 0xb4, 0x5f, 0x44, 0xf2, 0x66, 0x8b, 0xe0, 0x6d, 0x9e, 0xff,
	0xff, 0xf7, 0x3c, 0xf3, 0xe7, 0xe1, 0x81, 0xcf, 0xd6, 0x34, 0xa1, 0x8c, 0x53, 0x12, 0xd2, 0x9c,
	0x86, 0x9c, 0xae, 0xc8, 0xc6, 0xa4, 0xab, 0xf5, 0x92, 0x9a, 0xa4, 0xac, 0xf0, 0x3a, 0x15, 0xb9,
	0x40, 0xc3, 0x86, 0xc2, 0x2d, 0x85, 0x5b, 0x6a, 0x74, 0xb1, 0x10, 0x0b, 0x51, 0x51, 0xa4, 0x7c,
	0xd5, 0x0d, 0x23, 0x8d, 0x89, 0x2c, 0x16, 0x19, 0x09, 0x68, 0xc6, 0xc9, 0x66, 0x1c, 0xf0, 0x9c,
	0x8e, 0x09, 0x13, 0x51, 0x52, 0xfb, 0x4f, 0x7e, 0xc8, 0x50, 0xb1, 0x39, 0x5d, 0xa1, 0x73, 0x28,
	0x47, 0xa1, 0x0a, 0x74, 0x60, 0x28, 0xae, 0x1c, 0x85, 0x48, 0x85, 0xa7, 0x34, 0x0c, 0x53, 0x9e,
	0x65, 0xaa, 0xac, 0x03, 0xa3, 0xe7, 0xb6, 0x25, 0x7a, 0x0c, 0xcf, 0xca, 0xdf, 0xfd, 0x8c, 0x2d,
	0x79, 0x4c, 0xd5, 0x8e, 0xde, 0x31, 0x7a, 0x2e, 0x2c, 0x25, 0xaf, 0x52, 0xd0, 0x18, 0x76, 0x83,
	0x22, 0x5c, 0xf0, 0x5c, 0x55, 0x74, 0x60, 0x9c, 0x99, 0x43, 0x5c, 0x87, 0xc0, 0x65, 0x08, 0xdc,
	0x84, 0xc0, 0x13, 0x11, 0x25, 0x6e, 0x03, 0x22, 0x1d, 0xf6, 0x63, 0xba, 0xf5, 0x93, 0x22, 0xf6,
	0xcb, 0x41, 0xea, 0x49, 0x95, 0x03, 0xc6, 0x74, 0x3b, 0x2b, 0x62, 0x9b, 0xe6, 0xb4, 0x24, 0x58,
	0x91, 0x1e, 0x88, 0x6e, 0x4d, 0xb0, 0x22, 0x6d, 0x89, 0xa7, 0xf0, 0x6e, 0x50, 0xdc, 0xf0, 0xd4,
	0x6f, 0x73, 0x9f, 0x56, 0xb9, 0xfb, 0x95, 0x68, 0x35, 0xe1, 0xdf, 0xc0, 0x6e, 0x96, 0xd3, 0xbc,
	0xc8, 0xd4, 0x3b, 0x3a, 0x30, 0xce, 0xcd, 0xe7, 0xf8, 0xbf, 0x1b, 0xc5, 0xe5, 0x5e, 0xbc, 0x0a,
	0x76, 0x9b, 0x26, 0x74, 0x01, 0x4f, 0x12, 0x91, 0x30, 0xae, 0xf6, 0x74, 0x60, 0xf4, 0xdd, 0xba,
	0x78, 0xf1, 0x0d, 0x40, 0x78, 0x80, 0xd1, 0x43, 0xf8, 0xc0, 0x76, 0xac, 0x4b, 0xdf, 0x9b, 0x5b,
	0xf3, 0x6b, 0xcf, 0xbf, 0x9e, 0x79, 0x57, 0xce, 0x64, 0xfa, 0x6e, 0xea, 0xd8, 0x03, 0x09, 0xdd,
	0x87, 0xe8, 0xd8, 0xb4, 0x26, 0xf3, 0xe9, 0x27, 0x67, 0x00, 0xd0, 0x23, 0xa8, 0x1e, 0xeb, 0xb6,
	0x53, 0x39, 0xd6, 0x7c, 0x3a, 0x7b, 0x3f, 0x90, 0xff, 0x1d, 0xf9, 0xd7, 0x75, 0xec, 0x41, 0x07,
	0x0d, 0xe1, 0xbd, 0x63, 0x73, 0xf2, 0xf1, 0xc3, 0xd5, 0xa5, 0x53, 0x5a, 0xca, 0x48, 0xf9, 0xf2,
	0x5d, 0x93, 0xde, 0xce, 0x7e, 0xee, 0x34, 0x70, 0xbb, 0xd3, 0xc0, 0xef, 0x9d, 0x06, 0xbe, 0xee,
	0x35, 0xe9, 0x76, 0xaf, 0x49, 0xbf, 0xf6, 0x9a, 0xf4, 0xf9, 0xf5, 0x22, 0xca, 0x97, 0x45, 0x80,
	0x99, 0x88, 0x49, 0xcc, 0xc3, 0x28, 0x58, 0x09, 0x46, 0x9a, 0x8d, 0xbc, 0x64, 0x22, 0xe5, 0x64,
	0x63, 0x92, 0xed, 0xe1, 0x26, 0xf3, 0x9b, 0x35, 0xcf, 0x82, 0x6e, 0x75, 0x3b, 0xaf, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x70, 0x79, 0xf1, 0xe5, 0xb4, 0x02, 0x00, 0x00,
}

func (m *Deal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BuyerAddress) > 0 {
		i -= len(m.BuyerAddress)
		copy(dAtA[i:], m.BuyerAddress)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.BuyerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CurNumData != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.CurNumData))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxNumData != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.MaxNumData))
		i--
		dAtA[i] = 0x28
	}
	if m.Budget != nil {
		{
			size, err := m.Budget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintDeal(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintDeal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDeal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeal(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Deal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDeal(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovDeal(uint64(l))
		}
	}
	if m.Budget != nil {
		l = m.Budget.Size()
		n += 1 + l + sovDeal(uint64(l))
	}
	if m.MaxNumData != 0 {
		n += 1 + sovDeal(uint64(m.MaxNumData))
	}
	if m.CurNumData != 0 {
		n += 1 + sovDeal(uint64(m.CurNumData))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDeal(uint64(m.Status))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovDeal(uint64(l))
	}
	return n
}

func sovDeal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeal(x uint64) (n int) {
	return sovDeal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Budget == nil {
				m.Budget = &types.Coin{}
			}
			if err := m.Budget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumData", wireType)
			}
			m.MaxNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurNumData", wireType)
			}
			m.CurNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DealStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeal = fmt.Errorf("proto: unexpected end of group")
)
