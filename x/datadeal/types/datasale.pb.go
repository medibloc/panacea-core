// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2alpha2/datasale.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/medibloc/panacea-core/v2/x/oracle/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DataSaleStatus enumerates the status of data sale.
type DataSaleStatus int32

const (
	// DATA_SALE_STATUS_UNSPECIFIED
	DATA_SALE_STATUS_UNSPECIFIED DataSaleStatus = 0
	// DATA_SALE_STATUS_VERIFICATION_VOTING_PERIOD defines that the status of DataSale is verifying in voting period.
	DATA_SALE_STATUS_VERIFICATION_VOTING_PERIOD DataSaleStatus = 1
	// DATA_SALE_STATUS_DELIVERY_VOTING_PERIOD defines that the status of DataSale is delivering in voting period.
	DATA_SALE_STATUS_DELIVERY_VOTING_PERIOD DataSaleStatus = 2
	// DATA_SALE_STATUS_COMPLETED defines that the status of DataSale is completed.
	DATA_SALE_STATUS_COMPLETED DataSaleStatus = 3
	// DATA_SALE_STATUS_VERIFICATION_FAILED defines that the status of DataSale is verification failed.
	DATA_SALE_STATUS_VERIFICATION_FAILED DataSaleStatus = 4
	// DATA_SALE_STATUS_DELIVERY_FAILED defines that the status of DataSale is delivery failed.
	DATA_SALE_STATUS_DELIVERY_FAILED DataSaleStatus = 5
	//DATA_SALE_STATUS_DEAL_COMPLETED defines that the status of Deal associated with DataSale is DEAL_STATUS_COMPLETED.
	DATA_SALE_STATUS_DEAL_COMPLETED DataSaleStatus = 6
)

var DataSaleStatus_name = map[int32]string{
	0: "DATA_SALE_STATUS_UNSPECIFIED",
	1: "DATA_SALE_STATUS_VERIFICATION_VOTING_PERIOD",
	2: "DATA_SALE_STATUS_DELIVERY_VOTING_PERIOD",
	3: "DATA_SALE_STATUS_COMPLETED",
	4: "DATA_SALE_STATUS_VERIFICATION_FAILED",
	5: "DATA_SALE_STATUS_DELIVERY_FAILED",
	6: "DATA_SALE_STATUS_DEAL_COMPLETED",
}

var DataSaleStatus_value = map[string]int32{
	"DATA_SALE_STATUS_UNSPECIFIED":                0,
	"DATA_SALE_STATUS_VERIFICATION_VOTING_PERIOD": 1,
	"DATA_SALE_STATUS_DELIVERY_VOTING_PERIOD":     2,
	"DATA_SALE_STATUS_COMPLETED":                  3,
	"DATA_SALE_STATUS_VERIFICATION_FAILED":        4,
	"DATA_SALE_STATUS_DELIVERY_FAILED":            5,
	"DATA_SALE_STATUS_DEAL_COMPLETED":             6,
}

func (x DataSaleStatus) String() string {
	return proto.EnumName(DataSaleStatus_name, int32(x))
}

func (DataSaleStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4914a78fd1950a5d, []int{0}
}

// DataSale defines a data sale.
type DataSale struct {
	SellerAddress            string              `protobuf:"bytes,1,opt,name=seller_address,json=sellerAddress,proto3" json:"seller_address,omitempty"`
	DealId                   uint64              `protobuf:"varint,2,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	VerifiableCid            string              `protobuf:"bytes,3,opt,name=verifiable_cid,json=verifiableCid,proto3" json:"verifiable_cid,omitempty"`
	DeliveredCid             string              `protobuf:"bytes,4,opt,name=delivered_cid,json=deliveredCid,proto3" json:"delivered_cid,omitempty"`
	DataHash                 string              `protobuf:"bytes,5,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	Status                   DataSaleStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=panacea.datadeal.v2alpha2.DataSaleStatus" json:"status,omitempty"`
	VerificationVotingPeriod *types.VotingPeriod `protobuf:"bytes,7,opt,name=verification_voting_period,json=verificationVotingPeriod,proto3" json:"verification_voting_period,omitempty"`
	DeliveryVotingPeriod     *types.VotingPeriod `protobuf:"bytes,8,opt,name=delivery_voting_period,json=deliveryVotingPeriod,proto3" json:"delivery_voting_period,omitempty"`
	VerificationTallyResult  *types.TallyResult  `protobuf:"bytes,9,opt,name=verification_tally_result,json=verificationTallyResult,proto3" json:"verification_tally_result,omitempty"`
	DeliveryTallyResult      *types.TallyResult  `protobuf:"bytes,10,opt,name=delivery_tally_result,json=deliveryTallyResult,proto3" json:"delivery_tally_result,omitempty"`
}

func (m *DataSale) Reset()         { *m = DataSale{} }
func (m *DataSale) String() string { return proto.CompactTextString(m) }
func (*DataSale) ProtoMessage()    {}
func (*DataSale) Descriptor() ([]byte, []int) {
	return fileDescriptor_4914a78fd1950a5d, []int{0}
}
func (m *DataSale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSale.Merge(m, src)
}
func (m *DataSale) XXX_Size() int {
	return m.Size()
}
func (m *DataSale) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSale.DiscardUnknown(m)
}

var xxx_messageInfo_DataSale proto.InternalMessageInfo

func (m *DataSale) GetSellerAddress() string {
	if m != nil {
		return m.SellerAddress
	}
	return ""
}

func (m *DataSale) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *DataSale) GetVerifiableCid() string {
	if m != nil {
		return m.VerifiableCid
	}
	return ""
}

func (m *DataSale) GetDeliveredCid() string {
	if m != nil {
		return m.DeliveredCid
	}
	return ""
}

func (m *DataSale) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *DataSale) GetStatus() DataSaleStatus {
	if m != nil {
		return m.Status
	}
	return DATA_SALE_STATUS_UNSPECIFIED
}

func (m *DataSale) GetVerificationVotingPeriod() *types.VotingPeriod {
	if m != nil {
		return m.VerificationVotingPeriod
	}
	return nil
}

func (m *DataSale) GetDeliveryVotingPeriod() *types.VotingPeriod {
	if m != nil {
		return m.DeliveryVotingPeriod
	}
	return nil
}

func (m *DataSale) GetVerificationTallyResult() *types.TallyResult {
	if m != nil {
		return m.VerificationTallyResult
	}
	return nil
}

func (m *DataSale) GetDeliveryTallyResult() *types.TallyResult {
	if m != nil {
		return m.DeliveryTallyResult
	}
	return nil
}

func init() {
	proto.RegisterEnum("panacea.datadeal.v2alpha2.DataSaleStatus", DataSaleStatus_name, DataSaleStatus_value)
	proto.RegisterType((*DataSale)(nil), "panacea.datadeal.v2alpha2.DataSale")
}

func init() {
	proto.RegisterFile("panacea/datadeal/v2alpha2/datasale.proto", fileDescriptor_4914a78fd1950a5d)
}

var fileDescriptor_4914a78fd1950a5d = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdd, 0x8e, 0xd2, 0x4c,
	0x18, 0xc7, 0xe9, 0x2e, 0xcb, 0xee, 0xce, 0xfb, 0x2e, 0x21, 0xe3, 0xea, 0x76, 0xd1, 0xd4, 0xc6,
	0x65, 0x63, 0x75, 0x63, 0x9b, 0xa0, 0x37, 0x50, 0x69, 0xd1, 0x26, 0x08, 0xa4, 0xed, 0x12, 0x3f,
	0x0e, 0xc6, 0xa1, 0x33, 0x42, 0x93, 0x59, 0x4a, 0xda, 0x42, 0xe4, 0x0e, 0x3c, 0xf4, 0x1e, 0x3c,
	0xf4, 0x46, 0x3c, 0xdc, 0x43, 0x0f, 0x0d, 0xdc, 0x82, 0x17, 0x60, 0xfa, 0x05, 0x65, 0x11, 0x93,
	0x3d, 0xa3, 0xff, 0xf9, 0x3d, 0xbf, 0x67, 0x9e, 0x99, 0x0c, 0x40, 0x1a, 0xe3, 0x11, 0x76, 0x28,
	0x56, 0x08, 0x0e, 0x31, 0xa1, 0x98, 0x29, 0xd3, 0x3a, 0x66, 0xe3, 0x21, 0xae, 0xc7, 0x49, 0x80,
	0x19, 0x95, 0xc7, 0xbe, 0x17, 0x7a, 0xf0, 0x34, 0x25, 0xe5, 0x8c, 0x94, 0x33, 0xb2, 0x7a, 0x3c,
	0xf0, 0x06, 0x5e, 0x4c, 0x29, 0xd1, 0xaf, 0xa4, 0xa0, 0x5a, 0xcb, 0xd4, 0x9e, 0x8f, 0x1d, 0x46,
	0x57, 0xe2, 0xe4, 0x3b, 0xa1, 0x1e, 0xfd, 0x2e, 0x82, 0x03, 0x0d, 0x87, 0xd8, 0xc2, 0x8c, 0xc2,
	0x73, 0x50, 0x0e, 0x28, 0x63, 0xd4, 0x47, 0x98, 0x10, 0x9f, 0x06, 0x01, 0xcf, 0x89, 0x9c, 0x74,
	0x68, 0x1e, 0x25, 0xa9, 0x9a, 0x84, 0xf0, 0x04, 0xec, 0x47, 0x1b, 0x40, 0x2e, 0xe1, 0x77, 0x44,
	0x4e, 0x2a, 0x9a, 0xa5, 0xe8, 0xd3, 0x20, 0x51, 0xfd, 0x94, 0xfa, 0xee, 0x27, 0x17, 0xf7, 0x19,
	0x45, 0x8e, 0x4b, 0xf8, 0xdd, 0xa4, 0x7e, 0x95, 0x36, 0x5c, 0x02, 0xcf, 0xc0, 0x11, 0xa1, 0xcc,
	0x9d, 0x52, 0x9f, 0x92, 0x98, 0x2a, 0xc6, 0xd4, 0xff, 0xcb, 0x30, 0x82, 0xee, 0x83, 0xc3, 0x68,
	0x52, 0x34, 0xc4, 0xc1, 0x90, 0xdf, 0x8b, 0x81, 0x83, 0x28, 0x78, 0x8d, 0x83, 0x21, 0x54, 0x41,
	0x29, 0x08, 0x71, 0x38, 0x09, 0xf8, 0x92, 0xc8, 0x49, 0xe5, 0xfa, 0x13, 0x79, 0xeb, 0xe9, 0xc8,
	0xd9, 0x74, 0x56, 0x5c, 0x60, 0xa6, 0x85, 0xd0, 0x01, 0xd5, 0x64, 0x57, 0x0e, 0x0e, 0x5d, 0x6f,
	0x84, 0xa6, 0x5e, 0xe8, 0x8e, 0x06, 0x68, 0x4c, 0x7d, 0xd7, 0x23, 0xfc, 0xbe, 0xc8, 0x49, 0xff,
	0xd5, 0xcf, 0x97, 0xda, 0xf4, 0xcc, 0x96, 0xd2, 0x5e, 0x4c, 0x77, 0x63, 0xd8, 0xe4, 0xf3, 0xa2,
	0xfc, 0x0a, 0xfc, 0x00, 0xee, 0xa5, 0x43, 0xcd, 0x6e, 0x34, 0x38, 0xb8, 0x4d, 0x83, 0xe3, 0x4c,
	0xb2, 0x26, 0xff, 0x08, 0x4e, 0xd7, 0x26, 0x08, 0x31, 0x63, 0x33, 0xe4, 0xd3, 0x60, 0xc2, 0x42,
	0xfe, 0x30, 0xf6, 0xd7, 0xb6, 0xfa, 0xed, 0x08, 0x36, 0x63, 0xd6, 0x3c, 0xc9, 0x6b, 0x72, 0x0b,
	0xf0, 0x2d, 0xb8, 0xbb, 0xdc, 0xfe, 0x9a, 0x1d, 0xdc, 0xc2, 0x7e, 0x27, 0x53, 0xe4, 0xc2, 0xa7,
	0xdf, 0x77, 0x40, 0x79, 0xfd, 0x62, 0xa0, 0x08, 0x1e, 0x68, 0xaa, 0xad, 0x22, 0x4b, 0x6d, 0xe9,
	0xc8, 0xb2, 0x55, 0xfb, 0xd2, 0x42, 0x97, 0x6d, 0xab, 0xab, 0x37, 0x8c, 0xa6, 0xa1, 0x6b, 0x95,
	0x02, 0x54, 0xc0, 0xc5, 0x06, 0xd1, 0xd3, 0x4d, 0xa3, 0x69, 0x34, 0x54, 0xdb, 0xe8, 0xb4, 0x51,
	0xaf, 0x63, 0x1b, 0xed, 0x57, 0xa8, 0xab, 0x9b, 0x46, 0x47, 0xab, 0x70, 0xf0, 0x02, 0x3c, 0xde,
	0x28, 0xd0, 0xf4, 0x96, 0xd1, 0xd3, 0xcd, 0x77, 0x37, 0xe0, 0x1d, 0x28, 0x80, 0xea, 0x06, 0xdc,
	0xe8, 0xbc, 0xe9, 0xb6, 0x74, 0x5b, 0xd7, 0x2a, 0xbb, 0x50, 0x02, 0xb5, 0x7f, 0x77, 0x6f, 0xaa,
	0x46, 0x4b, 0xd7, 0x2a, 0x45, 0x58, 0x03, 0xe2, 0xf6, 0xb6, 0x29, 0xb5, 0x07, 0xcf, 0xc0, 0xc3,
	0xbf, 0x50, 0x6a, 0x2b, 0xd7, 0xb4, 0x54, 0x2d, 0x7e, 0xf9, 0x26, 0x14, 0x5e, 0xb6, 0x7f, 0xcc,
	0x05, 0xee, 0x7a, 0x2e, 0x70, 0xbf, 0xe6, 0x02, 0xf7, 0x75, 0x21, 0x14, 0xae, 0x17, 0x42, 0xe1,
	0xe7, 0x42, 0x28, 0xbc, 0x7f, 0x31, 0x70, 0xc3, 0xe1, 0xa4, 0x2f, 0x3b, 0xde, 0x95, 0x72, 0x45,
	0x89, 0xdb, 0x67, 0x9e, 0xa3, 0xa4, 0xb7, 0xf2, 0xcc, 0xf1, 0xfc, 0xe8, 0xd9, 0x2b, 0x9f, 0x57,
	0xff, 0x2e, 0xe1, 0x6c, 0x4c, 0x83, 0x7e, 0x29, 0x7e, 0xfb, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0x48, 0x2e, 0xfe, 0x7e, 0x04, 0x00, 0x00,
}

func (m *DataSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeliveryTallyResult != nil {
		{
			size, err := m.DeliveryTallyResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasale(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.VerificationTallyResult != nil {
		{
			size, err := m.VerificationTallyResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasale(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DeliveryVotingPeriod != nil {
		{
			size, err := m.DeliveryVotingPeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasale(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.VerificationVotingPeriod != nil {
		{
			size, err := m.VerificationVotingPeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDatasale(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintDatasale(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintDatasale(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeliveredCid) > 0 {
		i -= len(m.DeliveredCid)
		copy(dAtA[i:], m.DeliveredCid)
		i = encodeVarintDatasale(dAtA, i, uint64(len(m.DeliveredCid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerifiableCid) > 0 {
		i -= len(m.VerifiableCid)
		copy(dAtA[i:], m.VerifiableCid)
		i = encodeVarintDatasale(dAtA, i, uint64(len(m.VerifiableCid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DealId != 0 {
		i = encodeVarintDatasale(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SellerAddress) > 0 {
		i -= len(m.SellerAddress)
		copy(dAtA[i:], m.SellerAddress)
		i = encodeVarintDatasale(dAtA, i, uint64(len(m.SellerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDatasale(dAtA []byte, offset int, v uint64) int {
	offset -= sovDatasale(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DataSale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SellerAddress)
	if l > 0 {
		n += 1 + l + sovDatasale(uint64(l))
	}
	if m.DealId != 0 {
		n += 1 + sovDatasale(uint64(m.DealId))
	}
	l = len(m.VerifiableCid)
	if l > 0 {
		n += 1 + l + sovDatasale(uint64(l))
	}
	l = len(m.DeliveredCid)
	if l > 0 {
		n += 1 + l + sovDatasale(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovDatasale(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDatasale(uint64(m.Status))
	}
	if m.VerificationVotingPeriod != nil {
		l = m.VerificationVotingPeriod.Size()
		n += 1 + l + sovDatasale(uint64(l))
	}
	if m.DeliveryVotingPeriod != nil {
		l = m.DeliveryVotingPeriod.Size()
		n += 1 + l + sovDatasale(uint64(l))
	}
	if m.VerificationTallyResult != nil {
		l = m.VerificationTallyResult.Size()
		n += 1 + l + sovDatasale(uint64(l))
	}
	if m.DeliveryTallyResult != nil {
		l = m.DeliveryTallyResult.Size()
		n += 1 + l + sovDatasale(uint64(l))
	}
	return n
}

func sovDatasale(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDatasale(x uint64) (n int) {
	return sovDatasale(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatasale
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiableCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiableCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveredCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveredCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DataSaleStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationVotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationVotingPeriod == nil {
				m.VerificationVotingPeriod = &types.VotingPeriod{}
			}
			if err := m.VerificationVotingPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryVotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryVotingPeriod == nil {
				m.DeliveryVotingPeriod = &types.VotingPeriod{}
			}
			if err := m.DeliveryVotingPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationTallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationTallyResult == nil {
				m.VerificationTallyResult = &types.TallyResult{}
			}
			if err := m.VerificationTallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryTallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDatasale
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDatasale
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeliveryTallyResult == nil {
				m.DeliveryTallyResult = &types.TallyResult{}
			}
			if err := m.DeliveryTallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatasale(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatasale
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatasale(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatasale
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatasale
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDatasale
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDatasale
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDatasale
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDatasale        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatasale          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDatasale = fmt.Errorf("proto: unexpected end of group")
)
