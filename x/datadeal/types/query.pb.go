// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDealRequest is the request type for Query/Deal RPC method.
type QueryDealRequest struct {
	DealId uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
}

func (m *QueryDealRequest) Reset()         { *m = QueryDealRequest{} }
func (m *QueryDealRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDealRequest) ProtoMessage()    {}
func (*QueryDealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{0}
}
func (m *QueryDealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealRequest.Merge(m, src)
}
func (m *QueryDealRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealRequest proto.InternalMessageInfo

func (m *QueryDealRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

// QueryDealResponse is the response type for the Query/Deal RPC method.
type QueryDealResponse struct {
	Deal *Deal `protobuf:"bytes,1,opt,name=deal,proto3" json:"deal,omitempty"`
}

func (m *QueryDealResponse) Reset()         { *m = QueryDealResponse{} }
func (m *QueryDealResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDealResponse) ProtoMessage()    {}
func (*QueryDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{1}
}
func (m *QueryDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealResponse.Merge(m, src)
}
func (m *QueryDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealResponse proto.InternalMessageInfo

func (m *QueryDealResponse) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

// QueryDealsRequest is the request type for Query/Deals RPC method.
type QueryDealsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDealsRequest) Reset()         { *m = QueryDealsRequest{} }
func (m *QueryDealsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDealsRequest) ProtoMessage()    {}
func (*QueryDealsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{2}
}
func (m *QueryDealsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealsRequest.Merge(m, src)
}
func (m *QueryDealsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealsRequest proto.InternalMessageInfo

func (m *QueryDealsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDealsResponse is the response type for Query/Deals RPC method.
type QueryDealsResponse struct {
	Deals      []Deal              `protobuf:"bytes,1,rep,name=deals,proto3" json:"deals"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDealsResponse) Reset()         { *m = QueryDealsResponse{} }
func (m *QueryDealsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDealsResponse) ProtoMessage()    {}
func (*QueryDealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{3}
}
func (m *QueryDealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealsResponse.Merge(m, src)
}
func (m *QueryDealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealsResponse proto.InternalMessageInfo

func (m *QueryDealsResponse) GetDeals() []Deal {
	if m != nil {
		return m.Deals
	}
	return nil
}

func (m *QueryDealsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataCertRequest is the request type for Query/DataCert RPC method.
type QueryDataCertRequest struct {
	DealId   uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash string `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
}

func (m *QueryDataCertRequest) Reset()         { *m = QueryDataCertRequest{} }
func (m *QueryDataCertRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataCertRequest) ProtoMessage()    {}
func (*QueryDataCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{4}
}
func (m *QueryDataCertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCertRequest.Merge(m, src)
}
func (m *QueryDataCertRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCertRequest proto.InternalMessageInfo

func (m *QueryDataCertRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *QueryDataCertRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

// QueryDataCertResponse is the response type for Query/DataCert RPC method.
type QueryDataCertResponse struct {
	DataCert *DataCert `protobuf:"bytes,1,opt,name=data_cert,json=dataCert,proto3" json:"data_cert,omitempty"`
}

func (m *QueryDataCertResponse) Reset()         { *m = QueryDataCertResponse{} }
func (m *QueryDataCertResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataCertResponse) ProtoMessage()    {}
func (*QueryDataCertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{5}
}
func (m *QueryDataCertResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCertResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCertResponse.Merge(m, src)
}
func (m *QueryDataCertResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCertResponse proto.InternalMessageInfo

func (m *QueryDataCertResponse) GetDataCert() *DataCert {
	if m != nil {
		return m.DataCert
	}
	return nil
}

// QueryDataCertsRequest is the request type for Query/DataCerts RPC method.
type QueryDataCertsRequest struct {
	DealId     uint64             `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDataCertsRequest) Reset()         { *m = QueryDataCertsRequest{} }
func (m *QueryDataCertsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataCertsRequest) ProtoMessage()    {}
func (*QueryDataCertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{6}
}
func (m *QueryDataCertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCertsRequest.Merge(m, src)
}
func (m *QueryDataCertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCertsRequest proto.InternalMessageInfo

func (m *QueryDataCertsRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *QueryDataCertsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataCertsResponse is the response type for Query/DataCerts RPC method.
type QueryDataCertsResponse struct {
	DataCerts  []DataCert          `protobuf:"bytes,1,rep,name=data_certs,json=dataCerts,proto3" json:"data_certs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDataCertsResponse) Reset()         { *m = QueryDataCertsResponse{} }
func (m *QueryDataCertsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataCertsResponse) ProtoMessage()    {}
func (*QueryDataCertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3d350a7f469cc8, []int{7}
}
func (m *QueryDataCertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataCertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataCertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataCertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataCertsResponse.Merge(m, src)
}
func (m *QueryDataCertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataCertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataCertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataCertsResponse proto.InternalMessageInfo

func (m *QueryDataCertsResponse) GetDataCerts() []DataCert {
	if m != nil {
		return m.DataCerts
	}
	return nil
}

func (m *QueryDataCertsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDealRequest)(nil), "panacea.datadeal.v2alpha1.QueryDealRequest")
	proto.RegisterType((*QueryDealResponse)(nil), "panacea.datadeal.v2alpha1.QueryDealResponse")
	proto.RegisterType((*QueryDealsRequest)(nil), "panacea.datadeal.v2alpha1.QueryDealsRequest")
	proto.RegisterType((*QueryDealsResponse)(nil), "panacea.datadeal.v2alpha1.QueryDealsResponse")
	proto.RegisterType((*QueryDataCertRequest)(nil), "panacea.datadeal.v2alpha1.QueryDataCertRequest")
	proto.RegisterType((*QueryDataCertResponse)(nil), "panacea.datadeal.v2alpha1.QueryDataCertResponse")
	proto.RegisterType((*QueryDataCertsRequest)(nil), "panacea.datadeal.v2alpha1.QueryDataCertsRequest")
	proto.RegisterType((*QueryDataCertsResponse)(nil), "panacea.datadeal.v2alpha1.QueryDataCertsResponse")
}

func init() {
	proto.RegisterFile("panacea/datadeal/v2alpha1/query.proto", fileDescriptor_9d3d350a7f469cc8)
}

var fileDescriptor_9d3d350a7f469cc8 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x33, 0x25, 0x29, 0xcd, 0xb0, 0x81, 0x51, 0x81, 0xd6, 0x20, 0x37, 0x32, 0xb7, 0xaa,
	0x17, 0x0f, 0x49, 0x85, 0x58, 0x20, 0x24, 0x68, 0x51, 0x49, 0x05, 0x0b, 0xc8, 0x0e, 0x58, 0x54,
	0xc7, 0xce, 0xe0, 0x58, 0x4a, 0x3c, 0x6e, 0x66, 0x52, 0xa5, 0xaa, 0xba, 0xe1, 0x01, 0x10, 0x12,
	0x62, 0x83, 0xc4, 0x13, 0xb0, 0x60, 0xcb, 0x23, 0x74, 0x59, 0x89, 0x0d, 0x2b, 0x84, 0x12, 0x1e,
	0x04, 0x79, 0x3c, 0xce, 0x4d, 0x24, 0x31, 0x55, 0x77, 0xb6, 0xfb, 0x9f, 0xf3, 0x7f, 0xe7, 0x3f,
	0x33, 0x0d, 0xbe, 0x15, 0x42, 0x00, 0x2e, 0x03, 0x5a, 0x05, 0x09, 0x55, 0x06, 0x75, 0xba, 0x5f,
	0x82, 0x7a, 0x58, 0x83, 0x22, 0xdd, 0x6b, 0xb1, 0xe6, 0x81, 0x1d, 0x36, 0xb9, 0xe4, 0x64, 0x51,
	0xcb, 0xec, 0x44, 0x66, 0x27, 0x32, 0xe3, 0xba, 0xc7, 0xb9, 0x57, 0x67, 0x14, 0x42, 0x9f, 0x42,
	0x10, 0x70, 0x09, 0xd2, 0xe7, 0x81, 0x88, 0x0b, 0x8d, 0x15, 0x97, 0x8b, 0x06, 0x17, 0xd4, 0x01,
	0xc1, 0xe2, 0x8e, 0x74, 0xbf, 0xe8, 0x30, 0x09, 0x45, 0x1a, 0x82, 0xe7, 0x07, 0x4a, 0xac, 0xb5,
	0x37, 0xc7, 0xb3, 0x28, 0xcb, 0x58, 0x65, 0x8d, 0x57, 0xc9, 0xb6, 0xd6, 0x2c, 0x6a, 0x26, 0xf5,
	0xe6, 0xb4, 0xde, 0x52, 0x08, 0xf4, 0x24, 0xc6, 0xbc, 0xc7, 0x3d, 0xae, 0x1e, 0x69, 0xf4, 0x14,
	0x7f, 0xb5, 0x56, 0xf1, 0xc5, 0x97, 0x11, 0xdc, 0x13, 0x06, 0xf5, 0x0a, 0xdb, 0x6b, 0x31, 0x21,
	0xc9, 0x55, 0x7c, 0x3e, 0x6a, 0xbf, 0xeb, 0x57, 0x17, 0x50, 0x01, 0x2d, 0x67, 0x2b, 0xb3, 0xd1,
	0xeb, 0x4e, 0xd5, 0x2a, 0xe3, 0x4b, 0x03, 0x62, 0x11, 0xf2, 0x40, 0x30, 0xb2, 0x81, 0xb3, 0xd1,
	0x9f, 0x95, 0xf4, 0x42, 0x69, 0xc9, 0x1e, 0x1b, 0x98, 0xad, 0xca, 0x94, 0xd8, 0x7a, 0x33, 0xd0,
	0x49, 0x24, 0xbe, 0xdb, 0x18, 0xf7, 0xa3, 0xd1, 0xfd, 0x6e, 0xdb, 0x71, 0x8e, 0x76, 0x94, 0xa3,
	0x1d, 0x6f, 0x46, 0xe7, 0x68, 0xbf, 0x00, 0x8f, 0xe9, 0xda, 0xca, 0x40, 0xa5, 0xf5, 0x19, 0x61,
	0x32, 0xd8, 0x5d, 0x83, 0x3e, 0xc0, 0xb9, 0xc8, 0x5b, 0x2c, 0xa0, 0xc2, 0xb9, 0x14, 0xa4, 0x9b,
	0xd9, 0xe3, 0x5f, 0x4b, 0x99, 0x4a, 0x5c, 0x43, 0x9e, 0x0e, 0xb1, 0xcd, 0x28, 0xb6, 0x3b, 0x53,
	0xd9, 0x62, 0xe7, 0x21, 0xb8, 0xe7, 0x78, 0x3e, 0x66, 0x03, 0x09, 0x5b, 0xac, 0x29, 0xa7, 0x85,
	0x4e, 0xae, 0xe1, 0x7c, 0x04, 0xb8, 0x5b, 0x03, 0x51, 0x53, 0xc6, 0xf9, 0xca, 0x5c, 0xf4, 0xa1,
	0x0c, 0xa2, 0x66, 0xbd, 0xc2, 0x97, 0x47, 0xba, 0xe9, 0x61, 0x1f, 0xe9, 0x2a, 0x97, 0x35, 0xa5,
	0x8e, 0xf2, 0xc6, 0xa4, 0x81, 0x93, 0x7a, 0xd5, 0x3a, 0x7a, 0xb2, 0xda, 0x23, 0xad, 0xc5, 0x54,
	0xd2, 0xed, 0x7f, 0x64, 0x74, 0x9a, 0xfd, 0x7d, 0x45, 0xf8, 0xca, 0xa8, 0xb5, 0x1e, 0xab, 0x8c,
	0x71, 0x6f, 0xac, 0x64, 0x91, 0x69, 0xe6, 0xd2, 0xcb, 0xcc, 0x27, 0xd3, 0x9d, 0xdd, 0x42, 0x4b,
	0x5f, 0x72, 0x38, 0xa7, 0x68, 0xc9, 0x27, 0x84, 0xb3, 0xd1, 0xc9, 0x21, 0xab, 0x13, 0x88, 0x46,
	0x6f, 0x9b, 0xb1, 0x96, 0x4e, 0x1c, 0x3b, 0x5b, 0xa5, 0x77, 0x3f, 0xfe, 0x7c, 0x9c, 0x59, 0x23,
	0x2b, 0x74, 0xf2, 0xff, 0x0c, 0x41, 0x0f, 0xf5, 0x92, 0x8e, 0xc8, 0x7b, 0x84, 0x73, 0xea, 0x2a,
	0x90, 0x54, 0x5e, 0xc9, 0xa2, 0x8d, 0xf5, 0x94, 0x6a, 0x8d, 0xb6, 0xac, 0xd0, 0x2c, 0x52, 0x98,
	0x86, 0x46, 0xbe, 0x23, 0x3c, 0x97, 0x6c, 0x86, 0xd0, 0xa9, 0x2e, 0xc3, 0x37, 0xc5, 0xb8, 0x9b,
	0xbe, 0x40, 0x93, 0xed, 0x28, 0xb2, 0x2d, 0xf2, 0x38, 0x7d, 0x68, 0xb4, 0x7f, 0xcc, 0xe8, 0x61,
	0xef, 0xfe, 0x1d, 0x91, 0x6f, 0x08, 0xe7, 0x7b, 0xc7, 0x92, 0xa4, 0x46, 0xe9, 0x65, 0x5a, 0xfc,
	0x8f, 0x0a, 0x4d, 0xff, 0x50, 0xd1, 0xdf, 0x27, 0xf7, 0x4e, 0x45, 0xbf, 0xf9, 0xec, 0xb8, 0x63,
	0xa2, 0x93, 0x8e, 0x89, 0x7e, 0x77, 0x4c, 0xf4, 0xa1, 0x6b, 0x66, 0x4e, 0xba, 0x66, 0xe6, 0x67,
	0xd7, 0xcc, 0xbc, 0x2e, 0x7a, 0xbe, 0xac, 0xb5, 0x1c, 0xdb, 0xe5, 0x0d, 0xda, 0x60, 0x55, 0xdf,
	0xa9, 0x73, 0x37, 0xf1, 0x58, 0x77, 0x79, 0x93, 0xd1, 0x76, 0xdf, 0x4a, 0x1e, 0x84, 0x4c, 0x38,
	0xb3, 0xea, 0x57, 0x63, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x32, 0xa7, 0x8e, 0x3e,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deal returns a Deal.
	Deal(ctx context.Context, in *QueryDealRequest, opts ...grpc.CallOption) (*QueryDealResponse, error)
	// Deals returns multiple deals
	Deals(ctx context.Context, in *QueryDealsRequest, opts ...grpc.CallOption) (*QueryDealsResponse, error)
	// DataCert returns a DataCert.
	DataCert(ctx context.Context, in *QueryDataCertRequest, opts ...grpc.CallOption) (*QueryDataCertResponse, error)
	// DataCerts return DataCerts.
	DataCerts(ctx context.Context, in *QueryDataCertsRequest, opts ...grpc.CallOption) (*QueryDataCertsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Deal(ctx context.Context, in *QueryDealRequest, opts ...grpc.CallOption) (*QueryDealResponse, error) {
	out := new(QueryDealResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha1.Query/Deal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deals(ctx context.Context, in *QueryDealsRequest, opts ...grpc.CallOption) (*QueryDealsResponse, error) {
	out := new(QueryDealsResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha1.Query/Deals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCert(ctx context.Context, in *QueryDataCertRequest, opts ...grpc.CallOption) (*QueryDataCertResponse, error) {
	out := new(QueryDataCertResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha1.Query/DataCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataCerts(ctx context.Context, in *QueryDataCertsRequest, opts ...grpc.CallOption) (*QueryDataCertsResponse, error) {
	out := new(QueryDataCertsResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha1.Query/DataCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deal returns a Deal.
	Deal(context.Context, *QueryDealRequest) (*QueryDealResponse, error)
	// Deals returns multiple deals
	Deals(context.Context, *QueryDealsRequest) (*QueryDealsResponse, error)
	// DataCert returns a DataCert.
	DataCert(context.Context, *QueryDataCertRequest) (*QueryDataCertResponse, error)
	// DataCerts return DataCerts.
	DataCerts(context.Context, *QueryDataCertsRequest) (*QueryDataCertsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Deal(ctx context.Context, req *QueryDealRequest) (*QueryDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deal not implemented")
}
func (*UnimplementedQueryServer) Deals(ctx context.Context, req *QueryDealsRequest) (*QueryDealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deals not implemented")
}
func (*UnimplementedQueryServer) DataCert(ctx context.Context, req *QueryDataCertRequest) (*QueryDataCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCert not implemented")
}
func (*UnimplementedQueryServer) DataCerts(ctx context.Context, req *QueryDataCertsRequest) (*QueryDataCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataCerts not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Deal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha1.Query/Deal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deal(ctx, req.(*QueryDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha1.Query/Deals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deals(ctx, req.(*QueryDealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha1.Query/DataCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCert(ctx, req.(*QueryDataCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha1.Query/DataCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataCerts(ctx, req.(*QueryDataCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.datadeal.v2alpha1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deal",
			Handler:    _Query_Deal_Handler,
		},
		{
			MethodName: "Deals",
			Handler:    _Query_Deals_Handler,
		},
		{
			MethodName: "DataCert",
			Handler:    _Query_DataCert_Handler,
		},
		{
			MethodName: "DataCerts",
			Handler:    _Query_DataCerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/datadeal/v2alpha1/query.proto",
}

func (m *QueryDealRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deal != nil {
		{
			size, err := m.Deal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDealsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deals) > 0 {
		for iNdEx := len(m.Deals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCertResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCertResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCertResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataCert != nil {
		{
			size, err := m.DataCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataCertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataCertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataCertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataCerts) > 0 {
		for iNdEx := len(m.DataCerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataCerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDealRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	return n
}

func (m *QueryDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deal != nil {
		l = m.Deal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDealsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deals) > 0 {
		for _, e := range m.Deals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCertResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataCert != nil {
		l = m.DataCert.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataCertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataCerts) > 0 {
		for _, e := range m.DataCerts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deal == nil {
				m.Deal = &Deal{}
			}
			if err := m.Deal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDealsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deals = append(m.Deals, Deal{})
			if err := m.Deals[len(m.Deals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCertResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCertResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCertResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataCert == nil {
				m.DataCert = &DataCert{}
			}
			if err := m.DataCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataCertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataCertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataCertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCerts = append(m.DataCerts, DataCert{})
			if err := m.DataCerts[len(m.DataCerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
