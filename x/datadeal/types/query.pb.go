// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2alpha2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDealRequest defines the request type for the Query/Deal RPC method.
type QueryDealRequest struct {
	DealId uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
}

func (m *QueryDealRequest) Reset()         { *m = QueryDealRequest{} }
func (m *QueryDealRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDealRequest) ProtoMessage()    {}
func (*QueryDealRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{0}
}
func (m *QueryDealRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealRequest.Merge(m, src)
}
func (m *QueryDealRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealRequest proto.InternalMessageInfo

func (m *QueryDealRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

// QueryDealResponse defines the response type for the Query/Deal RPC method.
type QueryDealResponse struct {
	Deal *Deal `protobuf:"bytes,1,opt,name=deal,proto3" json:"deal,omitempty"`
}

func (m *QueryDealResponse) Reset()         { *m = QueryDealResponse{} }
func (m *QueryDealResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDealResponse) ProtoMessage()    {}
func (*QueryDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{1}
}
func (m *QueryDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealResponse.Merge(m, src)
}
func (m *QueryDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealResponse proto.InternalMessageInfo

func (m *QueryDealResponse) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

// QueryDealsRequest defines the request type for the Query/Deals RPC method.
type QueryDealsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDealsRequest) Reset()         { *m = QueryDealsRequest{} }
func (m *QueryDealsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDealsRequest) ProtoMessage()    {}
func (*QueryDealsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{2}
}
func (m *QueryDealsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealsRequest.Merge(m, src)
}
func (m *QueryDealsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealsRequest proto.InternalMessageInfo

func (m *QueryDealsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDealsResponse defines the response type for the Query/Deals RPC method.
type QueryDealsResponse struct {
	Deal       []*Deal             `protobuf:"bytes,1,rep,name=deal,proto3" json:"deal,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDealsResponse) Reset()         { *m = QueryDealsResponse{} }
func (m *QueryDealsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDealsResponse) ProtoMessage()    {}
func (*QueryDealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{3}
}
func (m *QueryDealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDealsResponse.Merge(m, src)
}
func (m *QueryDealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDealsResponse proto.InternalMessageInfo

func (m *QueryDealsResponse) GetDeal() []*Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *QueryDealsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataSaleRequest defines the request type for the Query/DataSale RPC method.
type QueryDataSaleRequest struct {
	DealId   uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash string `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
}

func (m *QueryDataSaleRequest) Reset()         { *m = QueryDataSaleRequest{} }
func (m *QueryDataSaleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataSaleRequest) ProtoMessage()    {}
func (*QueryDataSaleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{4}
}
func (m *QueryDataSaleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSaleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSaleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSaleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSaleRequest.Merge(m, src)
}
func (m *QueryDataSaleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSaleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSaleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSaleRequest proto.InternalMessageInfo

func (m *QueryDataSaleRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *QueryDataSaleRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

// QueryDataSaleResponse defines the response type for the Query/DataSale RPC method.
type QueryDataSaleResponse struct {
	DataSale *DataSale `protobuf:"bytes,1,opt,name=data_sale,json=dataSale,proto3" json:"data_sale,omitempty"`
}

func (m *QueryDataSaleResponse) Reset()         { *m = QueryDataSaleResponse{} }
func (m *QueryDataSaleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataSaleResponse) ProtoMessage()    {}
func (*QueryDataSaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{5}
}
func (m *QueryDataSaleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSaleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSaleResponse.Merge(m, src)
}
func (m *QueryDataSaleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSaleResponse proto.InternalMessageInfo

func (m *QueryDataSaleResponse) GetDataSale() *DataSale {
	if m != nil {
		return m.DataSale
	}
	return nil
}

// QueryDataSalesRequest defines the request type for the Query/DataSales RPC method.
type QueryDataSalesRequest struct {
	DealId     uint64             `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDataSalesRequest) Reset()         { *m = QueryDataSalesRequest{} }
func (m *QueryDataSalesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataSalesRequest) ProtoMessage()    {}
func (*QueryDataSalesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{6}
}
func (m *QueryDataSalesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSalesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSalesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSalesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSalesRequest.Merge(m, src)
}
func (m *QueryDataSalesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSalesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSalesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSalesRequest proto.InternalMessageInfo

func (m *QueryDataSalesRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *QueryDataSalesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataSalesResponse defines the response type for the Query/DataSales RPC method.
type QueryDataSalesResponse struct {
	DataSale   []*DataSale         `protobuf:"bytes,1,rep,name=data_sale,json=dataSale,proto3" json:"data_sale,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDataSalesResponse) Reset()         { *m = QueryDataSalesResponse{} }
func (m *QueryDataSalesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataSalesResponse) ProtoMessage()    {}
func (*QueryDataSalesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{7}
}
func (m *QueryDataSalesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataSalesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataSalesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataSalesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataSalesResponse.Merge(m, src)
}
func (m *QueryDataSalesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataSalesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataSalesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataSalesResponse proto.InternalMessageInfo

func (m *QueryDataSalesResponse) GetDataSale() []*DataSale {
	if m != nil {
		return m.DataSale
	}
	return nil
}

func (m *QueryDataSalesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataVerificationRequest defines the request type for the Query/DataVerificationVote RPC method.
type QueryDataVerificationVoteRequest struct {
	DealId       uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash     string `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	VoterAddress string `protobuf:"bytes,3,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
}

func (m *QueryDataVerificationVoteRequest) Reset()         { *m = QueryDataVerificationVoteRequest{} }
func (m *QueryDataVerificationVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataVerificationVoteRequest) ProtoMessage()    {}
func (*QueryDataVerificationVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{8}
}
func (m *QueryDataVerificationVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataVerificationVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataVerificationVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataVerificationVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataVerificationVoteRequest.Merge(m, src)
}
func (m *QueryDataVerificationVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataVerificationVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataVerificationVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataVerificationVoteRequest proto.InternalMessageInfo

func (m *QueryDataVerificationVoteRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *QueryDataVerificationVoteRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *QueryDataVerificationVoteRequest) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

// QueryDataVerificationVoteResponse defines the response type for the Query/DataVerificationVote RPC method.
type QueryDataVerificationVoteResponse struct {
	DataVerificationVote *DataVerificationVote `protobuf:"bytes,1,opt,name=data_verification_vote,json=dataVerificationVote,proto3" json:"data_verification_vote,omitempty"`
}

func (m *QueryDataVerificationVoteResponse) Reset()         { *m = QueryDataVerificationVoteResponse{} }
func (m *QueryDataVerificationVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataVerificationVoteResponse) ProtoMessage()    {}
func (*QueryDataVerificationVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{9}
}
func (m *QueryDataVerificationVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataVerificationVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataVerificationVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataVerificationVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataVerificationVoteResponse.Merge(m, src)
}
func (m *QueryDataVerificationVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataVerificationVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataVerificationVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataVerificationVoteResponse proto.InternalMessageInfo

func (m *QueryDataVerificationVoteResponse) GetDataVerificationVote() *DataVerificationVote {
	if m != nil {
		return m.DataVerificationVote
	}
	return nil
}

// QueryDataDeliveryVoteRequest defines the request type for the Query/DataDeliveryVote RPC method.
type QueryDataDeliveryVoteRequest struct {
	DealId       uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash     string `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	VoterAddress string `protobuf:"bytes,3,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
}

func (m *QueryDataDeliveryVoteRequest) Reset()         { *m = QueryDataDeliveryVoteRequest{} }
func (m *QueryDataDeliveryVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataDeliveryVoteRequest) ProtoMessage()    {}
func (*QueryDataDeliveryVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{10}
}
func (m *QueryDataDeliveryVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataDeliveryVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataDeliveryVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataDeliveryVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataDeliveryVoteRequest.Merge(m, src)
}
func (m *QueryDataDeliveryVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataDeliveryVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataDeliveryVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataDeliveryVoteRequest proto.InternalMessageInfo

func (m *QueryDataDeliveryVoteRequest) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *QueryDataDeliveryVoteRequest) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *QueryDataDeliveryVoteRequest) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

// QueryDataDeliveryVoteResponse defines the response type for the Query/DataDeliveryVote RPC method.
type QueryDataDeliveryVoteResponse struct {
	DataDeliveryVote *DataDeliveryVote `protobuf:"bytes,1,opt,name=data_delivery_vote,json=dataDeliveryVote,proto3" json:"data_delivery_vote,omitempty"`
}

func (m *QueryDataDeliveryVoteResponse) Reset()         { *m = QueryDataDeliveryVoteResponse{} }
func (m *QueryDataDeliveryVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataDeliveryVoteResponse) ProtoMessage()    {}
func (*QueryDataDeliveryVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8719930715ad46d2, []int{11}
}
func (m *QueryDataDeliveryVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataDeliveryVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataDeliveryVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataDeliveryVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataDeliveryVoteResponse.Merge(m, src)
}
func (m *QueryDataDeliveryVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataDeliveryVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataDeliveryVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataDeliveryVoteResponse proto.InternalMessageInfo

func (m *QueryDataDeliveryVoteResponse) GetDataDeliveryVote() *DataDeliveryVote {
	if m != nil {
		return m.DataDeliveryVote
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDealRequest)(nil), "panacea.datadeal.v2alpha2.QueryDealRequest")
	proto.RegisterType((*QueryDealResponse)(nil), "panacea.datadeal.v2alpha2.QueryDealResponse")
	proto.RegisterType((*QueryDealsRequest)(nil), "panacea.datadeal.v2alpha2.QueryDealsRequest")
	proto.RegisterType((*QueryDealsResponse)(nil), "panacea.datadeal.v2alpha2.QueryDealsResponse")
	proto.RegisterType((*QueryDataSaleRequest)(nil), "panacea.datadeal.v2alpha2.QueryDataSaleRequest")
	proto.RegisterType((*QueryDataSaleResponse)(nil), "panacea.datadeal.v2alpha2.QueryDataSaleResponse")
	proto.RegisterType((*QueryDataSalesRequest)(nil), "panacea.datadeal.v2alpha2.QueryDataSalesRequest")
	proto.RegisterType((*QueryDataSalesResponse)(nil), "panacea.datadeal.v2alpha2.QueryDataSalesResponse")
	proto.RegisterType((*QueryDataVerificationVoteRequest)(nil), "panacea.datadeal.v2alpha2.QueryDataVerificationVoteRequest")
	proto.RegisterType((*QueryDataVerificationVoteResponse)(nil), "panacea.datadeal.v2alpha2.QueryDataVerificationVoteResponse")
	proto.RegisterType((*QueryDataDeliveryVoteRequest)(nil), "panacea.datadeal.v2alpha2.QueryDataDeliveryVoteRequest")
	proto.RegisterType((*QueryDataDeliveryVoteResponse)(nil), "panacea.datadeal.v2alpha2.QueryDataDeliveryVoteResponse")
}

func init() {
	proto.RegisterFile("panacea/datadeal/v2alpha2/query.proto", fileDescriptor_8719930715ad46d2)
}

var fileDescriptor_8719930715ad46d2 = []byte{
	// 777 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x19, 0xfe, 0xfd, 0x60, 0x7e, 0x9a, 0xe0, 0x13, 0x44, 0xac, 0x58, 0x71, 0xf1, 0x0f,
	0xe1, 0xcf, 0x0e, 0x14, 0xa3, 0x46, 0x39, 0x28, 0x21, 0x88, 0x89, 0x31, 0x5a, 0x0d, 0x11, 0x34,
	0xa9, 0xd3, 0xee, 0xd8, 0x6e, 0xb2, 0x74, 0x96, 0x9d, 0xa5, 0xa1, 0x92, 0x5e, 0x3c, 0x7a, 0x30,
	0x46, 0xe3, 0x2b, 0xf0, 0xe2, 0xd5, 0x77, 0xe1, 0x91, 0xc4, 0x8b, 0x47, 0x43, 0xbd, 0x79, 0xf4,
	0x0d, 0x98, 0x9d, 0x9d, 0x2d, 0xdb, 0xd2, 0x76, 0xb7, 0x68, 0xbc, 0xc1, 0xcc, 0xf7, 0x79, 0x9e,
	0xcf, 0xf3, 0x9d, 0x99, 0x67, 0x8b, 0x2f, 0xda, 0xb4, 0x48, 0x73, 0x8c, 0x12, 0x83, 0xba, 0xd4,
	0x60, 0xd4, 0x22, 0xa5, 0x14, 0xb5, 0xec, 0x02, 0x4d, 0x91, 0xad, 0x6d, 0xe6, 0x94, 0x75, 0xdb,
	0xe1, 0x2e, 0x87, 0xd3, 0x4a, 0xa6, 0x07, 0x32, 0x3d, 0x90, 0x25, 0xc6, 0xf2, 0x9c, 0xe7, 0x2d,
	0x46, 0xa8, 0x6d, 0x12, 0x5a, 0x2c, 0x72, 0x97, 0xba, 0x26, 0x2f, 0x0a, 0x3f, 0x30, 0x31, 0x95,
	0xe3, 0x62, 0x93, 0x0b, 0x92, 0xa5, 0x82, 0xf9, 0x19, 0x49, 0x69, 0x3e, 0xcb, 0x5c, 0x3a, 0x4f,
	0x6c, 0x9a, 0x37, 0x8b, 0x52, 0xac, 0xb4, 0x17, 0x5a, 0xb3, 0xc8, 0x92, 0xbe, 0x6a, 0xb2, 0x8d,
	0x8a, 0xba, 0x54, 0x50, 0x8b, 0x29, 0xa5, 0xd6, 0x5a, 0xe9, 0xee, 0xf8, 0x1a, 0x6d, 0x1a, 0x0f,
	0x3d, 0xf4, 0xa8, 0x96, 0x19, 0xb5, 0xd2, 0x6c, 0x6b, 0x9b, 0x09, 0x17, 0x4e, 0xe1, 0xff, 0x3c,
	0x75, 0xc6, 0x34, 0x46, 0xd1, 0x38, 0x9a, 0xec, 0x4d, 0xf7, 0x7b, 0xff, 0xde, 0x35, 0xb4, 0x55,
	0x7c, 0x22, 0x24, 0x16, 0x36, 0x2f, 0x0a, 0x06, 0x0b, 0xb8, 0xd7, 0xdb, 0x96, 0xd2, 0xff, 0x53,
	0xe7, 0xf4, 0x96, 0x4e, 0xe9, 0x32, 0x4c, 0x8a, 0xb5, 0xa7, 0xa1, 0x4c, 0x22, 0xa8, 0xbb, 0x82,
	0xf1, 0x81, 0x27, 0x2a, 0xdf, 0x25, 0xdd, 0x37, 0x50, 0xf7, 0x0c, 0xd4, 0xfd, 0x23, 0x51, 0x06,
	0xea, 0x0f, 0x68, 0x9e, 0xa9, 0xd8, 0x74, 0x28, 0x52, 0x7b, 0x87, 0x30, 0x84, 0xb3, 0x1f, 0x02,
	0xed, 0x89, 0x0d, 0x0a, 0x77, 0xea, 0x98, 0xba, 0x25, 0xd3, 0xe5, 0x48, 0x26, 0xbf, 0x62, 0x1d,
	0xd4, 0x3d, 0x3c, 0xec, 0x33, 0x51, 0x97, 0x3e, 0xa2, 0x16, 0x8b, 0x32, 0x1b, 0xce, 0xe0, 0x41,
	0x8f, 0x2c, 0x53, 0xa0, 0xa2, 0x20, 0x0b, 0x0f, 0xa6, 0x07, 0xbc, 0x85, 0x55, 0x2a, 0x0a, 0xda,
	0x3a, 0x3e, 0xd9, 0x90, 0x4d, 0x35, 0x79, 0x4b, 0x45, 0x79, 0xd7, 0x40, 0x59, 0x38, 0xd1, 0xae,
	0xd3, 0x20, 0x5e, 0xa6, 0xf6, 0xfe, 0xd2, 0x76, 0x1a, 0x52, 0x8b, 0x48, 0xd2, 0x95, 0x26, 0x1e,
	0x1d, 0xe5, 0xdc, 0x3e, 0x22, 0x3c, 0xd2, 0x58, 0xba, 0x79, 0x5b, 0x3d, 0x1d, 0xb7, 0xf5, 0xf7,
	0x0e, 0xb2, 0x82, 0xc7, 0x6b, 0x90, 0x6b, 0xcc, 0x31, 0x5f, 0x98, 0x39, 0xb9, 0xb1, 0xc6, 0xdd,
	0x3f, 0x3b, 0x54, 0x98, 0xc0, 0xc7, 0x4b, 0xdc, 0x65, 0x4e, 0x86, 0x1a, 0x86, 0xc3, 0x84, 0x18,
	0xed, 0x91, 0x82, 0x63, 0x72, 0xf1, 0xb6, 0xbf, 0xa6, 0xbd, 0x46, 0xf8, 0x7c, 0x9b, 0xfa, 0xca,
	0x2f, 0x86, 0x47, 0x64, 0x9d, 0x52, 0x48, 0x90, 0xf1, 0xf2, 0xa8, 0x3b, 0x41, 0x22, 0xcc, 0x3b,
	0x94, 0x78, 0xd8, 0x68, 0xb2, 0xaa, 0x95, 0xf1, 0x58, 0x8d, 0x65, 0x99, 0x59, 0x66, 0x89, 0x39,
	0xe5, 0x7f, 0xe4, 0xc3, 0x4b, 0x7c, 0xb6, 0x45, 0x69, 0x65, 0xc1, 0x3a, 0x06, 0x59, 0xc2, 0x50,
	0x9b, 0xe1, 0xf6, 0xa7, 0x23, 0xda, 0xaf, 0x4b, 0x38, 0x64, 0x34, 0xac, 0xa4, 0x7e, 0x0e, 0xe0,
	0x3e, 0x59, 0x1c, 0x3e, 0x20, 0xdc, 0xeb, 0x4d, 0x0b, 0x68, 0x97, 0xb1, 0x71, 0xc0, 0x26, 0x66,
	0xe2, 0x89, 0xfd, 0x46, 0xb4, 0xd4, 0xab, 0xaf, 0x3f, 0xde, 0x77, 0xcf, 0xc0, 0x14, 0x69, 0xff,
	0x7d, 0x10, 0x64, 0x57, 0x99, 0x5d, 0x81, 0x37, 0x08, 0xf7, 0xc9, 0xe9, 0x07, 0xb1, 0x6a, 0x05,
	0x6f, 0x3c, 0x31, 0x1b, 0x53, 0xad, 0xd0, 0x26, 0x25, 0x9a, 0x06, 0xe3, 0x51, 0x68, 0xf0, 0x19,
	0xe1, 0x81, 0xe0, 0x55, 0x02, 0x89, 0xac, 0x52, 0x3f, 0x24, 0x13, 0x73, 0xf1, 0x03, 0x14, 0xd9,
	0x92, 0x24, 0x5b, 0x84, 0x1b, 0x24, 0xfa, 0x73, 0x19, 0x32, 0x8e, 0xec, 0xd6, 0xae, 0x65, 0x05,
	0x3e, 0x21, 0x3c, 0x58, 0x1b, 0x45, 0x10, 0x9b, 0xa1, 0x66, 0xe6, 0x7c, 0x07, 0x11, 0x0a, 0xfb,
	0xaa, 0xc4, 0x9e, 0x03, 0xbd, 0x33, 0x6c, 0xf8, 0x85, 0xf0, 0x70, 0xb3, 0x77, 0x0b, 0x37, 0xe3,
	0x30, 0xb4, 0x18, 0x63, 0x89, 0xc5, 0xa3, 0x05, 0xab, 0x5e, 0x9e, 0xcb, 0x5e, 0x36, 0xe0, 0x49,
	0x44, 0x2f, 0x87, 0x87, 0x54, 0x8b, 0x03, 0x21, 0xbb, 0x75, 0x63, 0xa1, 0x02, 0x55, 0x84, 0x87,
	0x1a, 0x9f, 0x2b, 0x5c, 0x8b, 0x03, 0xdd, 0x64, 0x58, 0x25, 0xae, 0x77, 0x1e, 0xa8, 0x3a, 0x7d,
	0x26, 0x3b, 0x5d, 0x83, 0xc7, 0x51, 0x9d, 0xd6, 0xcd, 0xa2, 0x98, 0x5d, 0x2e, 0xdd, 0xff, 0xb2,
	0x9f, 0x44, 0x7b, 0xfb, 0x49, 0xf4, 0x7d, 0x3f, 0x89, 0xde, 0x56, 0x93, 0x5d, 0x7b, 0xd5, 0x64,
	0xd7, 0xb7, 0x6a, 0xb2, 0x6b, 0xe3, 0x4a, 0xde, 0x74, 0x0b, 0xdb, 0x59, 0x3d, 0xc7, 0x37, 0xc9,
	0x26, 0x33, 0xcc, 0xac, 0xc5, 0x73, 0x01, 0xc2, 0x6c, 0x8e, 0x3b, 0x8c, 0x94, 0x52, 0x64, 0xe7,
	0x00, 0xc6, 0x2d, 0xdb, 0x4c, 0x64, 0xfb, 0xe5, 0x2f, 0xbf, 0x85, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x54, 0x5e, 0x1f, 0x08, 0xfb, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deal returns a Deal.
	Deal(ctx context.Context, in *QueryDealRequest, opts ...grpc.CallOption) (*QueryDealResponse, error)
	// Deals return a list of Deal.
	Deals(ctx context.Context, in *QueryDealsRequest, opts ...grpc.CallOption) (*QueryDealsResponse, error)
	// DataSale returns a DataSale.
	DataSale(ctx context.Context, in *QueryDataSaleRequest, opts ...grpc.CallOption) (*QueryDataSaleResponse, error)
	// DataSales returns a list of DataSale.
	DataSales(ctx context.Context, in *QueryDataSalesRequest, opts ...grpc.CallOption) (*QueryDataSalesResponse, error)
	// DataVerificationVote returns a DataVerificationVote.
	DataVerificationVote(ctx context.Context, in *QueryDataVerificationVoteRequest, opts ...grpc.CallOption) (*QueryDataVerificationVoteResponse, error)
	// DataDeliveryVote returns a DataDeliveryVote.
	DataDeliveryVote(ctx context.Context, in *QueryDataDeliveryVoteRequest, opts ...grpc.CallOption) (*QueryDataDeliveryVoteResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Deal(ctx context.Context, in *QueryDealRequest, opts ...grpc.CallOption) (*QueryDealResponse, error) {
	out := new(QueryDealResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Query/Deal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deals(ctx context.Context, in *QueryDealsRequest, opts ...grpc.CallOption) (*QueryDealsResponse, error) {
	out := new(QueryDealsResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Query/Deals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataSale(ctx context.Context, in *QueryDataSaleRequest, opts ...grpc.CallOption) (*QueryDataSaleResponse, error) {
	out := new(QueryDataSaleResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Query/DataSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataSales(ctx context.Context, in *QueryDataSalesRequest, opts ...grpc.CallOption) (*QueryDataSalesResponse, error) {
	out := new(QueryDataSalesResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Query/DataSales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataVerificationVote(ctx context.Context, in *QueryDataVerificationVoteRequest, opts ...grpc.CallOption) (*QueryDataVerificationVoteResponse, error) {
	out := new(QueryDataVerificationVoteResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Query/DataVerificationVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataDeliveryVote(ctx context.Context, in *QueryDataDeliveryVoteRequest, opts ...grpc.CallOption) (*QueryDataDeliveryVoteResponse, error) {
	out := new(QueryDataDeliveryVoteResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Query/DataDeliveryVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deal returns a Deal.
	Deal(context.Context, *QueryDealRequest) (*QueryDealResponse, error)
	// Deals return a list of Deal.
	Deals(context.Context, *QueryDealsRequest) (*QueryDealsResponse, error)
	// DataSale returns a DataSale.
	DataSale(context.Context, *QueryDataSaleRequest) (*QueryDataSaleResponse, error)
	// DataSales returns a list of DataSale.
	DataSales(context.Context, *QueryDataSalesRequest) (*QueryDataSalesResponse, error)
	// DataVerificationVote returns a DataVerificationVote.
	DataVerificationVote(context.Context, *QueryDataVerificationVoteRequest) (*QueryDataVerificationVoteResponse, error)
	// DataDeliveryVote returns a DataDeliveryVote.
	DataDeliveryVote(context.Context, *QueryDataDeliveryVoteRequest) (*QueryDataDeliveryVoteResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Deal(ctx context.Context, req *QueryDealRequest) (*QueryDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deal not implemented")
}
func (*UnimplementedQueryServer) Deals(ctx context.Context, req *QueryDealsRequest) (*QueryDealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deals not implemented")
}
func (*UnimplementedQueryServer) DataSale(ctx context.Context, req *QueryDataSaleRequest) (*QueryDataSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataSale not implemented")
}
func (*UnimplementedQueryServer) DataSales(ctx context.Context, req *QueryDataSalesRequest) (*QueryDataSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataSales not implemented")
}
func (*UnimplementedQueryServer) DataVerificationVote(ctx context.Context, req *QueryDataVerificationVoteRequest) (*QueryDataVerificationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataVerificationVote not implemented")
}
func (*UnimplementedQueryServer) DataDeliveryVote(ctx context.Context, req *QueryDataDeliveryVoteRequest) (*QueryDataDeliveryVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataDeliveryVote not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Deal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Query/Deal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deal(ctx, req.(*QueryDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Query/Deals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deals(ctx, req.(*QueryDealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Query/DataSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataSale(ctx, req.(*QueryDataSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Query/DataSales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataSales(ctx, req.(*QueryDataSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataVerificationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataVerificationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataVerificationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Query/DataVerificationVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataVerificationVote(ctx, req.(*QueryDataVerificationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataDeliveryVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataDeliveryVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataDeliveryVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Query/DataDeliveryVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataDeliveryVote(ctx, req.(*QueryDataDeliveryVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.datadeal.v2alpha2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deal",
			Handler:    _Query_Deal_Handler,
		},
		{
			MethodName: "Deals",
			Handler:    _Query_Deals_Handler,
		},
		{
			MethodName: "DataSale",
			Handler:    _Query_DataSale_Handler,
		},
		{
			MethodName: "DataSales",
			Handler:    _Query_DataSales_Handler,
		},
		{
			MethodName: "DataVerificationVote",
			Handler:    _Query_DataVerificationVote_Handler,
		},
		{
			MethodName: "DataDeliveryVote",
			Handler:    _Query_DataDeliveryVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/datadeal/v2alpha2/query.proto",
}

func (m *QueryDealRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deal != nil {
		{
			size, err := m.Deal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDealsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDealsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDealsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deal) > 0 {
		for iNdEx := len(m.Deal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSaleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSaleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSaleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSaleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSaleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSaleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataSale != nil {
		{
			size, err := m.DataSale.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSalesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSalesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSalesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataSalesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataSalesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataSalesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataSale) > 0 {
		for iNdEx := len(m.DataSale) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSale[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataVerificationVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataVerificationVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataVerificationVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataVerificationVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataVerificationVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataVerificationVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataVerificationVote != nil {
		{
			size, err := m.DataVerificationVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataDeliveryVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataDeliveryVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataDeliveryVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataDeliveryVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataDeliveryVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataDeliveryVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataDeliveryVote != nil {
		{
			size, err := m.DataDeliveryVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDealRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	return n
}

func (m *QueryDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deal != nil {
		l = m.Deal.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDealsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deal) > 0 {
		for _, e := range m.Deal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSaleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSaleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSale != nil {
		l = m.DataSale.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSalesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataSalesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSale) > 0 {
		for _, e := range m.DataSale {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataVerificationVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataVerificationVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataVerificationVote != nil {
		l = m.DataVerificationVote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataDeliveryVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovQuery(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataDeliveryVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataDeliveryVote != nil {
		l = m.DataDeliveryVote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDealRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deal == nil {
				m.Deal = &Deal{}
			}
			if err := m.Deal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDealsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deal = append(m.Deal, &Deal{})
			if err := m.Deal[len(m.Deal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSaleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSaleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSaleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSaleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSaleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSaleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataSale == nil {
				m.DataSale = &DataSale{}
			}
			if err := m.DataSale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSalesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSalesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSalesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataSalesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataSalesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataSalesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSale = append(m.DataSale, &DataSale{})
			if err := m.DataSale[len(m.DataSale)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataVerificationVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataVerificationVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataVerificationVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataVerificationVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataVerificationVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataVerificationVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVerificationVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataVerificationVote == nil {
				m.DataVerificationVote = &DataVerificationVote{}
			}
			if err := m.DataVerificationVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataDeliveryVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataDeliveryVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataDeliveryVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataDeliveryVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataDeliveryVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataDeliveryVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDeliveryVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataDeliveryVote == nil {
				m.DataDeliveryVote = &DataDeliveryVote{}
			}
			if err := m.DataDeliveryVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
