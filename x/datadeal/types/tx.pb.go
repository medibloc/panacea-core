// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2alpha2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/medibloc/panacea-core/v2/x/oracle/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateDeal defines the Msg/CreateDeal request type.
type MsgCreateDeal struct {
	DataSchema   []string    `protobuf:"bytes,1,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	Budget       *types.Coin `protobuf:"bytes,2,opt,name=budget,proto3" json:"budget,omitempty"`
	MaxNumData   uint64      `protobuf:"varint,3,opt,name=max_num_data,json=maxNumData,proto3" json:"max_num_data,omitempty"`
	BuyerAddress string      `protobuf:"bytes,4,opt,name=buyer_address,json=buyerAddress,proto3" json:"buyer_address,omitempty"`
	Nonce        []byte      `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgCreateDeal) Reset()         { *m = MsgCreateDeal{} }
func (m *MsgCreateDeal) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDeal) ProtoMessage()    {}
func (*MsgCreateDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{0}
}
func (m *MsgCreateDeal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDeal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDeal.Merge(m, src)
}
func (m *MsgCreateDeal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDeal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDeal proto.InternalMessageInfo

func (m *MsgCreateDeal) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *MsgCreateDeal) GetBudget() *types.Coin {
	if m != nil {
		return m.Budget
	}
	return nil
}

func (m *MsgCreateDeal) GetMaxNumData() uint64 {
	if m != nil {
		return m.MaxNumData
	}
	return 0
}

func (m *MsgCreateDeal) GetBuyerAddress() string {
	if m != nil {
		return m.BuyerAddress
	}
	return ""
}

func (m *MsgCreateDeal) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// MsgCreateDealResponse defines the Msg/CreateDeal response type.
type MsgCreateDealResponse struct {
	DealId uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
}

func (m *MsgCreateDealResponse) Reset()         { *m = MsgCreateDealResponse{} }
func (m *MsgCreateDealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDealResponse) ProtoMessage()    {}
func (*MsgCreateDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{1}
}
func (m *MsgCreateDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDealResponse.Merge(m, src)
}
func (m *MsgCreateDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDealResponse proto.InternalMessageInfo

func (m *MsgCreateDealResponse) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

// MsgSellData defines the Msg/SellData request type.
type MsgSellData struct {
	DealId        uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	VerifiableCid string `protobuf:"bytes,2,opt,name=verifiable_cid,json=verifiableCid,proto3" json:"verifiable_cid,omitempty"`
	DataHash      string `protobuf:"bytes,3,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	SellerAddress string `protobuf:"bytes,4,opt,name=seller_address,json=sellerAddress,proto3" json:"seller_address,omitempty"`
}

func (m *MsgSellData) Reset()         { *m = MsgSellData{} }
func (m *MsgSellData) String() string { return proto.CompactTextString(m) }
func (*MsgSellData) ProtoMessage()    {}
func (*MsgSellData) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{2}
}
func (m *MsgSellData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellData.Merge(m, src)
}
func (m *MsgSellData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellData proto.InternalMessageInfo

func (m *MsgSellData) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *MsgSellData) GetVerifiableCid() string {
	if m != nil {
		return m.VerifiableCid
	}
	return ""
}

func (m *MsgSellData) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *MsgSellData) GetSellerAddress() string {
	if m != nil {
		return m.SellerAddress
	}
	return ""
}

// MsgSellDataResponse defines the Msg/SellData response type.
type MsgSellDataResponse struct {
}

func (m *MsgSellDataResponse) Reset()         { *m = MsgSellDataResponse{} }
func (m *MsgSellDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellDataResponse) ProtoMessage()    {}
func (*MsgSellDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{3}
}
func (m *MsgSellDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellDataResponse.Merge(m, src)
}
func (m *MsgSellDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellDataResponse proto.InternalMessageInfo

// MsgVoteDataVerification defines the Msg/VoteDataVerification request type.
type MsgVoteDataVerification struct {
	DataVerificationVote *DataVerificationVote `protobuf:"bytes,1,opt,name=data_verification_vote,json=dataVerificationVote,proto3" json:"data_verification_vote,omitempty"`
	Signature            []byte                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgVoteDataVerification) Reset()         { *m = MsgVoteDataVerification{} }
func (m *MsgVoteDataVerification) String() string { return proto.CompactTextString(m) }
func (*MsgVoteDataVerification) ProtoMessage()    {}
func (*MsgVoteDataVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{4}
}
func (m *MsgVoteDataVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteDataVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteDataVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteDataVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteDataVerification.Merge(m, src)
}
func (m *MsgVoteDataVerification) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteDataVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteDataVerification.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteDataVerification proto.InternalMessageInfo

func (m *MsgVoteDataVerification) GetDataVerificationVote() *DataVerificationVote {
	if m != nil {
		return m.DataVerificationVote
	}
	return nil
}

func (m *MsgVoteDataVerification) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgVoteDataVerificationResponse defines the Msg/VoteDataVerification response type.
type MsgVoteDataVerificationResponse struct {
}

func (m *MsgVoteDataVerificationResponse) Reset()         { *m = MsgVoteDataVerificationResponse{} }
func (m *MsgVoteDataVerificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteDataVerificationResponse) ProtoMessage()    {}
func (*MsgVoteDataVerificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{5}
}
func (m *MsgVoteDataVerificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteDataVerificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteDataVerificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteDataVerificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteDataVerificationResponse.Merge(m, src)
}
func (m *MsgVoteDataVerificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteDataVerificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteDataVerificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteDataVerificationResponse proto.InternalMessageInfo

// DataVerificationVote defines the vote info for verifying data.
type DataVerificationVote struct {
	VoterUniqueId string            `protobuf:"bytes,1,opt,name=voter_unique_id,json=voterUniqueId,proto3" json:"voter_unique_id,omitempty"`
	VoterAddress  string            `protobuf:"bytes,2,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	DealId        uint64            `protobuf:"varint,3,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash      string            `protobuf:"bytes,4,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	VoteOption    types1.VoteOption `protobuf:"varint,5,opt,name=vote_option,json=voteOption,proto3,enum=panacea.oracle.v2alpha2.VoteOption" json:"vote_option,omitempty"`
}

func (m *DataVerificationVote) Reset()         { *m = DataVerificationVote{} }
func (m *DataVerificationVote) String() string { return proto.CompactTextString(m) }
func (*DataVerificationVote) ProtoMessage()    {}
func (*DataVerificationVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{6}
}
func (m *DataVerificationVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataVerificationVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataVerificationVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataVerificationVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataVerificationVote.Merge(m, src)
}
func (m *DataVerificationVote) XXX_Size() int {
	return m.Size()
}
func (m *DataVerificationVote) XXX_DiscardUnknown() {
	xxx_messageInfo_DataVerificationVote.DiscardUnknown(m)
}

var xxx_messageInfo_DataVerificationVote proto.InternalMessageInfo

func (m *DataVerificationVote) GetVoterUniqueId() string {
	if m != nil {
		return m.VoterUniqueId
	}
	return ""
}

func (m *DataVerificationVote) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *DataVerificationVote) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *DataVerificationVote) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *DataVerificationVote) GetVoteOption() types1.VoteOption {
	if m != nil {
		return m.VoteOption
	}
	return types1.VOTE_OPTION_UNSPECIFIED
}

// MsgVoteDataDelivery defines the Msg/VoteDataDelivery request type.
type MsgVoteDataDelivery struct {
	DataDeliveryVote *DataDeliveryVote `protobuf:"bytes,1,opt,name=data_delivery_vote,json=dataDeliveryVote,proto3" json:"data_delivery_vote,omitempty"`
	Signature        []byte            `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgVoteDataDelivery) Reset()         { *m = MsgVoteDataDelivery{} }
func (m *MsgVoteDataDelivery) String() string { return proto.CompactTextString(m) }
func (*MsgVoteDataDelivery) ProtoMessage()    {}
func (*MsgVoteDataDelivery) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{7}
}
func (m *MsgVoteDataDelivery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteDataDelivery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteDataDelivery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteDataDelivery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteDataDelivery.Merge(m, src)
}
func (m *MsgVoteDataDelivery) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteDataDelivery) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteDataDelivery.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteDataDelivery proto.InternalMessageInfo

func (m *MsgVoteDataDelivery) GetDataDeliveryVote() *DataDeliveryVote {
	if m != nil {
		return m.DataDeliveryVote
	}
	return nil
}

func (m *MsgVoteDataDelivery) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgVoteDataDeliveryResponse defines the Msg/VoteDataDelivery response type.
type MsgVoteDataDeliveryResponse struct {
}

func (m *MsgVoteDataDeliveryResponse) Reset()         { *m = MsgVoteDataDeliveryResponse{} }
func (m *MsgVoteDataDeliveryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteDataDeliveryResponse) ProtoMessage()    {}
func (*MsgVoteDataDeliveryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{8}
}
func (m *MsgVoteDataDeliveryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteDataDeliveryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteDataDeliveryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteDataDeliveryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteDataDeliveryResponse.Merge(m, src)
}
func (m *MsgVoteDataDeliveryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteDataDeliveryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteDataDeliveryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteDataDeliveryResponse proto.InternalMessageInfo

// DataDeliveryVote defines the vote info for delivering data.
type DataDeliveryVote struct {
	VoterUniqueId string            `protobuf:"bytes,1,opt,name=voter_unique_id,json=voterUniqueId,proto3" json:"voter_unique_id,omitempty"`
	VoterAddress  string            `protobuf:"bytes,2,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	DealId        uint64            `protobuf:"varint,3,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash      string            `protobuf:"bytes,4,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DeliveredCid  string            `protobuf:"bytes,5,opt,name=delivered_cid,json=deliveredCid,proto3" json:"delivered_cid,omitempty"`
	VoteOption    types1.VoteOption `protobuf:"varint,6,opt,name=vote_option,json=voteOption,proto3,enum=panacea.oracle.v2alpha2.VoteOption" json:"vote_option,omitempty"`
}

func (m *DataDeliveryVote) Reset()         { *m = DataDeliveryVote{} }
func (m *DataDeliveryVote) String() string { return proto.CompactTextString(m) }
func (*DataDeliveryVote) ProtoMessage()    {}
func (*DataDeliveryVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{9}
}
func (m *DataDeliveryVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataDeliveryVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataDeliveryVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataDeliveryVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDeliveryVote.Merge(m, src)
}
func (m *DataDeliveryVote) XXX_Size() int {
	return m.Size()
}
func (m *DataDeliveryVote) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDeliveryVote.DiscardUnknown(m)
}

var xxx_messageInfo_DataDeliveryVote proto.InternalMessageInfo

func (m *DataDeliveryVote) GetVoterUniqueId() string {
	if m != nil {
		return m.VoterUniqueId
	}
	return ""
}

func (m *DataDeliveryVote) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *DataDeliveryVote) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *DataDeliveryVote) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *DataDeliveryVote) GetDeliveredCid() string {
	if m != nil {
		return m.DeliveredCid
	}
	return ""
}

func (m *DataDeliveryVote) GetVoteOption() types1.VoteOption {
	if m != nil {
		return m.VoteOption
	}
	return types1.VOTE_OPTION_UNSPECIFIED
}

// MsgDeactivateDeal defines the Msg/DeactivateDeal request type.
type MsgDeactivateDeal struct {
	DealId           uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	RequesterAddress string `protobuf:"bytes,2,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
}

func (m *MsgDeactivateDeal) Reset()         { *m = MsgDeactivateDeal{} }
func (m *MsgDeactivateDeal) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDeal) ProtoMessage()    {}
func (*MsgDeactivateDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{10}
}
func (m *MsgDeactivateDeal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDeal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDeal.Merge(m, src)
}
func (m *MsgDeactivateDeal) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDeal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDeal proto.InternalMessageInfo

func (m *MsgDeactivateDeal) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *MsgDeactivateDeal) GetRequesterAddress() string {
	if m != nil {
		return m.RequesterAddress
	}
	return ""
}

// MsgDeactivateDealResponse defines the Msg/DeactivateDeal response type.
type MsgDeactivateDealResponse struct {
}

func (m *MsgDeactivateDealResponse) Reset()         { *m = MsgDeactivateDealResponse{} }
func (m *MsgDeactivateDealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDealResponse) ProtoMessage()    {}
func (*MsgDeactivateDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{11}
}
func (m *MsgDeactivateDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDealResponse.Merge(m, src)
}
func (m *MsgDeactivateDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDealResponse proto.InternalMessageInfo

// MsgReRequestDataDeliveryVote defines the Msg/ReRequestDataDeliveryVote request type.
type MsgReRequestDataDeliveryVote struct {
	DealId           uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	DataHash         string `protobuf:"bytes,2,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	RequesterAddress string `protobuf:"bytes,3,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
}

func (m *MsgReRequestDataDeliveryVote) Reset()         { *m = MsgReRequestDataDeliveryVote{} }
func (m *MsgReRequestDataDeliveryVote) String() string { return proto.CompactTextString(m) }
func (*MsgReRequestDataDeliveryVote) ProtoMessage()    {}
func (*MsgReRequestDataDeliveryVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{12}
}
func (m *MsgReRequestDataDeliveryVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReRequestDataDeliveryVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReRequestDataDeliveryVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReRequestDataDeliveryVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReRequestDataDeliveryVote.Merge(m, src)
}
func (m *MsgReRequestDataDeliveryVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgReRequestDataDeliveryVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReRequestDataDeliveryVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReRequestDataDeliveryVote proto.InternalMessageInfo

func (m *MsgReRequestDataDeliveryVote) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *MsgReRequestDataDeliveryVote) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *MsgReRequestDataDeliveryVote) GetRequesterAddress() string {
	if m != nil {
		return m.RequesterAddress
	}
	return ""
}

// MsgReRequestDataDeliveryVoteResponse defines the Msg/ReRequestDataDeliveryVote response type.
type MsgReRequestDataDeliveryVoteResponse struct {
}

func (m *MsgReRequestDataDeliveryVoteResponse) Reset()         { *m = MsgReRequestDataDeliveryVoteResponse{} }
func (m *MsgReRequestDataDeliveryVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReRequestDataDeliveryVoteResponse) ProtoMessage()    {}
func (*MsgReRequestDataDeliveryVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49dbc965b6b631a7, []int{13}
}
func (m *MsgReRequestDataDeliveryVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReRequestDataDeliveryVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReRequestDataDeliveryVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReRequestDataDeliveryVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReRequestDataDeliveryVoteResponse.Merge(m, src)
}
func (m *MsgReRequestDataDeliveryVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReRequestDataDeliveryVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReRequestDataDeliveryVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReRequestDataDeliveryVoteResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateDeal)(nil), "panacea.datadeal.v2alpha2.MsgCreateDeal")
	proto.RegisterType((*MsgCreateDealResponse)(nil), "panacea.datadeal.v2alpha2.MsgCreateDealResponse")
	proto.RegisterType((*MsgSellData)(nil), "panacea.datadeal.v2alpha2.MsgSellData")
	proto.RegisterType((*MsgSellDataResponse)(nil), "panacea.datadeal.v2alpha2.MsgSellDataResponse")
	proto.RegisterType((*MsgVoteDataVerification)(nil), "panacea.datadeal.v2alpha2.MsgVoteDataVerification")
	proto.RegisterType((*MsgVoteDataVerificationResponse)(nil), "panacea.datadeal.v2alpha2.MsgVoteDataVerificationResponse")
	proto.RegisterType((*DataVerificationVote)(nil), "panacea.datadeal.v2alpha2.DataVerificationVote")
	proto.RegisterType((*MsgVoteDataDelivery)(nil), "panacea.datadeal.v2alpha2.MsgVoteDataDelivery")
	proto.RegisterType((*MsgVoteDataDeliveryResponse)(nil), "panacea.datadeal.v2alpha2.MsgVoteDataDeliveryResponse")
	proto.RegisterType((*DataDeliveryVote)(nil), "panacea.datadeal.v2alpha2.DataDeliveryVote")
	proto.RegisterType((*MsgDeactivateDeal)(nil), "panacea.datadeal.v2alpha2.MsgDeactivateDeal")
	proto.RegisterType((*MsgDeactivateDealResponse)(nil), "panacea.datadeal.v2alpha2.MsgDeactivateDealResponse")
	proto.RegisterType((*MsgReRequestDataDeliveryVote)(nil), "panacea.datadeal.v2alpha2.MsgReRequestDataDeliveryVote")
	proto.RegisterType((*MsgReRequestDataDeliveryVoteResponse)(nil), "panacea.datadeal.v2alpha2.MsgReRequestDataDeliveryVoteResponse")
}

func init() {
	proto.RegisterFile("panacea/datadeal/v2alpha2/tx.proto", fileDescriptor_49dbc965b6b631a7)
}

var fileDescriptor_49dbc965b6b631a7 = []byte{
	// 872 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xde, 0xd9, 0xec, 0x2e, 0xcd, 0x4b, 0xb2, 0x6c, 0x4d, 0x4a, 0xb3, 0xd9, 0x92, 0x06, 0x6f,
	0x59, 0x45, 0x2a, 0xd8, 0xdd, 0x50, 0x81, 0xc4, 0x05, 0xc1, 0xe6, 0x40, 0x0f, 0x29, 0x92, 0x2b,
	0x2a, 0x95, 0x8b, 0x35, 0xb6, 0x1f, 0x8e, 0x25, 0xdb, 0x93, 0x7a, 0x6c, 0x6b, 0x97, 0x13, 0x5c,
	0x38, 0x22, 0x38, 0x70, 0xe5, 0x6f, 0xe1, 0xc8, 0xb1, 0x47, 0x6e, 0xa0, 0x5d, 0x89, 0xbf, 0x03,
	0xcd, 0xf8, 0x47, 0x7e, 0x3a, 0xdd, 0xed, 0x89, 0x5b, 0xfc, 0xf9, 0x9b, 0xf7, 0x7d, 0xef, 0x7d,
	0x33, 0x13, 0x83, 0x3a, 0xa5, 0x21, 0xb5, 0x91, 0xea, 0x0e, 0x8d, 0xa9, 0x83, 0xd4, 0xd7, 0xd3,
	0x21, 0xf5, 0xa7, 0x13, 0x3a, 0xd4, 0xe3, 0x73, 0x6d, 0x1a, 0xb1, 0x98, 0x29, 0x87, 0x39, 0x47,
	0x2b, 0x38, 0x5a, 0xc1, 0xe9, 0xb6, 0x5d, 0xe6, 0x32, 0xc9, 0xd2, 0xc5, 0xaf, 0x6c, 0x41, 0xb7,
	0x67, 0x33, 0x1e, 0x30, 0xae, 0x5b, 0x94, 0xa3, 0x9e, 0x9e, 0x5a, 0x18, 0xd3, 0x53, 0xdd, 0x66,
	0x5e, 0x98, 0xbf, 0x7f, 0x50, 0x88, 0xb2, 0x88, 0xda, 0x3e, 0xce, 0x24, 0xb3, 0xe7, 0x8c, 0xa5,
	0xfe, 0x41, 0xa0, 0x35, 0xe6, 0xee, 0x59, 0x84, 0x34, 0xc6, 0x11, 0x52, 0x5f, 0xb9, 0x0f, 0x0d,
	0x61, 0xc1, 0xe4, 0xf6, 0x04, 0x03, 0xda, 0x21, 0xfd, 0xda, 0xa0, 0x6e, 0x80, 0x80, 0x9e, 0x49,
	0x44, 0x39, 0x85, 0x3d, 0x2b, 0x71, 0x5c, 0x8c, 0x3b, 0xdb, 0x7d, 0x32, 0x68, 0x0c, 0x0f, 0xb5,
	0xcc, 0x89, 0x26, 0x9c, 0x68, 0xb9, 0x13, 0xed, 0x8c, 0x79, 0xa1, 0x91, 0x13, 0x95, 0x3e, 0x34,
	0x03, 0x7a, 0x6e, 0x86, 0x49, 0x60, 0x8a, 0x42, 0x9d, 0x5a, 0x9f, 0x0c, 0x76, 0x0c, 0x08, 0xe8,
	0xf9, 0xd3, 0x24, 0x18, 0xd1, 0x98, 0x2a, 0xc7, 0xd0, 0xb2, 0x92, 0x0b, 0x8c, 0x4c, 0xea, 0x38,
	0x11, 0x72, 0xde, 0xd9, 0xe9, 0x93, 0x41, 0xdd, 0x68, 0x4a, 0xf0, 0x8b, 0x0c, 0x53, 0xda, 0xb0,
	0x1b, 0xb2, 0xd0, 0xc6, 0xce, 0x6e, 0x9f, 0x0c, 0x9a, 0x46, 0xf6, 0xa0, 0x3e, 0x82, 0x3b, 0x0b,
	0x1d, 0x18, 0xc8, 0xa7, 0x2c, 0xe4, 0xa8, 0xdc, 0x85, 0xb7, 0xc4, 0x20, 0x4d, 0xcf, 0xe9, 0x10,
	0x29, 0xb8, 0x27, 0x1e, 0x9f, 0x38, 0xea, 0xaf, 0x04, 0x1a, 0x63, 0xee, 0x3e, 0x43, 0xdf, 0x97,
	0xe2, 0x55, 0x44, 0xe5, 0x03, 0xd8, 0x4f, 0x31, 0xf2, 0xbe, 0xf3, 0xa8, 0xe5, 0xa3, 0x69, 0x7b,
	0x8e, 0x6c, 0xb9, 0x6e, 0xb4, 0x66, 0xe8, 0x99, 0xe7, 0x28, 0x47, 0x50, 0x97, 0x23, 0x9b, 0x50,
	0x3e, 0x91, 0xbd, 0xd5, 0x8d, 0x5b, 0x02, 0xf8, 0x8a, 0xf2, 0x89, 0xa8, 0xc1, 0xd1, 0xf7, 0x57,
	0x5a, 0x6b, 0x65, 0x68, 0xde, 0x9b, 0x7a, 0x07, 0xde, 0x99, 0xb3, 0x54, 0xf4, 0xa0, 0xfe, 0x4e,
	0xe0, 0xee, 0x98, 0xbb, 0xcf, 0x59, 0x8c, 0x02, 0x7f, 0x2e, 0x75, 0x6d, 0x1a, 0x7b, 0x2c, 0x54,
	0x10, 0xde, 0x95, 0xb2, 0xe9, 0x1c, 0x68, 0xa6, 0x2c, 0x46, 0xd9, 0x45, 0x63, 0xa8, 0x6b, 0x95,
	0x7b, 0x4a, 0x5b, 0x2e, 0x26, 0x04, 0x8c, 0xb6, 0xb3, 0x06, 0x55, 0xee, 0x41, 0x9d, 0x7b, 0x6e,
	0x48, 0xe3, 0x24, 0x42, 0xd9, 0x7f, 0xd3, 0x98, 0x01, 0xea, 0xfb, 0x70, 0xbf, 0xc2, 0x5f, 0xd9,
	0xc3, 0xdf, 0x04, 0xda, 0xeb, 0xf4, 0x94, 0x13, 0x78, 0x5b, 0xd8, 0x8d, 0xcc, 0x24, 0xf4, 0x5e,
	0x26, 0x58, 0xcc, 0x5f, 0xcc, 0x57, 0xc0, 0xdf, 0x48, 0xf4, 0x89, 0x23, 0x36, 0x47, 0xc6, 0x2b,
	0x26, 0x98, 0xa5, 0xd0, 0x94, 0x60, 0xb1, 0x39, 0xe6, 0x42, 0xac, 0x2d, 0x84, 0xb8, 0x90, 0xce,
	0xce, 0x52, 0x3a, 0x23, 0x68, 0x88, 0x2a, 0x26, 0x9b, 0x0a, 0x57, 0x72, 0x63, 0xed, 0x0f, 0x8f,
	0xcb, 0xc1, 0xe5, 0x67, 0xa5, 0x1c, 0x9b, 0xb0, 0xfd, 0xb5, 0xa4, 0x1a, 0x90, 0x96, 0xbf, 0xd5,
	0x9f, 0x89, 0x4c, 0xaf, 0x98, 0xc2, 0x08, 0x7d, 0x2f, 0xc5, 0xe8, 0x42, 0x79, 0x01, 0x8a, 0x94,
	0x76, 0x72, 0x60, 0x3e, 0x9d, 0x87, 0xaf, 0x49, 0xa7, 0x28, 0x22, 0x93, 0x39, 0x70, 0x96, 0x90,
	0xd7, 0xa4, 0xf2, 0x1e, 0x1c, 0xad, 0xf1, 0x53, 0x26, 0xf2, 0xc3, 0x36, 0x1c, 0x2c, 0x6b, 0xfc,
	0x1f, 0xd2, 0x38, 0x86, 0x56, 0x3e, 0x2a, 0x74, 0xe4, 0x71, 0xdb, 0xcd, 0x4a, 0x97, 0xa0, 0x38,
	0x6d, 0x4b, 0x91, 0xed, 0xbd, 0x59, 0x64, 0x2f, 0xe0, 0xf6, 0x98, 0xbb, 0x23, 0xa4, 0x76, 0xec,
	0xa5, 0xc5, 0xdd, 0x57, 0x79, 0x11, 0x3c, 0x84, 0xdb, 0x11, 0xbe, 0x4c, 0x90, 0xaf, 0xf6, 0x7d,
	0x50, 0xbe, 0x28, 0x8e, 0xf2, 0x11, 0x1c, 0xae, 0x94, 0x2e, 0x47, 0xff, 0x23, 0x81, 0x7b, 0x63,
	0xee, 0x1a, 0x68, 0x64, 0xcb, 0x56, 0x62, 0xa8, 0xf4, 0xb0, 0x30, 0xb9, 0xed, 0xa5, 0xc9, 0xad,
	0x35, 0x58, 0xab, 0x30, 0x78, 0x02, 0x0f, 0x36, 0x59, 0x28, 0xbc, 0x0e, 0xff, 0xdd, 0x85, 0xda,
	0x98, 0xbb, 0xca, 0x04, 0x60, 0xee, 0x0f, 0x62, 0xb0, 0x61, 0xe3, 0x2e, 0x5c, 0xc4, 0xdd, 0x47,
	0xd7, 0x65, 0x96, 0x57, 0xb6, 0x05, 0xb7, 0xca, 0x5b, 0xf9, 0x64, 0xf3, 0xea, 0x82, 0xd7, 0xd5,
	0xae, 0xc7, 0x2b, 0x35, 0x7e, 0x22, 0xd0, 0x5e, 0x7b, 0x9f, 0x0e, 0x37, 0x17, 0x5a, 0xb7, 0xa6,
	0xfb, 0xd9, 0xcd, 0xd7, 0x94, 0x46, 0xbe, 0x87, 0x83, 0x95, 0x1b, 0x43, 0xbb, 0x5e, 0xbd, 0x82,
	0xdf, 0xfd, 0xe4, 0x66, 0xfc, 0x52, 0x3b, 0x86, 0xfd, 0xa5, 0xbd, 0xff, 0xe1, 0xe6, 0x4a, 0x8b,
	0xec, 0xee, 0xe3, 0x9b, 0xb0, 0x4b, 0xd5, 0xdf, 0x08, 0x1c, 0x56, 0xef, 0xfc, 0x4f, 0x37, 0xd7,
	0xac, 0x5c, 0xd8, 0xfd, 0xfc, 0x0d, 0x17, 0x16, 0xbe, 0xbe, 0x7c, 0xfa, 0xe7, 0x65, 0x8f, 0xbc,
	0xba, 0xec, 0x91, 0x7f, 0x2e, 0x7b, 0xe4, 0x97, 0xab, 0xde, 0xd6, 0xab, 0xab, 0xde, 0xd6, 0x5f,
	0x57, 0xbd, 0xad, 0x6f, 0x1f, 0xbb, 0x5e, 0x3c, 0x49, 0x2c, 0xcd, 0x66, 0x81, 0x1e, 0xa0, 0xe3,
	0x59, 0x3e, 0xb3, 0xf5, 0x5c, 0xed, 0x23, 0x9b, 0x45, 0xe2, 0xbb, 0x4a, 0x3f, 0x9f, 0x7d, 0xd8,
	0xc5, 0x17, 0x53, 0xe4, 0xd6, 0x9e, 0xfc, 0xb8, 0xfa, 0xf8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6b, 0xf6, 0x3a, 0x2b, 0xf9, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateDeal defines a method for creating a deal.
	CreateDeal(ctx context.Context, in *MsgCreateDeal, opts ...grpc.CallOption) (*MsgCreateDealResponse, error)
	// SellData defines a method for selling a data.
	SellData(ctx context.Context, in *MsgSellData, opts ...grpc.CallOption) (*MsgSellDataResponse, error)
	// VoteDataVerification defines a method for voting data verification.
	VoteDataVerification(ctx context.Context, in *MsgVoteDataVerification, opts ...grpc.CallOption) (*MsgVoteDataVerificationResponse, error)
	// VoteDataDelivery defines a method for voting data delivery.
	VoteDataDelivery(ctx context.Context, in *MsgVoteDataDelivery, opts ...grpc.CallOption) (*MsgVoteDataDeliveryResponse, error)
	// DeactivateDeal defines a method for deactivating the deal.
	DeactivateDeal(ctx context.Context, in *MsgDeactivateDeal, opts ...grpc.CallOption) (*MsgDeactivateDealResponse, error)
	// ReRequestDataDeliveryVote defines a method for requesting DataDeliveryVote.
	ReRequestDataDeliveryVote(ctx context.Context, in *MsgReRequestDataDeliveryVote, opts ...grpc.CallOption) (*MsgReRequestDataDeliveryVoteResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDeal(ctx context.Context, in *MsgCreateDeal, opts ...grpc.CallOption) (*MsgCreateDealResponse, error) {
	out := new(MsgCreateDealResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Msg/CreateDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellData(ctx context.Context, in *MsgSellData, opts ...grpc.CallOption) (*MsgSellDataResponse, error) {
	out := new(MsgSellDataResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Msg/SellData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteDataVerification(ctx context.Context, in *MsgVoteDataVerification, opts ...grpc.CallOption) (*MsgVoteDataVerificationResponse, error) {
	out := new(MsgVoteDataVerificationResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Msg/VoteDataVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteDataDelivery(ctx context.Context, in *MsgVoteDataDelivery, opts ...grpc.CallOption) (*MsgVoteDataDeliveryResponse, error) {
	out := new(MsgVoteDataDeliveryResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Msg/VoteDataDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateDeal(ctx context.Context, in *MsgDeactivateDeal, opts ...grpc.CallOption) (*MsgDeactivateDealResponse, error) {
	out := new(MsgDeactivateDealResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Msg/DeactivateDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReRequestDataDeliveryVote(ctx context.Context, in *MsgReRequestDataDeliveryVote, opts ...grpc.CallOption) (*MsgReRequestDataDeliveryVoteResponse, error) {
	out := new(MsgReRequestDataDeliveryVoteResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2alpha2.Msg/ReRequestDataDeliveryVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateDeal defines a method for creating a deal.
	CreateDeal(context.Context, *MsgCreateDeal) (*MsgCreateDealResponse, error)
	// SellData defines a method for selling a data.
	SellData(context.Context, *MsgSellData) (*MsgSellDataResponse, error)
	// VoteDataVerification defines a method for voting data verification.
	VoteDataVerification(context.Context, *MsgVoteDataVerification) (*MsgVoteDataVerificationResponse, error)
	// VoteDataDelivery defines a method for voting data delivery.
	VoteDataDelivery(context.Context, *MsgVoteDataDelivery) (*MsgVoteDataDeliveryResponse, error)
	// DeactivateDeal defines a method for deactivating the deal.
	DeactivateDeal(context.Context, *MsgDeactivateDeal) (*MsgDeactivateDealResponse, error)
	// ReRequestDataDeliveryVote defines a method for requesting DataDeliveryVote.
	ReRequestDataDeliveryVote(context.Context, *MsgReRequestDataDeliveryVote) (*MsgReRequestDataDeliveryVoteResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDeal(ctx context.Context, req *MsgCreateDeal) (*MsgCreateDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeal not implemented")
}
func (*UnimplementedMsgServer) SellData(ctx context.Context, req *MsgSellData) (*MsgSellDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellData not implemented")
}
func (*UnimplementedMsgServer) VoteDataVerification(ctx context.Context, req *MsgVoteDataVerification) (*MsgVoteDataVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDataVerification not implemented")
}
func (*UnimplementedMsgServer) VoteDataDelivery(ctx context.Context, req *MsgVoteDataDelivery) (*MsgVoteDataDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDataDelivery not implemented")
}
func (*UnimplementedMsgServer) DeactivateDeal(ctx context.Context, req *MsgDeactivateDeal) (*MsgDeactivateDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateDeal not implemented")
}
func (*UnimplementedMsgServer) ReRequestDataDeliveryVote(ctx context.Context, req *MsgReRequestDataDeliveryVote) (*MsgReRequestDataDeliveryVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReRequestDataDeliveryVote not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDeal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Msg/CreateDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDeal(ctx, req.(*MsgCreateDeal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Msg/SellData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellData(ctx, req.(*MsgSellData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteDataVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteDataVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteDataVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Msg/VoteDataVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteDataVerification(ctx, req.(*MsgVoteDataVerification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteDataDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteDataDelivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteDataDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Msg/VoteDataDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteDataDelivery(ctx, req.(*MsgVoteDataDelivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateDeal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Msg/DeactivateDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateDeal(ctx, req.(*MsgDeactivateDeal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReRequestDataDeliveryVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReRequestDataDeliveryVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReRequestDataDeliveryVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2alpha2.Msg/ReRequestDataDeliveryVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReRequestDataDeliveryVote(ctx, req.(*MsgReRequestDataDeliveryVote))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.datadeal.v2alpha2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeal",
			Handler:    _Msg_CreateDeal_Handler,
		},
		{
			MethodName: "SellData",
			Handler:    _Msg_SellData_Handler,
		},
		{
			MethodName: "VoteDataVerification",
			Handler:    _Msg_VoteDataVerification_Handler,
		},
		{
			MethodName: "VoteDataDelivery",
			Handler:    _Msg_VoteDataDelivery_Handler,
		},
		{
			MethodName: "DeactivateDeal",
			Handler:    _Msg_DeactivateDeal_Handler,
		},
		{
			MethodName: "ReRequestDataDeliveryVote",
			Handler:    _Msg_ReRequestDataDeliveryVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/datadeal/v2alpha2/tx.proto",
}

func (m *MsgCreateDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDeal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDeal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyerAddress) > 0 {
		i -= len(m.BuyerAddress)
		copy(dAtA[i:], m.BuyerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxNumData != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxNumData))
		i--
		dAtA[i] = 0x18
	}
	if m.Budget != nil {
		{
			size, err := m.Budget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerAddress) > 0 {
		i -= len(m.SellerAddress)
		copy(dAtA[i:], m.SellerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerifiableCid) > 0 {
		i -= len(m.VerifiableCid)
		copy(dAtA[i:], m.VerifiableCid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerifiableCid)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteDataVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteDataVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteDataVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.DataVerificationVote != nil {
		{
			size, err := m.DataVerificationVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteDataVerificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteDataVerificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteDataVerificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DataVerificationVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataVerificationVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataVerificationVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteOption != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteOption))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoterUniqueId) > 0 {
		i -= len(m.VoterUniqueId)
		copy(dAtA[i:], m.VoterUniqueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterUniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteDataDelivery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteDataDelivery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteDataDelivery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.DataDeliveryVote != nil {
		{
			size, err := m.DataDeliveryVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteDataDeliveryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteDataDeliveryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteDataDeliveryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DataDeliveryVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataDeliveryVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataDeliveryVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteOption != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteOption))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DeliveredCid) > 0 {
		i -= len(m.DeliveredCid)
		copy(dAtA[i:], m.DeliveredCid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeliveredCid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoterUniqueId) > 0 {
		i -= len(m.VoterUniqueId)
		copy(dAtA[i:], m.VoterUniqueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterUniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDeal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDeal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReRequestDataDeliveryVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReRequestDataDeliveryVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReRequestDataDeliveryVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReRequestDataDeliveryVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReRequestDataDeliveryVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReRequestDataDeliveryVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateDeal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Budget != nil {
		l = m.Budget.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxNumData != 0 {
		n += 1 + sovTx(uint64(m.MaxNumData))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	return n
}

func (m *MsgSellData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	l = len(m.VerifiableCid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SellerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteDataVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataVerificationVote != nil {
		l = m.DataVerificationVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteDataVerificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DataVerificationVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterUniqueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VoteOption != 0 {
		n += 1 + sovTx(uint64(m.VoteOption))
	}
	return n
}

func (m *MsgVoteDataDelivery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataDeliveryVote != nil {
		l = m.DataDeliveryVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteDataDeliveryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DataDeliveryVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterUniqueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeliveredCid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VoteOption != 0 {
		n += 1 + sovTx(uint64(m.VoteOption))
	}
	return n
}

func (m *MsgDeactivateDeal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeactivateDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReRequestDataDeliveryVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReRequestDataDeliveryVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Budget == nil {
				m.Budget = &types.Coin{}
			}
			if err := m.Budget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumData", wireType)
			}
			m.MaxNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiableCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiableCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteDataVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteDataVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteDataVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVerificationVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataVerificationVote == nil {
				m.DataVerificationVote = &DataVerificationVote{}
			}
			if err := m.DataVerificationVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteDataVerificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteDataVerificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteDataVerificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataVerificationVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataVerificationVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataVerificationVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterUniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterUniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			m.VoteOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteOption |= types1.VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteDataDelivery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteDataDelivery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteDataDelivery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataDeliveryVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataDeliveryVote == nil {
				m.DataDeliveryVote = &DataDeliveryVote{}
			}
			if err := m.DataDeliveryVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteDataDeliveryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteDataDeliveryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteDataDeliveryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataDeliveryVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataDeliveryVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataDeliveryVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterUniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterUniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveredCid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveredCid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			m.VoteOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteOption |= types1.VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReRequestDataDeliveryVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReRequestDataDeliveryVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReRequestDataDeliveryVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReRequestDataDeliveryVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReRequestDataDeliveryVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReRequestDataDeliveryVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
