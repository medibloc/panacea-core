// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datadeal/v2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateDeal defines the Msg/CreateDeal request type.
type MsgCreateDeal struct {
	DataSchema      []string    `protobuf:"bytes,1,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	Budget          *types.Coin `protobuf:"bytes,2,opt,name=budget,proto3" json:"budget,omitempty"`
	MaxNumData      uint64      `protobuf:"varint,3,opt,name=max_num_data,json=maxNumData,proto3" json:"max_num_data,omitempty"`
	ConsumerAddress string      `protobuf:"bytes,4,opt,name=consumer_address,json=consumerAddress,proto3" json:"consumer_address,omitempty"`
}

func (m *MsgCreateDeal) Reset()         { *m = MsgCreateDeal{} }
func (m *MsgCreateDeal) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDeal) ProtoMessage()    {}
func (*MsgCreateDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f03db1b9a7fe946, []int{0}
}
func (m *MsgCreateDeal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDeal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDeal.Merge(m, src)
}
func (m *MsgCreateDeal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDeal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDeal proto.InternalMessageInfo

func (m *MsgCreateDeal) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *MsgCreateDeal) GetBudget() *types.Coin {
	if m != nil {
		return m.Budget
	}
	return nil
}

func (m *MsgCreateDeal) GetMaxNumData() uint64 {
	if m != nil {
		return m.MaxNumData
	}
	return 0
}

func (m *MsgCreateDeal) GetConsumerAddress() string {
	if m != nil {
		return m.ConsumerAddress
	}
	return ""
}

// MsgCreateDealResponse defines the Msg/CreateDeal response type.
type MsgCreateDealResponse struct {
	DealId uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
}

func (m *MsgCreateDealResponse) Reset()         { *m = MsgCreateDealResponse{} }
func (m *MsgCreateDealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDealResponse) ProtoMessage()    {}
func (*MsgCreateDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f03db1b9a7fe946, []int{1}
}
func (m *MsgCreateDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDealResponse.Merge(m, src)
}
func (m *MsgCreateDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDealResponse proto.InternalMessageInfo

func (m *MsgCreateDealResponse) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

// MsgDeactivateDeal defines the Msg/DeactivateDeal request type.
type MsgDeactivateDeal struct {
	DealId           uint64 `protobuf:"varint,1,opt,name=deal_id,json=dealId,proto3" json:"deal_id,omitempty"`
	RequesterAddress string `protobuf:"bytes,2,opt,name=requester_address,json=requesterAddress,proto3" json:"requester_address,omitempty"`
}

func (m *MsgDeactivateDeal) Reset()         { *m = MsgDeactivateDeal{} }
func (m *MsgDeactivateDeal) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDeal) ProtoMessage()    {}
func (*MsgDeactivateDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f03db1b9a7fe946, []int{2}
}
func (m *MsgDeactivateDeal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDeal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDeal.Merge(m, src)
}
func (m *MsgDeactivateDeal) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDeal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDeal proto.InternalMessageInfo

func (m *MsgDeactivateDeal) GetDealId() uint64 {
	if m != nil {
		return m.DealId
	}
	return 0
}

func (m *MsgDeactivateDeal) GetRequesterAddress() string {
	if m != nil {
		return m.RequesterAddress
	}
	return ""
}

// MsgDeactivateDealResponse defines the Msg/DeactivateDeal response type.
type MsgDeactivateDealResponse struct {
}

func (m *MsgDeactivateDealResponse) Reset()         { *m = MsgDeactivateDealResponse{} }
func (m *MsgDeactivateDealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDealResponse) ProtoMessage()    {}
func (*MsgDeactivateDealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f03db1b9a7fe946, []int{3}
}
func (m *MsgDeactivateDealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDealResponse.Merge(m, src)
}
func (m *MsgDeactivateDealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDealResponse proto.InternalMessageInfo

// MsgSubmitConsent defines the Msg/SubmitConsent request type.
type MsgSubmitConsent struct {
	Consent *Consent `protobuf:"bytes,1,opt,name=consent,proto3" json:"consent,omitempty"`
}

func (m *MsgSubmitConsent) Reset()         { *m = MsgSubmitConsent{} }
func (m *MsgSubmitConsent) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitConsent) ProtoMessage()    {}
func (*MsgSubmitConsent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f03db1b9a7fe946, []int{4}
}
func (m *MsgSubmitConsent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitConsent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitConsent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitConsent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitConsent.Merge(m, src)
}
func (m *MsgSubmitConsent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitConsent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitConsent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitConsent proto.InternalMessageInfo

func (m *MsgSubmitConsent) GetConsent() *Consent {
	if m != nil {
		return m.Consent
	}
	return nil
}

// MsgSubmitConsentResponse defines the Msg/SubmitConsent response type.
type MsgSubmitConsentResponse struct {
}

func (m *MsgSubmitConsentResponse) Reset()         { *m = MsgSubmitConsentResponse{} }
func (m *MsgSubmitConsentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitConsentResponse) ProtoMessage()    {}
func (*MsgSubmitConsentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f03db1b9a7fe946, []int{5}
}
func (m *MsgSubmitConsentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitConsentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitConsentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitConsentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitConsentResponse.Merge(m, src)
}
func (m *MsgSubmitConsentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitConsentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitConsentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitConsentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateDeal)(nil), "panacea.datadeal.v2.MsgCreateDeal")
	proto.RegisterType((*MsgCreateDealResponse)(nil), "panacea.datadeal.v2.MsgCreateDealResponse")
	proto.RegisterType((*MsgDeactivateDeal)(nil), "panacea.datadeal.v2.MsgDeactivateDeal")
	proto.RegisterType((*MsgDeactivateDealResponse)(nil), "panacea.datadeal.v2.MsgDeactivateDealResponse")
	proto.RegisterType((*MsgSubmitConsent)(nil), "panacea.datadeal.v2.MsgSubmitConsent")
	proto.RegisterType((*MsgSubmitConsentResponse)(nil), "panacea.datadeal.v2.MsgSubmitConsentResponse")
}

func init() { proto.RegisterFile("panacea/datadeal/v2/tx.proto", fileDescriptor_9f03db1b9a7fe946) }

var fileDescriptor_9f03db1b9a7fe946 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xe3, 0xa4, 0x4a, 0xd5, 0x9b, 0xaf, 0x1f, 0xa9, 0x01, 0xe1, 0x9a, 0xca, 0x04, 0x4b,
	0xa0, 0x00, 0xea, 0x0c, 0x31, 0x12, 0x7b, 0x48, 0x36, 0x80, 0xc2, 0xc2, 0x5d, 0x81, 0x90, 0xac,
	0xb1, 0x7d, 0xe5, 0x58, 0xca, 0x78, 0x82, 0x67, 0x1c, 0x85, 0xb7, 0xe0, 0x51, 0x58, 0xf0, 0x10,
	0x2c, 0xbb, 0x64, 0x89, 0x92, 0x17, 0x41, 0xfe, 0x17, 0xea, 0x92, 0x88, 0xee, 0xec, 0x7b, 0x7e,
	0x3e, 0xf7, 0xdc, 0x3b, 0x1e, 0x38, 0x5b, 0xb0, 0x84, 0x05, 0xc8, 0x68, 0xc8, 0x14, 0x0b, 0x91,
	0xcd, 0xe9, 0xd2, 0xa1, 0x6a, 0x45, 0x16, 0xa9, 0x50, 0x42, 0xbf, 0x5d, 0xa9, 0xa4, 0x56, 0xc9,
	0xd2, 0x31, 0xef, 0x44, 0x22, 0x12, 0x85, 0x4e, 0xf3, 0xa7, 0x12, 0x35, 0xad, 0x40, 0x48, 0x2e,
	0x24, 0xf5, 0x99, 0x44, 0xba, 0x1c, 0xf9, 0xa8, 0xd8, 0x88, 0x06, 0x22, 0x4e, 0x6a, 0x7d, 0x57,
	0xa3, 0xc2, 0xb2, 0xd4, 0x1f, 0xee, 0xd2, 0x03, 0x91, 0x48, 0x4c, 0x54, 0x89, 0xd8, 0xdf, 0x34,
	0x38, 0x9e, 0xca, 0x68, 0x9c, 0x22, 0x53, 0x38, 0x41, 0x36, 0xd7, 0x1f, 0x40, 0x2f, 0xc7, 0x3d,
	0x19, 0xcc, 0x90, 0x33, 0x43, 0x1b, 0x74, 0x86, 0x47, 0x2e, 0xe4, 0xa5, 0x8b, 0xa2, 0xa2, 0x8f,
	0xa0, 0xeb, 0x67, 0x61, 0x84, 0xca, 0x68, 0x0f, 0xb4, 0x61, 0xcf, 0x39, 0x25, 0x65, 0x4c, 0x92,
	0xc7, 0x24, 0x55, 0x4c, 0x32, 0x16, 0x71, 0xe2, 0x56, 0xa0, 0x3e, 0x80, 0xff, 0x38, 0x5b, 0x79,
	0x49, 0xc6, 0xbd, 0xdc, 0xc8, 0xe8, 0x0c, 0xb4, 0xe1, 0x81, 0x0b, 0x9c, 0xad, 0xde, 0x67, 0x7c,
	0xc2, 0x14, 0xd3, 0x9f, 0x40, 0x3f, 0x0f, 0x96, 0x71, 0x4c, 0x3d, 0x16, 0x86, 0x29, 0x4a, 0x69,
	0x1c, 0x0c, 0xb4, 0xe1, 0x91, 0x7b, 0xab, 0xae, 0xbf, 0x2a, 0xcb, 0xf6, 0x73, 0xb8, 0xdb, 0x48,
	0xec, 0xa2, 0x5c, 0xe4, 0x33, 0xe9, 0xf7, 0xe0, 0x30, 0x1f, 0xd2, 0x8b, 0x43, 0x43, 0x2b, 0x1a,
	0x74, 0xf3, 0xd7, 0x37, 0xa1, 0xfd, 0x01, 0x4e, 0xa6, 0x32, 0x9a, 0x20, 0x0b, 0x54, 0xbc, 0xac,
	0xe7, 0xdc, 0x47, 0xeb, 0xcf, 0xe0, 0x24, 0xc5, 0xcf, 0x19, 0x4a, 0x75, 0x25, 0x4b, 0xbb, 0xc8,
	0xd2, 0xdf, 0x0a, 0x75, 0x98, 0xfb, 0x70, 0xfa, 0x97, 0x75, 0x1d, 0xc8, 0x7e, 0x0b, 0xfd, 0xa9,
	0x8c, 0x2e, 0x32, 0x9f, 0xc7, 0x6a, 0x5c, 0xae, 0x5d, 0x7f, 0x09, 0x87, 0xd5, 0x09, 0x14, 0x6d,
	0x7b, 0xce, 0x19, 0xd9, 0xf1, 0x43, 0x90, 0x0a, 0x77, 0x6b, 0xd8, 0x36, 0xc1, 0xb8, 0xee, 0x55,
	0xf7, 0x71, 0xbe, 0xb7, 0xa1, 0x33, 0x95, 0x91, 0xfe, 0x09, 0xe0, 0xca, 0x41, 0xda, 0x3b, 0x8d,
	0x1b, 0xab, 0x33, 0x9f, 0xfe, 0x9b, 0xd9, 0xae, 0x77, 0x06, 0xff, 0x5f, 0x5b, 0xe1, 0xe3, 0x7d,
	0x5f, 0x37, 0x39, 0x93, 0xdc, 0x8c, 0xdb, 0x76, 0x42, 0x38, 0x6e, 0x2e, 0xed, 0xd1, 0x3e, 0x83,
	0x06, 0x66, 0x9e, 0xdf, 0x08, 0xab, 0xdb, 0xbc, 0x7e, 0xf7, 0x63, 0x6d, 0x69, 0x97, 0x6b, 0x4b,
	0xfb, 0xb5, 0xb6, 0xb4, 0xaf, 0x1b, 0xab, 0x75, 0xb9, 0xb1, 0x5a, 0x3f, 0x37, 0x56, 0xeb, 0xe3,
	0x28, 0x8a, 0xd5, 0x2c, 0xf3, 0x49, 0x20, 0x38, 0xe5, 0x18, 0xc6, 0xfe, 0x5c, 0x04, 0xb4, 0xf2,
	0x3e, 0x0f, 0x44, 0x8a, 0x74, 0xf5, 0xe7, 0x4e, 0xa9, 0x2f, 0x0b, 0x94, 0x7e, 0xb7, 0xb8, 0x4f,
	0x2f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x64, 0x5e, 0xb2, 0x1c, 0xfd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateDeal defines a method for creating a deal.
	CreateDeal(ctx context.Context, in *MsgCreateDeal, opts ...grpc.CallOption) (*MsgCreateDealResponse, error)
	// DeactivateDeal defines a method for deactivating the deal.
	DeactivateDeal(ctx context.Context, in *MsgDeactivateDeal, opts ...grpc.CallOption) (*MsgDeactivateDealResponse, error)
	// SubmitConsent defines a method for provider's submit consent
	SubmitConsent(ctx context.Context, in *MsgSubmitConsent, opts ...grpc.CallOption) (*MsgSubmitConsentResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDeal(ctx context.Context, in *MsgCreateDeal, opts ...grpc.CallOption) (*MsgCreateDealResponse, error) {
	out := new(MsgCreateDealResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2.Msg/CreateDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateDeal(ctx context.Context, in *MsgDeactivateDeal, opts ...grpc.CallOption) (*MsgDeactivateDealResponse, error) {
	out := new(MsgDeactivateDealResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2.Msg/DeactivateDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitConsent(ctx context.Context, in *MsgSubmitConsent, opts ...grpc.CallOption) (*MsgSubmitConsentResponse, error) {
	out := new(MsgSubmitConsentResponse)
	err := c.cc.Invoke(ctx, "/panacea.datadeal.v2.Msg/SubmitConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateDeal defines a method for creating a deal.
	CreateDeal(context.Context, *MsgCreateDeal) (*MsgCreateDealResponse, error)
	// DeactivateDeal defines a method for deactivating the deal.
	DeactivateDeal(context.Context, *MsgDeactivateDeal) (*MsgDeactivateDealResponse, error)
	// SubmitConsent defines a method for provider's submit consent
	SubmitConsent(context.Context, *MsgSubmitConsent) (*MsgSubmitConsentResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDeal(ctx context.Context, req *MsgCreateDeal) (*MsgCreateDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeal not implemented")
}
func (*UnimplementedMsgServer) DeactivateDeal(ctx context.Context, req *MsgDeactivateDeal) (*MsgDeactivateDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateDeal not implemented")
}
func (*UnimplementedMsgServer) SubmitConsent(ctx context.Context, req *MsgSubmitConsent) (*MsgSubmitConsentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitConsent not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDeal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2.Msg/CreateDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDeal(ctx, req.(*MsgCreateDeal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateDeal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2.Msg/DeactivateDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateDeal(ctx, req.(*MsgDeactivateDeal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitConsent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datadeal.v2.Msg/SubmitConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitConsent(ctx, req.(*MsgSubmitConsent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.datadeal.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeal",
			Handler:    _Msg_CreateDeal_Handler,
		},
		{
			MethodName: "DeactivateDeal",
			Handler:    _Msg_DeactivateDeal_Handler,
		},
		{
			MethodName: "SubmitConsent",
			Handler:    _Msg_SubmitConsent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/datadeal/v2/tx.proto",
}

func (m *MsgCreateDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDeal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDeal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerAddress) > 0 {
		i -= len(m.ConsumerAddress)
		copy(dAtA[i:], m.ConsumerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConsumerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxNumData != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxNumData))
		i--
		dAtA[i] = 0x18
	}
	if m.Budget != nil {
		{
			size, err := m.Budget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDeal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDeal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequesterAddress) > 0 {
		i -= len(m.RequesterAddress)
		copy(dAtA[i:], m.RequesterAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RequesterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.DealId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DealId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitConsent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitConsent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitConsent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Consent != nil {
		{
			size, err := m.Consent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitConsentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitConsentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitConsentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateDeal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Budget != nil {
		l = m.Budget.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxNumData != 0 {
		n += 1 + sovTx(uint64(m.MaxNumData))
	}
	l = len(m.ConsumerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	return n
}

func (m *MsgDeactivateDeal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DealId != 0 {
		n += 1 + sovTx(uint64(m.DealId))
	}
	l = len(m.RequesterAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeactivateDealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitConsent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Consent != nil {
		l = m.Consent.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitConsentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Budget == nil {
				m.Budget = &types.Coin{}
			}
			if err := m.Budget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumData", wireType)
			}
			m.MaxNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealId", wireType)
			}
			m.DealId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitConsent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitConsent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitConsent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consent == nil {
				m.Consent = &Consent{}
			}
			if err := m.Consent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitConsentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitConsentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitConsentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
