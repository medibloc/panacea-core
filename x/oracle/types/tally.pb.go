// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2alpha2/tally.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Tally defines the information needed to count votes.
type Tally struct {
	OracleValidatorInfos map[string]*OracleValidatorInfo        `protobuf:"bytes,1,rep,name=oracle_validator_infos,json=oracleValidatorInfos,proto3" json:"oracle_validator_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Yes                  map[string]*ConsensusTally             `protobuf:"bytes,2,rep,name=yes,proto3" json:"yes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	No                   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=no,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no"`
	Total                github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total"`
}

func (m *Tally) Reset()         { *m = Tally{} }
func (m *Tally) String() string { return proto.CompactTextString(m) }
func (*Tally) ProtoMessage()    {}
func (*Tally) Descriptor() ([]byte, []int) {
	return fileDescriptor_870cc548848e9796, []int{0}
}
func (m *Tally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tally.Merge(m, src)
}
func (m *Tally) XXX_Size() int {
	return m.Size()
}
func (m *Tally) XXX_DiscardUnknown() {
	xxx_messageInfo_Tally.DiscardUnknown(m)
}

var xxx_messageInfo_Tally proto.InternalMessageInfo

func (m *Tally) GetOracleValidatorInfos() map[string]*OracleValidatorInfo {
	if m != nil {
		return m.OracleValidatorInfos
	}
	return nil
}

func (m *Tally) GetYes() map[string]*ConsensusTally {
	if m != nil {
		return m.Yes
	}
	return nil
}

// ConsensusTally defines the value of the voted consensus
type ConsensusTally struct {
	ConsensusKey []byte                                 `protobuf:"bytes,1,opt,name=consensus_key,json=consensusKey,proto3" json:"consensus_key,omitempty"`
	VotingAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=voting_amount,json=votingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"voting_amount"`
}

func (m *ConsensusTally) Reset()         { *m = ConsensusTally{} }
func (m *ConsensusTally) String() string { return proto.CompactTextString(m) }
func (*ConsensusTally) ProtoMessage()    {}
func (*ConsensusTally) Descriptor() ([]byte, []int) {
	return fileDescriptor_870cc548848e9796, []int{1}
}
func (m *ConsensusTally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusTally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusTally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusTally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusTally.Merge(m, src)
}
func (m *ConsensusTally) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusTally) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusTally.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusTally proto.InternalMessageInfo

func (m *ConsensusTally) GetConsensusKey() []byte {
	if m != nil {
		return m.ConsensusKey
	}
	return nil
}

// OracleValidatorInfo defines Oracle and Validator information
type OracleValidatorInfo struct {
	Address         string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OracleActivated bool                                   `protobuf:"varint,2,opt,name=oracle_activated,json=oracleActivated,proto3" json:"oracle_activated,omitempty"`
	BondedTokens    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=bonded_tokens,json=bondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_tokens"`
	ValidatorJailed bool                                   `protobuf:"varint,4,opt,name=validator_jailed,json=validatorJailed,proto3" json:"validator_jailed,omitempty"`
}

func (m *OracleValidatorInfo) Reset()         { *m = OracleValidatorInfo{} }
func (m *OracleValidatorInfo) String() string { return proto.CompactTextString(m) }
func (*OracleValidatorInfo) ProtoMessage()    {}
func (*OracleValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_870cc548848e9796, []int{2}
}
func (m *OracleValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleValidatorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleValidatorInfo.Merge(m, src)
}
func (m *OracleValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *OracleValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OracleValidatorInfo proto.InternalMessageInfo

func (m *OracleValidatorInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OracleValidatorInfo) GetOracleActivated() bool {
	if m != nil {
		return m.OracleActivated
	}
	return false
}

func (m *OracleValidatorInfo) GetValidatorJailed() bool {
	if m != nil {
		return m.ValidatorJailed
	}
	return false
}

func init() {
	proto.RegisterType((*Tally)(nil), "panacea.oracle.v2alpha2.Tally")
	proto.RegisterMapType((map[string]*OracleValidatorInfo)(nil), "panacea.oracle.v2alpha2.Tally.OracleValidatorInfosEntry")
	proto.RegisterMapType((map[string]*ConsensusTally)(nil), "panacea.oracle.v2alpha2.Tally.YesEntry")
	proto.RegisterType((*ConsensusTally)(nil), "panacea.oracle.v2alpha2.ConsensusTally")
	proto.RegisterType((*OracleValidatorInfo)(nil), "panacea.oracle.v2alpha2.OracleValidatorInfo")
}

func init() {
	proto.RegisterFile("panacea/oracle/v2alpha2/tally.proto", fileDescriptor_870cc548848e9796)
}

var fileDescriptor_870cc548848e9796 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x3a, 0x0d, 0x84, 0x6d, 0x4a, 0xab, 0xa5, 0x02, 0x93, 0x83, 0x1b, 0xa5, 0x12, 0x04,
	0x89, 0xda, 0x92, 0xb9, 0x14, 0x24, 0x90, 0x1a, 0xe0, 0x50, 0x40, 0x42, 0x32, 0x15, 0x12, 0x5c,
	0xac, 0x8d, 0xbd, 0xa4, 0x26, 0x9b, 0x9d, 0xc8, 0xbb, 0xb6, 0xf0, 0x2f, 0x70, 0xea, 0x67, 0xf5,
	0xd8, 0x23, 0xea, 0xa1, 0x42, 0xc9, 0x8f, 0xa0, 0x5d, 0xdb, 0xa5, 0x95, 0x12, 0x21, 0x7a, 0xf2,
	0xfa, 0xed, 0xbc, 0xf7, 0x66, 0xc6, 0x33, 0xc6, 0xbb, 0x33, 0x2a, 0x68, 0xc4, 0xa8, 0x07, 0x29,
	0x8d, 0x38, 0xf3, 0x72, 0x9f, 0xf2, 0xd9, 0x31, 0xf5, 0x3d, 0x45, 0x39, 0x2f, 0xdc, 0x59, 0x0a,
	0x0a, 0xc8, 0x83, 0x2a, 0xc8, 0x2d, 0x83, 0xdc, 0x3a, 0xa8, 0xbb, 0x3d, 0x86, 0x31, 0x98, 0x18,
	0x4f, 0x9f, 0xca, 0xf0, 0xfe, 0xc9, 0x1a, 0x6e, 0x1d, 0x69, 0x3a, 0x11, 0xf8, 0x7e, 0x49, 0x09,
	0x73, 0xca, 0x93, 0x98, 0x2a, 0x48, 0xc3, 0x44, 0x7c, 0x03, 0x69, 0xa3, 0x5e, 0x73, 0xb0, 0xee,
	0xef, 0xbb, 0x2b, 0x94, 0x5d, 0xc3, 0x77, 0x3f, 0x1a, 0xf4, 0x73, 0xcd, 0x3d, 0xd4, 0xd4, 0xb7,
	0x42, 0xa5, 0x45, 0xb0, 0x0d, 0x4b, 0xae, 0xc8, 0x73, 0xdc, 0x2c, 0x98, 0xb4, 0x2d, 0x23, 0xfe,
	0xf8, 0x1f, 0xe2, 0x5f, 0x58, 0xa5, 0xa5, 0x39, 0xe4, 0x15, 0xb6, 0x04, 0xd8, 0xcd, 0x1e, 0x1a,
	0xdc, 0x19, 0xba, 0xa7, 0x17, 0x3b, 0x8d, 0xf3, 0x8b, 0x9d, 0x47, 0xe3, 0x44, 0x1d, 0x67, 0x23,
	0x37, 0x82, 0xa9, 0x17, 0x81, 0x9c, 0x82, 0xac, 0x1e, 0x7b, 0x32, 0x9e, 0x78, 0xaa, 0x98, 0x31,
	0xe9, 0x1e, 0x0a, 0x15, 0x58, 0x02, 0xc8, 0x1b, 0xdc, 0x52, 0xa0, 0x28, 0xb7, 0xd7, 0x6e, 0x24,
	0x51, 0x92, 0xbb, 0x19, 0x7e, 0xb8, 0xb2, 0x66, 0xb2, 0x85, 0x9b, 0x13, 0x56, 0xd8, 0x48, 0x1b,
	0x04, 0xfa, 0x48, 0x86, 0xb8, 0x95, 0x53, 0x9e, 0x31, 0xdb, 0xea, 0xa1, 0xc1, 0xba, 0xff, 0x74,
	0x65, 0xc5, 0x4b, 0x44, 0x83, 0x92, 0xfa, 0xc2, 0xda, 0x47, 0xdd, 0x10, 0xb7, 0xeb, 0x6e, 0x2c,
	0x71, 0x79, 0x79, 0xdd, 0x65, 0x75, 0x5f, 0x5f, 0x83, 0x90, 0x4c, 0xc8, 0x4c, 0x9a, 0x06, 0x5f,
	0x31, 0xe8, 0xff, 0x44, 0xf8, 0xee, 0xf5, 0x5b, 0xb2, 0x8b, 0x37, 0xa2, 0x1a, 0x09, 0x6b, 0xc7,
	0x4e, 0xd0, 0xb9, 0x04, 0xdf, 0xb3, 0x82, 0x7c, 0xc2, 0x1b, 0x39, 0xa8, 0x44, 0x8c, 0x43, 0x3a,
	0x85, 0x4c, 0x28, 0x93, 0xc2, 0xff, 0x77, 0xb7, 0x53, 0x8a, 0x1c, 0x18, 0x8d, 0xfe, 0x39, 0xc2,
	0xf7, 0x96, 0x34, 0x84, 0xd8, 0xf8, 0x36, 0x8d, 0xe3, 0x94, 0x49, 0x59, 0x55, 0x5f, 0xbf, 0x92,
	0x27, 0x78, 0xab, 0x9a, 0x63, 0x1a, 0xa9, 0x24, 0xa7, 0x8a, 0xc5, 0x26, 0x93, 0x76, 0xb0, 0x59,
	0xe2, 0x07, 0x35, 0xac, 0x33, 0x1e, 0x81, 0x88, 0x59, 0x1c, 0x2a, 0x98, 0x30, 0x21, 0x6f, 0x38,
	0x52, 0x9d, 0x52, 0xe4, 0xc8, 0x68, 0x68, 0xff, 0xbf, 0x0b, 0xf4, 0x9d, 0x26, 0x9c, 0xc5, 0x66,
	0xce, 0xda, 0xc1, 0xe6, 0x25, 0xfe, 0xce, 0xc0, 0xc3, 0x0f, 0xa7, 0x73, 0x07, 0x9d, 0xcd, 0x1d,
	0xf4, 0x7b, 0xee, 0xa0, 0x93, 0x85, 0xd3, 0x38, 0x5b, 0x38, 0x8d, 0x5f, 0x0b, 0xa7, 0xf1, 0xd5,
	0xbf, 0x62, 0x3d, 0x65, 0x71, 0x32, 0xe2, 0x10, 0x79, 0xd5, 0xa7, 0xdc, 0x8b, 0x20, 0xd5, 0xcb,
	0xef, 0xfd, 0xa8, 0x7f, 0x04, 0x26, 0x95, 0xd1, 0x2d, 0xb3, 0xd1, 0xcf, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0x13, 0x48, 0xd3, 0x27, 0x04, 0x00, 0x00,
}

func (m *Tally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTally(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.No.Size()
		i -= size
		if _, err := m.No.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTally(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Yes) > 0 {
		for k := range m.Yes {
			v := m.Yes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTally(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTally(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTally(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OracleValidatorInfos) > 0 {
		for k := range m.OracleValidatorInfos {
			v := m.OracleValidatorInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTally(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTally(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTally(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusTally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusTally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusTally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VotingAmount.Size()
		i -= size
		if _, err := m.VotingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTally(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ConsensusKey) > 0 {
		i -= len(m.ConsensusKey)
		copy(dAtA[i:], m.ConsensusKey)
		i = encodeVarintTally(dAtA, i, uint64(len(m.ConsensusKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorJailed {
		i--
		if m.ValidatorJailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.BondedTokens.Size()
		i -= size
		if _, err := m.BondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTally(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OracleActivated {
		i--
		if m.OracleActivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTally(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTally(dAtA []byte, offset int, v uint64) int {
	offset -= sovTally(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleValidatorInfos) > 0 {
		for k, v := range m.OracleValidatorInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTally(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTally(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTally(uint64(mapEntrySize))
		}
	}
	if len(m.Yes) > 0 {
		for k, v := range m.Yes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTally(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTally(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTally(uint64(mapEntrySize))
		}
	}
	l = m.No.Size()
	n += 1 + l + sovTally(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovTally(uint64(l))
	return n
}

func (m *ConsensusTally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsensusKey)
	if l > 0 {
		n += 1 + l + sovTally(uint64(l))
	}
	l = m.VotingAmount.Size()
	n += 1 + l + sovTally(uint64(l))
	return n
}

func (m *OracleValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTally(uint64(l))
	}
	if m.OracleActivated {
		n += 2
	}
	l = m.BondedTokens.Size()
	n += 1 + l + sovTally(uint64(l))
	if m.ValidatorJailed {
		n += 2
	}
	return n
}

func sovTally(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTally(x uint64) (n int) {
	return sovTally(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTally
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleValidatorInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleValidatorInfos == nil {
				m.OracleValidatorInfos = make(map[string]*OracleValidatorInfo)
			}
			var mapkey string
			var mapvalue *OracleValidatorInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTally
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTally
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTally
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTally
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTally
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTally
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTally
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OracleValidatorInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTally(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTally
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OracleValidatorInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Yes == nil {
				m.Yes = make(map[string]*ConsensusTally)
			}
			var mapkey string
			var mapvalue *ConsensusTally
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTally
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTally
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTally
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTally
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTally
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTally
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTally
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ConsensusTally{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTally(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTally
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Yes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.No.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTally(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTally
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusTally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTally
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusTally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusTally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusKey = append(m.ConsensusKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusKey == nil {
				m.ConsensusKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTally(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTally
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTally
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleActivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OracleActivated = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTally
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTally
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorJailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTally
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidatorJailed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTally(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTally
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTally(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTally
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTally
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTally
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTally
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTally
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTally
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTally        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTally          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTally = fmt.Errorf("proto: unexpected end of group")
)
