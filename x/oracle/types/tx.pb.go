// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterOracle defines the Msg/RegisterOracle request type.
type MsgRegisterOracle struct {
	UniqueId               string                                 `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	OperatorAddress        string                                 `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	NodePubKey             []byte                                 `protobuf:"bytes,3,opt,name=node_pub_key,json=nodePubKey,proto3" json:"node_pub_key,omitempty"`
	NodePubKeyRemoteReport []byte                                 `protobuf:"bytes,4,opt,name=node_pub_key_remote_report,json=nodePubKeyRemoteReport,proto3" json:"node_pub_key_remote_report,omitempty"`
	TrustedBlockHeight     int64                                  `protobuf:"varint,5,opt,name=trusted_block_height,json=trustedBlockHeight,proto3" json:"trusted_block_height,omitempty"`
	TrustedBlockHash       []byte                                 `protobuf:"bytes,6,opt,name=trusted_block_hash,json=trustedBlockHash,proto3" json:"trusted_block_hash,omitempty"`
	Endpoint               string                                 `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	OracleCommissionRate   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=oracle_commission_rate,json=oracleCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_rate"`
}

func (m *MsgRegisterOracle) Reset()         { *m = MsgRegisterOracle{} }
func (m *MsgRegisterOracle) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOracle) ProtoMessage()    {}
func (*MsgRegisterOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{0}
}
func (m *MsgRegisterOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOracle.Merge(m, src)
}
func (m *MsgRegisterOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOracle proto.InternalMessageInfo

func (m *MsgRegisterOracle) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *MsgRegisterOracle) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *MsgRegisterOracle) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *MsgRegisterOracle) GetNodePubKeyRemoteReport() []byte {
	if m != nil {
		return m.NodePubKeyRemoteReport
	}
	return nil
}

func (m *MsgRegisterOracle) GetTrustedBlockHeight() int64 {
	if m != nil {
		return m.TrustedBlockHeight
	}
	return 0
}

func (m *MsgRegisterOracle) GetTrustedBlockHash() []byte {
	if m != nil {
		return m.TrustedBlockHash
	}
	return nil
}

func (m *MsgRegisterOracle) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

// MsgRegisterOracleResponse defines the Msg/RegisterOracle response type.
type MsgRegisterOracleResponse struct {
}

func (m *MsgRegisterOracleResponse) Reset()         { *m = MsgRegisterOracleResponse{} }
func (m *MsgRegisterOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOracleResponse) ProtoMessage()    {}
func (*MsgRegisterOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{1}
}
func (m *MsgRegisterOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOracleResponse.Merge(m, src)
}
func (m *MsgRegisterOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOracleResponse proto.InternalMessageInfo

// MsgApproveOracleRegistration defines the Msg/ApproveOracleRegistration
type MsgApproveOracleRegistration struct {
	ApproveOracleRegistration *ApproveOracleRegistration `protobuf:"bytes,1,opt,name=approve_oracle_registration,json=approveOracleRegistration,proto3" json:"approve_oracle_registration,omitempty"`
	Signature                 []byte                     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgApproveOracleRegistration) Reset()         { *m = MsgApproveOracleRegistration{} }
func (m *MsgApproveOracleRegistration) String() string { return proto.CompactTextString(m) }
func (*MsgApproveOracleRegistration) ProtoMessage()    {}
func (*MsgApproveOracleRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{2}
}
func (m *MsgApproveOracleRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveOracleRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveOracleRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveOracleRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveOracleRegistration.Merge(m, src)
}
func (m *MsgApproveOracleRegistration) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveOracleRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveOracleRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveOracleRegistration proto.InternalMessageInfo

func (m *MsgApproveOracleRegistration) GetApproveOracleRegistration() *ApproveOracleRegistration {
	if m != nil {
		return m.ApproveOracleRegistration
	}
	return nil
}

func (m *MsgApproveOracleRegistration) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// ApproveOracleRegistration defines for oracle registration approval
type ApproveOracleRegistration struct {
	UniqueId               string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	TargetOperatorAddress  string `protobuf:"bytes,2,opt,name=target_operator_address,json=targetOperatorAddress,proto3" json:"target_operator_address,omitempty"`
	EncryptedOraclePrivKey []byte `protobuf:"bytes,3,opt,name=encrypted_oracle_priv_key,json=encryptedOraclePrivKey,proto3" json:"encrypted_oracle_priv_key,omitempty"`
}

func (m *ApproveOracleRegistration) Reset()         { *m = ApproveOracleRegistration{} }
func (m *ApproveOracleRegistration) String() string { return proto.CompactTextString(m) }
func (*ApproveOracleRegistration) ProtoMessage()    {}
func (*ApproveOracleRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{3}
}
func (m *ApproveOracleRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApproveOracleRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApproveOracleRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApproveOracleRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveOracleRegistration.Merge(m, src)
}
func (m *ApproveOracleRegistration) XXX_Size() int {
	return m.Size()
}
func (m *ApproveOracleRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveOracleRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveOracleRegistration proto.InternalMessageInfo

func (m *ApproveOracleRegistration) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *ApproveOracleRegistration) GetTargetOperatorAddress() string {
	if m != nil {
		return m.TargetOperatorAddress
	}
	return ""
}

func (m *ApproveOracleRegistration) GetEncryptedOraclePrivKey() []byte {
	if m != nil {
		return m.EncryptedOraclePrivKey
	}
	return nil
}

// MsgApproveOracleRegistrationResponse defines the Msg/ApproveOracleRegistration
type MsgApproveOracleRegistrationResponse struct {
}

func (m *MsgApproveOracleRegistrationResponse) Reset()         { *m = MsgApproveOracleRegistrationResponse{} }
func (m *MsgApproveOracleRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveOracleRegistrationResponse) ProtoMessage()    {}
func (*MsgApproveOracleRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{4}
}
func (m *MsgApproveOracleRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveOracleRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveOracleRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveOracleRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveOracleRegistrationResponse.Merge(m, src)
}
func (m *MsgApproveOracleRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveOracleRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveOracleRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveOracleRegistrationResponse proto.InternalMessageInfo

// MsgUpdateOracleInfo defines the Msg/UpdateOracleInfo
type MsgUpdateOracleInfo struct {
	OperatorAddress      string                                 `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	Endpoint             string                                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	OracleCommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=oracle_commission_rate,json=oracleCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_rate"`
}

func (m *MsgUpdateOracleInfo) Reset()         { *m = MsgUpdateOracleInfo{} }
func (m *MsgUpdateOracleInfo) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleInfo) ProtoMessage()    {}
func (*MsgUpdateOracleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{5}
}
func (m *MsgUpdateOracleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleInfo.Merge(m, src)
}
func (m *MsgUpdateOracleInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleInfo proto.InternalMessageInfo

func (m *MsgUpdateOracleInfo) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *MsgUpdateOracleInfo) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

// MsgUpdateOracleInfoResponse defines the Msg/UpdateOracleInfo
type MsgUpdateOracleInfoResponse struct {
}

func (m *MsgUpdateOracleInfoResponse) Reset()         { *m = MsgUpdateOracleInfoResponse{} }
func (m *MsgUpdateOracleInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleInfoResponse) ProtoMessage()    {}
func (*MsgUpdateOracleInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_91b53ec53f5557f6, []int{6}
}
func (m *MsgUpdateOracleInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleInfoResponse.Merge(m, src)
}
func (m *MsgUpdateOracleInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleInfoResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterOracle)(nil), "panacea.oracle.v2.MsgRegisterOracle")
	proto.RegisterType((*MsgRegisterOracleResponse)(nil), "panacea.oracle.v2.MsgRegisterOracleResponse")
	proto.RegisterType((*MsgApproveOracleRegistration)(nil), "panacea.oracle.v2.MsgApproveOracleRegistration")
	proto.RegisterType((*ApproveOracleRegistration)(nil), "panacea.oracle.v2.ApproveOracleRegistration")
	proto.RegisterType((*MsgApproveOracleRegistrationResponse)(nil), "panacea.oracle.v2.MsgApproveOracleRegistrationResponse")
	proto.RegisterType((*MsgUpdateOracleInfo)(nil), "panacea.oracle.v2.MsgUpdateOracleInfo")
	proto.RegisterType((*MsgUpdateOracleInfoResponse)(nil), "panacea.oracle.v2.MsgUpdateOracleInfoResponse")
}

func init() { proto.RegisterFile("panacea/oracle/v2/tx.proto", fileDescriptor_91b53ec53f5557f6) }

var fileDescriptor_91b53ec53f5557f6 = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x4f, 0x13, 0x41,
	0x18, 0xc6, 0xbb, 0x54, 0x11, 0x46, 0xa2, 0xb0, 0x22, 0x6e, 0xb7, 0x58, 0x9a, 0x86, 0x10, 0x34,
	0xb0, 0x23, 0x35, 0xd1, 0xe8, 0x0d, 0xf4, 0x20, 0x21, 0x0d, 0x64, 0x13, 0x2f, 0x5e, 0x36, 0xb3,
	0xbb, 0x2f, 0xdb, 0x91, 0xee, 0xce, 0x30, 0x33, 0xdb, 0xd0, 0x0f, 0xe0, 0xdd, 0xbb, 0xdf, 0x40,
	0xbf, 0x85, 0x27, 0x8e, 0x1c, 0x8d, 0x07, 0x34, 0xf0, 0x45, 0x4c, 0x67, 0xb7, 0xa5, 0xf6, 0x0f,
	0xc1, 0xc4, 0x53, 0xbb, 0xef, 0xf3, 0x9b, 0x77, 0xde, 0x9d, 0xe7, 0xd9, 0x41, 0x36, 0x27, 0x09,
	0x09, 0x80, 0x60, 0x26, 0x48, 0xd0, 0x02, 0xdc, 0xae, 0x63, 0x75, 0xe2, 0x70, 0xc1, 0x14, 0x33,
	0x17, 0x72, 0xcd, 0xc9, 0x34, 0xa7, 0x5d, 0xb7, 0x17, 0x23, 0x16, 0x31, 0xad, 0xe2, 0xee, 0xbf,
	0x0c, 0xb4, 0x57, 0x22, 0xc6, 0xa2, 0x16, 0x60, 0xfd, 0xe4, 0xa7, 0x87, 0x58, 0xd1, 0x18, 0xa4,
	0x22, 0x31, 0xcf, 0x81, 0xa7, 0x01, 0x93, 0x31, 0x93, 0xd8, 0x27, 0x12, 0xf0, 0x71, 0x0a, 0xa2,
	0x83, 0xdb, 0x5b, 0x3e, 0x28, 0xb2, 0x85, 0x39, 0x89, 0x68, 0x42, 0x14, 0x65, 0x49, 0xce, 0x2e,
	0xe7, 0xcd, 0x08, 0xa7, 0x98, 0x24, 0x09, 0x53, 0x5a, 0x94, 0xb9, 0x5a, 0x19, 0x9d, 0x37, 0x9f,
	0x2e, 0x1f, 0x65, 0x54, 0x8f, 0x20, 0x01, 0x49, 0xf3, 0x06, 0xb5, 0x2f, 0x45, 0xb4, 0xd0, 0x90,
	0x91, 0x0b, 0x11, 0x95, 0x0a, 0xc4, 0xbe, 0xc6, 0xcc, 0x32, 0x9a, 0x4d, 0x13, 0x7a, 0x9c, 0x82,
	0x47, 0x43, 0xcb, 0xa8, 0x1a, 0xeb, 0xb3, 0xee, 0x4c, 0x56, 0xd8, 0x0d, 0xcd, 0x27, 0x68, 0x9e,
	0x71, 0x10, 0x44, 0x31, 0xe1, 0x91, 0x30, 0x14, 0x20, 0xa5, 0x35, 0xa5, 0x99, 0xfb, 0xbd, 0xfa,
	0x76, 0x56, 0x36, 0xab, 0x68, 0x2e, 0x61, 0x21, 0x78, 0x3c, 0xf5, 0xbd, 0x23, 0xe8, 0x58, 0xc5,
	0xaa, 0xb1, 0x3e, 0xe7, 0xa2, 0x6e, 0xed, 0x20, 0xf5, 0xf7, 0xa0, 0x63, 0xbe, 0x46, 0xf6, 0x20,
	0xe1, 0x09, 0x88, 0x99, 0x02, 0x4f, 0x00, 0x67, 0x42, 0x59, 0xb7, 0x34, 0xbf, 0x74, 0xc5, 0xbb,
	0x5a, 0x76, 0xb5, 0x6a, 0x3e, 0x43, 0x8b, 0x4a, 0xa4, 0x52, 0x41, 0xe8, 0xf9, 0x2d, 0x16, 0x1c,
	0x79, 0x4d, 0xa0, 0x51, 0x53, 0x59, 0xb7, 0xab, 0xc6, 0x7a, 0xd1, 0x35, 0x73, 0x6d, 0xa7, 0x2b,
	0xbd, 0xd3, 0x8a, 0xb9, 0x81, 0xcc, 0xa1, 0x15, 0x44, 0x36, 0xad, 0x69, 0xbd, 0xcb, 0xfc, 0x5f,
	0x3c, 0x91, 0x4d, 0xd3, 0x46, 0x33, 0x90, 0x84, 0x9c, 0xd1, 0x44, 0x59, 0x77, 0xb2, 0x43, 0xe8,
	0x3d, 0x9b, 0x21, 0x5a, 0xca, 0x8e, 0xd4, 0x0b, 0x58, 0x1c, 0x53, 0x29, 0x29, 0x4b, 0x3c, 0x41,
	0x14, 0x58, 0x33, 0x5d, 0x72, 0xc7, 0x39, 0x3d, 0x5f, 0x29, 0xfc, 0x3c, 0x5f, 0x59, 0x8b, 0xa8,
	0x6a, 0xa6, 0xbe, 0x13, 0xb0, 0x18, 0xe7, 0xae, 0x67, 0x3f, 0x9b, 0x32, 0x3c, 0xc2, 0xaa, 0xc3,
	0x41, 0x3a, 0x6f, 0x21, 0x70, 0x17, 0xb3, 0x6e, 0x6f, 0xfa, 0xcd, 0x5c, 0xa2, 0xa0, 0x56, 0x46,
	0xa5, 0x11, 0x73, 0x5c, 0x90, 0x9c, 0x25, 0x12, 0x6a, 0x5f, 0x0d, 0xb4, 0xdc, 0x90, 0xd1, 0x36,
	0xe7, 0x82, 0xb5, 0xa1, 0x27, 0x76, 0x51, 0xa1, 0x33, 0x62, 0xb6, 0x50, 0x99, 0x64, 0xa2, 0x97,
	0xcf, 0x2a, 0x06, 0x64, 0xed, 0xeb, 0xdd, 0xfa, 0x86, 0x33, 0x12, 0x6b, 0x67, 0x62, 0x4b, 0xb7,
	0x44, 0x26, 0xee, 0xb6, 0x8c, 0x66, 0x25, 0x8d, 0x12, 0xa2, 0x52, 0x01, 0x3a, 0x0f, 0x73, 0xee,
	0x55, 0xa1, 0xf6, 0xcd, 0x40, 0xa5, 0xc9, 0x93, 0x5e, 0x9b, 0xb7, 0x17, 0xe8, 0x91, 0x22, 0x22,
	0x02, 0xe5, 0x4d, 0x88, 0xdd, 0xc3, 0x4c, 0xde, 0x1f, 0x0a, 0xdf, 0x2b, 0x54, 0x82, 0x24, 0x10,
	0x1d, 0xde, 0xb5, 0x3b, 0x3f, 0x00, 0x2e, 0x68, 0x7b, 0x20, 0x89, 0x4b, 0x7d, 0x20, 0x1b, 0xea,
	0x40, 0xd0, 0xf6, 0x1e, 0x74, 0x6a, 0x6b, 0x68, 0xf5, 0xba, 0x93, 0xed, 0x5b, 0xf0, 0xdd, 0x40,
	0x0f, 0x1a, 0x32, 0x7a, 0xcf, 0x43, 0xa2, 0x72, 0x6e, 0x37, 0x39, 0x64, 0x63, 0x3f, 0x11, 0x63,
	0xfc, 0x27, 0x32, 0x18, 0xb2, 0xa9, 0x1b, 0x87, 0xac, 0xf8, 0x1f, 0x43, 0xf6, 0x18, 0x95, 0xc7,
	0xbc, 0x43, 0xef, 0x1d, 0xeb, 0xbf, 0xa6, 0x50, 0xb1, 0x21, 0x23, 0x33, 0x44, 0xf7, 0x86, 0x6e,
	0x89, 0xd5, 0x31, 0xd1, 0x19, 0x89, 0xab, 0xbd, 0x71, 0x13, 0xaa, 0xb7, 0x9b, 0xf9, 0xe9, 0xda,
	0x9c, 0xe0, 0xf1, 0xbd, 0x26, 0x2e, 0xb0, 0x5f, 0xfe, 0xe3, 0x82, 0xfe, 0x1c, 0x1f, 0xd1, 0xfc,
	0x88, 0xab, 0x6b, 0xe3, 0x9b, 0x0d, 0x73, 0xb6, 0x73, 0x33, 0xae, 0xb7, 0xd7, 0xce, 0xee, 0xe9,
	0x45, 0xc5, 0x38, 0xbb, 0xa8, 0x18, 0xbf, 0x2f, 0x2a, 0xc6, 0xe7, 0xcb, 0x4a, 0xe1, 0xec, 0xb2,
	0x52, 0xf8, 0x71, 0x59, 0x29, 0x7c, 0xc0, 0x03, 0xc6, 0xc6, 0x10, 0xd2, 0xee, 0xa5, 0x85, 0xf3,
	0xe6, 0x9b, 0x01, 0x13, 0x80, 0x4f, 0x7a, 0x37, 0xbb, 0x76, 0xd9, 0x9f, 0xd6, 0xb7, 0xfa, 0xf3,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x85, 0xe1, 0x68, 0xc8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterOracle defines a method for registration of oracle.
	RegisterOracle(ctx context.Context, in *MsgRegisterOracle, opts ...grpc.CallOption) (*MsgRegisterOracleResponse, error)
	// ApproveOracleRegistration defines a method to approve oracle registration
	ApproveOracleRegistration(ctx context.Context, in *MsgApproveOracleRegistration, opts ...grpc.CallOption) (*MsgApproveOracleRegistrationResponse, error)
	// UpgradeOracle defines a method for upgrade of oracle.
	UpdateOracleInfo(ctx context.Context, in *MsgUpdateOracleInfo, opts ...grpc.CallOption) (*MsgUpdateOracleInfoResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOracle(ctx context.Context, in *MsgRegisterOracle, opts ...grpc.CallOption) (*MsgRegisterOracleResponse, error) {
	out := new(MsgRegisterOracleResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2.Msg/RegisterOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveOracleRegistration(ctx context.Context, in *MsgApproveOracleRegistration, opts ...grpc.CallOption) (*MsgApproveOracleRegistrationResponse, error) {
	out := new(MsgApproveOracleRegistrationResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2.Msg/ApproveOracleRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOracleInfo(ctx context.Context, in *MsgUpdateOracleInfo, opts ...grpc.CallOption) (*MsgUpdateOracleInfoResponse, error) {
	out := new(MsgUpdateOracleInfoResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2.Msg/UpdateOracleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterOracle defines a method for registration of oracle.
	RegisterOracle(context.Context, *MsgRegisterOracle) (*MsgRegisterOracleResponse, error)
	// ApproveOracleRegistration defines a method to approve oracle registration
	ApproveOracleRegistration(context.Context, *MsgApproveOracleRegistration) (*MsgApproveOracleRegistrationResponse, error)
	// UpgradeOracle defines a method for upgrade of oracle.
	UpdateOracleInfo(context.Context, *MsgUpdateOracleInfo) (*MsgUpdateOracleInfoResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOracle(ctx context.Context, req *MsgRegisterOracle) (*MsgRegisterOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOracle not implemented")
}
func (*UnimplementedMsgServer) ApproveOracleRegistration(ctx context.Context, req *MsgApproveOracleRegistration) (*MsgApproveOracleRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOracleRegistration not implemented")
}
func (*UnimplementedMsgServer) UpdateOracleInfo(ctx context.Context, req *MsgUpdateOracleInfo) (*MsgUpdateOracleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOracleInfo not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2.Msg/RegisterOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOracle(ctx, req.(*MsgRegisterOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveOracleRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveOracleRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveOracleRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2.Msg/ApproveOracleRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveOracleRegistration(ctx, req.(*MsgApproveOracleRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOracleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOracleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOracleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2.Msg/UpdateOracleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOracleInfo(ctx, req.(*MsgUpdateOracleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.oracle.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOracle",
			Handler:    _Msg_RegisterOracle_Handler,
		},
		{
			MethodName: "ApproveOracleRegistration",
			Handler:    _Msg_ApproveOracleRegistration_Handler,
		},
		{
			MethodName: "UpdateOracleInfo",
			Handler:    _Msg_UpdateOracleInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/oracle/v2/tx.proto",
}

func (m *MsgRegisterOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OracleCommissionRate.Size()
		i -= size
		if _, err := m.OracleCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedBlockHash) > 0 {
		i -= len(m.TrustedBlockHash)
		copy(dAtA[i:], m.TrustedBlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrustedBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.TrustedBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrustedBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NodePubKeyRemoteReport) > 0 {
		i -= len(m.NodePubKeyRemoteReport)
		copy(dAtA[i:], m.NodePubKeyRemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePubKeyRemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodePubKey) > 0 {
		i -= len(m.NodePubKey)
		copy(dAtA[i:], m.NodePubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveOracleRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveOracleRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveOracleRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApproveOracleRegistration != nil {
		{
			size, err := m.ApproveOracleRegistration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApproveOracleRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApproveOracleRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApproveOracleRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedOraclePrivKey) > 0 {
		i -= len(m.EncryptedOraclePrivKey)
		copy(dAtA[i:], m.EncryptedOraclePrivKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncryptedOraclePrivKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetOperatorAddress) > 0 {
		i -= len(m.TargetOperatorAddress)
		copy(dAtA[i:], m.TargetOperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetOperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveOracleRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveOracleRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveOracleRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OracleCommissionRate.Size()
		i -= size
		if _, err := m.OracleCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePubKeyRemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrustedBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.TrustedBlockHeight))
	}
	l = len(m.TrustedBlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OracleCommissionRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveOracleRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApproveOracleRegistration != nil {
		l = m.ApproveOracleRegistration.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ApproveOracleRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetOperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncryptedOraclePrivKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveOracleRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateOracleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OracleCommissionRate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateOracleInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKey = append(m.NodePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKey == nil {
				m.NodePubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKeyRemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKeyRemoteReport = append(m.NodePubKeyRemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKeyRemoteReport == nil {
				m.NodePubKeyRemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHeight", wireType)
			}
			m.TrustedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedBlockHash = append(m.TrustedBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TrustedBlockHash == nil {
				m.TrustedBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveOracleRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveOracleRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveOracleRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveOracleRegistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApproveOracleRegistration == nil {
				m.ApproveOracleRegistration = &ApproveOracleRegistration{}
			}
			if err := m.ApproveOracleRegistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApproveOracleRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApproveOracleRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApproveOracleRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetOperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetOperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedOraclePrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedOraclePrivKey = append(m.EncryptedOraclePrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedOraclePrivKey == nil {
				m.EncryptedOraclePrivKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveOracleRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveOracleRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveOracleRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
