// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2alpha2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterOracle defines the Msg/RegisterOracle request type.
type MsgRegisterOracle struct {
	UniqueId               string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	OracleAddress          string `protobuf:"bytes,2,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	NodePubKey             []byte `protobuf:"bytes,3,opt,name=node_pub_key,json=nodePubKey,proto3" json:"node_pub_key,omitempty"`
	NodePubKeyRemoteReport []byte `protobuf:"bytes,4,opt,name=node_pub_key_remote_report,json=nodePubKeyRemoteReport,proto3" json:"node_pub_key_remote_report,omitempty"`
	TrustedBlockHeight     int64  `protobuf:"varint,5,opt,name=trusted_block_height,json=trustedBlockHeight,proto3" json:"trusted_block_height,omitempty"`
	TrustedBlockHash       []byte `protobuf:"bytes,6,opt,name=trusted_block_hash,json=trustedBlockHash,proto3" json:"trusted_block_hash,omitempty"`
	Nonce                  []byte `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgRegisterOracle) Reset()         { *m = MsgRegisterOracle{} }
func (m *MsgRegisterOracle) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOracle) ProtoMessage()    {}
func (*MsgRegisterOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4592444ae79a4d4, []int{0}
}
func (m *MsgRegisterOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOracle.Merge(m, src)
}
func (m *MsgRegisterOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOracle proto.InternalMessageInfo

func (m *MsgRegisterOracle) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *MsgRegisterOracle) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *MsgRegisterOracle) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *MsgRegisterOracle) GetNodePubKeyRemoteReport() []byte {
	if m != nil {
		return m.NodePubKeyRemoteReport
	}
	return nil
}

func (m *MsgRegisterOracle) GetTrustedBlockHeight() int64 {
	if m != nil {
		return m.TrustedBlockHeight
	}
	return 0
}

func (m *MsgRegisterOracle) GetTrustedBlockHash() []byte {
	if m != nil {
		return m.TrustedBlockHash
	}
	return nil
}

func (m *MsgRegisterOracle) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// MsgRegisterOracleResponse defines the Msg/RegisterOracle response type.
type MsgRegisterOracleResponse struct {
}

func (m *MsgRegisterOracleResponse) Reset()         { *m = MsgRegisterOracleResponse{} }
func (m *MsgRegisterOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOracleResponse) ProtoMessage()    {}
func (*MsgRegisterOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4592444ae79a4d4, []int{1}
}
func (m *MsgRegisterOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOracleResponse.Merge(m, src)
}
func (m *MsgRegisterOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOracleResponse proto.InternalMessageInfo

// MsgVoteOracleRegistration defines the Msg/VoteOracleRegistration request type.
type MsgVoteOracleRegistration struct {
	OracleRegistrationVote *OracleRegistrationVote `protobuf:"bytes,1,opt,name=oracle_registration_vote,json=oracleRegistrationVote,proto3" json:"oracle_registration_vote,omitempty"`
	Signature              []byte                  `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgVoteOracleRegistration) Reset()         { *m = MsgVoteOracleRegistration{} }
func (m *MsgVoteOracleRegistration) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOracleRegistration) ProtoMessage()    {}
func (*MsgVoteOracleRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4592444ae79a4d4, []int{2}
}
func (m *MsgVoteOracleRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOracleRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOracleRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOracleRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOracleRegistration.Merge(m, src)
}
func (m *MsgVoteOracleRegistration) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOracleRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOracleRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOracleRegistration proto.InternalMessageInfo

func (m *MsgVoteOracleRegistration) GetOracleRegistrationVote() *OracleRegistrationVote {
	if m != nil {
		return m.OracleRegistrationVote
	}
	return nil
}

func (m *MsgVoteOracleRegistration) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// MsgVoteOracleRegistrationResponse defines the Msg/VoteOracleRegistration response type.
type MsgVoteOracleRegistrationResponse struct {
}

func (m *MsgVoteOracleRegistrationResponse) Reset()         { *m = MsgVoteOracleRegistrationResponse{} }
func (m *MsgVoteOracleRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOracleRegistrationResponse) ProtoMessage()    {}
func (*MsgVoteOracleRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4592444ae79a4d4, []int{3}
}
func (m *MsgVoteOracleRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOracleRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOracleRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOracleRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOracleRegistrationResponse.Merge(m, src)
}
func (m *MsgVoteOracleRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOracleRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOracleRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOracleRegistrationResponse proto.InternalMessageInfo

// MsgUpgradeOracle defines the Msg/UpgradeOracle request type.
type MsgUpgradeOracle struct {
	UniqueId               string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	OracleAddress          string `protobuf:"bytes,2,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	NodePubKey             []byte `protobuf:"bytes,3,opt,name=node_pub_key,json=nodePubKey,proto3" json:"node_pub_key,omitempty"`
	NodePubKeyRemoteReport []byte `protobuf:"bytes,4,opt,name=node_pub_key_remote_report,json=nodePubKeyRemoteReport,proto3" json:"node_pub_key_remote_report,omitempty"`
	TrustedBlockHeight     int64  `protobuf:"varint,5,opt,name=trusted_block_height,json=trustedBlockHeight,proto3" json:"trusted_block_height,omitempty"`
	TrustedBlockHash       []byte `protobuf:"bytes,6,opt,name=trusted_block_hash,json=trustedBlockHash,proto3" json:"trusted_block_hash,omitempty"`
	Nonce                  []byte `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgUpgradeOracle) Reset()         { *m = MsgUpgradeOracle{} }
func (m *MsgUpgradeOracle) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeOracle) ProtoMessage()    {}
func (*MsgUpgradeOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4592444ae79a4d4, []int{4}
}
func (m *MsgUpgradeOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeOracle.Merge(m, src)
}
func (m *MsgUpgradeOracle) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeOracle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeOracle proto.InternalMessageInfo

func (m *MsgUpgradeOracle) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *MsgUpgradeOracle) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *MsgUpgradeOracle) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *MsgUpgradeOracle) GetNodePubKeyRemoteReport() []byte {
	if m != nil {
		return m.NodePubKeyRemoteReport
	}
	return nil
}

func (m *MsgUpgradeOracle) GetTrustedBlockHeight() int64 {
	if m != nil {
		return m.TrustedBlockHeight
	}
	return 0
}

func (m *MsgUpgradeOracle) GetTrustedBlockHash() []byte {
	if m != nil {
		return m.TrustedBlockHash
	}
	return nil
}

func (m *MsgUpgradeOracle) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// MsgUpgradeOracleResponse defines the Msg/UpgradeOracle response type.
type MsgUpgradeOracleResponse struct {
}

func (m *MsgUpgradeOracleResponse) Reset()         { *m = MsgUpgradeOracleResponse{} }
func (m *MsgUpgradeOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeOracleResponse) ProtoMessage()    {}
func (*MsgUpgradeOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4592444ae79a4d4, []int{5}
}
func (m *MsgUpgradeOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeOracleResponse.Merge(m, src)
}
func (m *MsgUpgradeOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeOracleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterOracle)(nil), "panacea.oracle.v2alpha2.MsgRegisterOracle")
	proto.RegisterType((*MsgRegisterOracleResponse)(nil), "panacea.oracle.v2alpha2.MsgRegisterOracleResponse")
	proto.RegisterType((*MsgVoteOracleRegistration)(nil), "panacea.oracle.v2alpha2.MsgVoteOracleRegistration")
	proto.RegisterType((*MsgVoteOracleRegistrationResponse)(nil), "panacea.oracle.v2alpha2.MsgVoteOracleRegistrationResponse")
	proto.RegisterType((*MsgUpgradeOracle)(nil), "panacea.oracle.v2alpha2.MsgUpgradeOracle")
	proto.RegisterType((*MsgUpgradeOracleResponse)(nil), "panacea.oracle.v2alpha2.MsgUpgradeOracleResponse")
}

func init() { proto.RegisterFile("panacea/oracle/v2alpha2/tx.proto", fileDescriptor_c4592444ae79a4d4) }

var fileDescriptor_c4592444ae79a4d4 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xe4, 0x6b, 0x3f, 0xb2, 0xa4, 0x55, 0x59, 0x45, 0xc1, 0xb8, 0xc8, 0x0a, 0x81,
	0x4a, 0x01, 0x81, 0x0d, 0xe6, 0xd6, 0x1b, 0x3d, 0x81, 0x20, 0x02, 0x59, 0x82, 0x03, 0x17, 0x6b,
	0x63, 0x8f, 0xd6, 0xab, 0x26, 0x5e, 0xb3, 0xbb, 0xae, 0x9a, 0x37, 0xe0, 0xc8, 0x43, 0x70, 0x82,
	0x17, 0xe1, 0xd8, 0x23, 0x47, 0x94, 0x3c, 0x01, 0x6f, 0x80, 0xbc, 0xb6, 0xdb, 0x26, 0xa9, 0xa3,
	0x72, 0xe7, 0xb6, 0xf9, 0xff, 0x7f, 0x33, 0xb3, 0x99, 0x1d, 0x0f, 0xea, 0xa7, 0x24, 0x21, 0x21,
	0x10, 0x97, 0x0b, 0x12, 0x4e, 0xc0, 0x3d, 0xf1, 0xc8, 0x24, 0x8d, 0x89, 0xe7, 0xaa, 0x53, 0x27,
	0x15, 0x5c, 0x71, 0x7c, 0xbb, 0x24, 0x9c, 0x82, 0x70, 0x2a, 0xc2, 0x7a, 0x50, 0x17, 0x5a, 0x82,
	0x3a, 0xdc, 0x3a, 0xa8, 0xa3, 0x28, 0x24, 0x20, 0x99, 0x2c, 0xb1, 0x2e, 0xe5, 0x94, 0xeb, 0xa3,
	0x9b, 0x9f, 0x0a, 0x75, 0xf0, 0xbd, 0x89, 0x6e, 0x8d, 0x24, 0xf5, 0x81, 0x32, 0xa9, 0x40, 0xbc,
	0xd5, 0x29, 0xf0, 0x3e, 0x6a, 0x67, 0x09, 0xfb, 0x94, 0x41, 0xc0, 0x22, 0xd3, 0xe8, 0x1b, 0xc3,
	0xb6, 0x7f, 0xa3, 0x10, 0x5e, 0x45, 0xf8, 0x00, 0xed, 0x16, 0x95, 0x02, 0x12, 0x45, 0x02, 0xa4,
	0x34, 0x9b, 0x9a, 0xd8, 0x29, 0xd4, 0x17, 0x85, 0x88, 0xfb, 0xa8, 0x93, 0xf0, 0x08, 0x82, 0x34,
	0x1b, 0x07, 0xc7, 0x30, 0x33, 0x5b, 0x7d, 0x63, 0xd8, 0xf1, 0x51, 0xae, 0xbd, 0xcb, 0xc6, 0xaf,
	0x61, 0x86, 0x0f, 0x91, 0x75, 0x99, 0x08, 0x04, 0x4c, 0xb9, 0x82, 0x40, 0x40, 0xca, 0x85, 0x32,
	0xff, 0xd3, 0x7c, 0xef, 0x82, 0xf7, 0xb5, 0xed, 0x6b, 0x17, 0x3f, 0x45, 0x5d, 0x25, 0x32, 0xa9,
	0x20, 0x0a, 0xc6, 0x13, 0x1e, 0x1e, 0x07, 0x31, 0x30, 0x1a, 0x2b, 0x73, 0xab, 0x6f, 0x0c, 0x5b,
	0x3e, 0x2e, 0xbd, 0xa3, 0xdc, 0x7a, 0xa9, 0x1d, 0xfc, 0x18, 0xe1, 0x95, 0x08, 0x22, 0x63, 0x73,
	0x5b, 0x57, 0xd9, 0x5b, 0xe2, 0x89, 0x8c, 0x71, 0x17, 0x6d, 0x25, 0x3c, 0x09, 0xc1, 0xfc, 0x5f,
	0x03, 0xc5, 0x8f, 0xc1, 0x3e, 0xba, 0xb3, 0xd6, 0x2c, 0x1f, 0x64, 0xca, 0x13, 0x09, 0x83, 0xaf,
	0x86, 0x76, 0x3f, 0x70, 0x05, 0x95, 0x93, 0x73, 0x82, 0x28, 0xc6, 0x13, 0xcc, 0x90, 0x59, 0x76,
	0x4d, 0x5c, 0x92, 0x83, 0x13, 0xae, 0x40, 0x77, 0xf8, 0xa6, 0xe7, 0x3a, 0x35, 0x73, 0xe0, 0xac,
	0xa7, 0xcb, 0x8b, 0xf8, 0x3d, 0x7e, 0xa5, 0x8e, 0xef, 0xa2, 0xb6, 0x64, 0x34, 0x21, 0x2a, 0x13,
	0xa0, 0xdf, 0xa6, 0xe3, 0x5f, 0x08, 0x83, 0xfb, 0xe8, 0x5e, 0xed, 0x2d, 0xcf, 0xff, 0xcb, 0xb7,
	0x26, 0xda, 0x1b, 0x49, 0xfa, 0x3e, 0xa5, 0x82, 0x44, 0xf0, 0x6f, 0x2a, 0x36, 0x4e, 0x85, 0x85,
	0xcc, 0xd5, 0x5e, 0x55, 0x8d, 0xf4, 0x7e, 0x37, 0x51, 0x6b, 0x24, 0x29, 0x4e, 0xd1, 0xee, 0xca,
	0x37, 0xf6, 0xa8, 0xf6, 0xb9, 0xd7, 0x46, 0xcc, 0xf2, 0xae, 0xcf, 0x56, 0x95, 0xf1, 0x67, 0x03,
	0xf5, 0x6a, 0x66, 0x71, 0x63, 0xba, 0xab, 0x63, 0xac, 0xc3, 0xbf, 0x8f, 0x39, 0xbf, 0xca, 0x14,
	0xed, 0x2c, 0x4f, 0xd2, 0xc3, 0x4d, 0xc9, 0x96, 0x50, 0xeb, 0xd9, 0xb5, 0xd1, 0xaa, 0xdc, 0xd1,
	0x9b, 0x1f, 0x73, 0xdb, 0x38, 0x9b, 0xdb, 0xc6, 0xaf, 0xb9, 0x6d, 0x7c, 0x59, 0xd8, 0x8d, 0xb3,
	0x85, 0xdd, 0xf8, 0xb9, 0xb0, 0x1b, 0x1f, 0x3d, 0xca, 0x54, 0x9c, 0x8d, 0x9d, 0x90, 0x4f, 0xdd,
	0x29, 0x44, 0x2c, 0x7f, 0x72, 0xb7, 0xcc, 0xff, 0x24, 0xe4, 0x22, 0x5f, 0x9e, 0xee, 0x69, 0xb5,
	0x48, 0xd5, 0x2c, 0x05, 0x39, 0xde, 0xd6, 0x8b, 0xf2, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0xcd, 0xc7, 0x49, 0xc8, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterOracle defines a method for registration of oracle.
	RegisterOracle(ctx context.Context, in *MsgRegisterOracle, opts ...grpc.CallOption) (*MsgRegisterOracleResponse, error)
	// VoteOracleRegistration  defines a method for voting registration of oracle.
	VoteOracleRegistration(ctx context.Context, in *MsgVoteOracleRegistration, opts ...grpc.CallOption) (*MsgVoteOracleRegistrationResponse, error)
	// UpgradeOracle defines a method for upgrade of oracle.
	UpgradeOracle(ctx context.Context, in *MsgUpgradeOracle, opts ...grpc.CallOption) (*MsgUpgradeOracleResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOracle(ctx context.Context, in *MsgRegisterOracle, opts ...grpc.CallOption) (*MsgRegisterOracleResponse, error) {
	out := new(MsgRegisterOracleResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Msg/RegisterOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOracleRegistration(ctx context.Context, in *MsgVoteOracleRegistration, opts ...grpc.CallOption) (*MsgVoteOracleRegistrationResponse, error) {
	out := new(MsgVoteOracleRegistrationResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Msg/VoteOracleRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpgradeOracle(ctx context.Context, in *MsgUpgradeOracle, opts ...grpc.CallOption) (*MsgUpgradeOracleResponse, error) {
	out := new(MsgUpgradeOracleResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Msg/UpgradeOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterOracle defines a method for registration of oracle.
	RegisterOracle(context.Context, *MsgRegisterOracle) (*MsgRegisterOracleResponse, error)
	// VoteOracleRegistration  defines a method for voting registration of oracle.
	VoteOracleRegistration(context.Context, *MsgVoteOracleRegistration) (*MsgVoteOracleRegistrationResponse, error)
	// UpgradeOracle defines a method for upgrade of oracle.
	UpgradeOracle(context.Context, *MsgUpgradeOracle) (*MsgUpgradeOracleResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOracle(ctx context.Context, req *MsgRegisterOracle) (*MsgRegisterOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOracle not implemented")
}
func (*UnimplementedMsgServer) VoteOracleRegistration(ctx context.Context, req *MsgVoteOracleRegistration) (*MsgVoteOracleRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOracleRegistration not implemented")
}
func (*UnimplementedMsgServer) UpgradeOracle(ctx context.Context, req *MsgUpgradeOracle) (*MsgUpgradeOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeOracle not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Msg/RegisterOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOracle(ctx, req.(*MsgRegisterOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOracleRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOracleRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOracleRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Msg/VoteOracleRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOracleRegistration(ctx, req.(*MsgVoteOracleRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpgradeOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradeOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpgradeOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Msg/UpgradeOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpgradeOracle(ctx, req.(*MsgUpgradeOracle))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.oracle.v2alpha2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOracle",
			Handler:    _Msg_RegisterOracle_Handler,
		},
		{
			MethodName: "VoteOracleRegistration",
			Handler:    _Msg_VoteOracleRegistration_Handler,
		},
		{
			MethodName: "UpgradeOracle",
			Handler:    _Msg_UpgradeOracle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/oracle/v2alpha2/tx.proto",
}

func (m *MsgRegisterOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedBlockHash) > 0 {
		i -= len(m.TrustedBlockHash)
		copy(dAtA[i:], m.TrustedBlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrustedBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.TrustedBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrustedBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NodePubKeyRemoteReport) > 0 {
		i -= len(m.NodePubKeyRemoteReport)
		copy(dAtA[i:], m.NodePubKeyRemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePubKeyRemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodePubKey) > 0 {
		i -= len(m.NodePubKey)
		copy(dAtA[i:], m.NodePubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOracleRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOracleRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOracleRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.OracleRegistrationVote != nil {
		{
			size, err := m.OracleRegistrationVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOracleRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOracleRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOracleRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedBlockHash) > 0 {
		i -= len(m.TrustedBlockHash)
		copy(dAtA[i:], m.TrustedBlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrustedBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.TrustedBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrustedBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NodePubKeyRemoteReport) > 0 {
		i -= len(m.NodePubKeyRemoteReport)
		copy(dAtA[i:], m.NodePubKeyRemoteReport)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePubKeyRemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodePubKey) > 0 {
		i -= len(m.NodePubKey)
		copy(dAtA[i:], m.NodePubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePubKeyRemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrustedBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.TrustedBlockHeight))
	}
	l = len(m.TrustedBlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOracleRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleRegistrationVote != nil {
		l = m.OracleRegistrationVote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteOracleRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgradeOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NodePubKeyRemoteReport)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TrustedBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.TrustedBlockHeight))
	}
	l = len(m.TrustedBlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpgradeOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKey = append(m.NodePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKey == nil {
				m.NodePubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKeyRemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKeyRemoteReport = append(m.NodePubKeyRemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKeyRemoteReport == nil {
				m.NodePubKeyRemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHeight", wireType)
			}
			m.TrustedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedBlockHash = append(m.TrustedBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TrustedBlockHash == nil {
				m.TrustedBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOracleRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOracleRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOracleRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRegistrationVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleRegistrationVote == nil {
				m.OracleRegistrationVote = &OracleRegistrationVote{}
			}
			if err := m.OracleRegistrationVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOracleRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOracleRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOracleRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKey = append(m.NodePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKey == nil {
				m.NodePubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKeyRemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKeyRemoteReport = append(m.NodePubKeyRemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKeyRemoteReport == nil {
				m.NodePubKeyRemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHeight", wireType)
			}
			m.TrustedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedBlockHash = append(m.TrustedBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TrustedBlockHash == nil {
				m.TrustedBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
