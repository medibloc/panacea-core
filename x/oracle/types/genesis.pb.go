// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2alpha2/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the oracle module's genesis state.
type GenesisState struct {
	Oracles                 []Oracle                 `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles"`
	OracleRegistrations     []OracleRegistration     `protobuf:"bytes,2,rep,name=oracle_registrations,json=oracleRegistrations,proto3" json:"oracle_registrations"`
	OracleRegistrationVotes []OracleRegistrationVote `protobuf:"bytes,3,rep,name=oracle_registration_votes,json=oracleRegistrationVotes,proto3" json:"oracle_registration_votes"`
	Params                  Params                   `protobuf:"bytes,4,opt,name=params,proto3" json:"params"`
	UpgradeOracleInfo       UpgradeOracleInfo        `protobuf:"bytes,5,opt,name=upgrade_oracle_info,json=upgradeOracleInfo,proto3" json:"upgrade_oracle_info"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_138242ba6860f444, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetOracles() []Oracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *GenesisState) GetOracleRegistrations() []OracleRegistration {
	if m != nil {
		return m.OracleRegistrations
	}
	return nil
}

func (m *GenesisState) GetOracleRegistrationVotes() []OracleRegistrationVote {
	if m != nil {
		return m.OracleRegistrationVotes
	}
	return nil
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetUpgradeOracleInfo() UpgradeOracleInfo {
	if m != nil {
		return m.UpgradeOracleInfo
	}
	return UpgradeOracleInfo{}
}

// Params defines the oracle module's params.
type Params struct {
	// Oracle public key is a pair with an oracle private key which is generated in SGX by the first oracle.
	// This key is used to encrypt data, which enables to decrypt and verify the data securely only in SGX
	OraclePublicKey []byte `protobuf:"bytes,1,opt,name=oracle_public_key,json=oraclePublicKey,proto3" json:"oracle_public_key,omitempty"`
	// Anyone can validate that the oracle key pair is generated in SGX using this oracle key remote report.
	OraclePubKeyRemoteReport []byte `protobuf:"bytes,2,opt,name=oracle_pub_key_remote_report,json=oraclePubKeyRemoteReport,proto3" json:"oracle_pub_key_remote_report,omitempty"`
	// The unique ID of current version of oracle.
	UniqueId    string      `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	VoteParams  VoteParams  `protobuf:"bytes,4,opt,name=vote_params,json=voteParams,proto3" json:"vote_params"`
	SlashParams SlashParams `protobuf:"bytes,5,opt,name=slash_params,json=slashParams,proto3" json:"slash_params"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_138242ba6860f444, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOraclePublicKey() []byte {
	if m != nil {
		return m.OraclePublicKey
	}
	return nil
}

func (m *Params) GetOraclePubKeyRemoteReport() []byte {
	if m != nil {
		return m.OraclePubKeyRemoteReport
	}
	return nil
}

func (m *Params) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *Params) GetVoteParams() VoteParams {
	if m != nil {
		return m.VoteParams
	}
	return VoteParams{}
}

func (m *Params) GetSlashParams() SlashParams {
	if m != nil {
		return m.SlashParams
	}
	return SlashParams{}
}

// Vote Params defines the params related to voting.
type VoteParams struct {
	VotingPeriod time.Duration                          `protobuf:"bytes,1,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period" yaml:"voting_period"`
	JailPeriod   time.Duration                          `protobuf:"bytes,2,opt,name=jail_period,json=jailPeriod,proto3,stdduration" json:"jail_period" yaml:"jail_period"`
	Quorum       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=quorum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quorum"`
}

func (m *VoteParams) Reset()         { *m = VoteParams{} }
func (m *VoteParams) String() string { return proto.CompactTextString(m) }
func (*VoteParams) ProtoMessage()    {}
func (*VoteParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_138242ba6860f444, []int{2}
}
func (m *VoteParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteParams.Merge(m, src)
}
func (m *VoteParams) XXX_Size() int {
	return m.Size()
}
func (m *VoteParams) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteParams.DiscardUnknown(m)
}

var xxx_messageInfo_VoteParams proto.InternalMessageInfo

func (m *VoteParams) GetVotingPeriod() time.Duration {
	if m != nil {
		return m.VotingPeriod
	}
	return 0
}

func (m *VoteParams) GetJailPeriod() time.Duration {
	if m != nil {
		return m.JailPeriod
	}
	return 0
}

// SlashParams defines the params related to slashing of oracle.
type SlashParams struct {
	SlashFractionDowntime github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=slash_fraction_downtime,json=slashFractionDowntime,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_downtime"`
	SlashFractionForgery  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=slash_fraction_forgery,json=slashFractionForgery,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_fraction_forgery"`
}

func (m *SlashParams) Reset()         { *m = SlashParams{} }
func (m *SlashParams) String() string { return proto.CompactTextString(m) }
func (*SlashParams) ProtoMessage()    {}
func (*SlashParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_138242ba6860f444, []int{3}
}
func (m *SlashParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashParams.Merge(m, src)
}
func (m *SlashParams) XXX_Size() int {
	return m.Size()
}
func (m *SlashParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashParams.DiscardUnknown(m)
}

var xxx_messageInfo_SlashParams proto.InternalMessageInfo

// UpgradeOracleInfo defines the info of oracle upgrade, which includes the target height of upgrade and unique ID of the new version of oracle
type UpgradeOracleInfo struct {
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Height   int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *UpgradeOracleInfo) Reset()         { *m = UpgradeOracleInfo{} }
func (m *UpgradeOracleInfo) String() string { return proto.CompactTextString(m) }
func (*UpgradeOracleInfo) ProtoMessage()    {}
func (*UpgradeOracleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_138242ba6860f444, []int{4}
}
func (m *UpgradeOracleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeOracleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeOracleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpgradeOracleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeOracleInfo.Merge(m, src)
}
func (m *UpgradeOracleInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeOracleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeOracleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeOracleInfo proto.InternalMessageInfo

func (m *UpgradeOracleInfo) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *UpgradeOracleInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "panacea.oracle.v2alpha2.GenesisState")
	proto.RegisterType((*Params)(nil), "panacea.oracle.v2alpha2.Params")
	proto.RegisterType((*VoteParams)(nil), "panacea.oracle.v2alpha2.VoteParams")
	proto.RegisterType((*SlashParams)(nil), "panacea.oracle.v2alpha2.SlashParams")
	proto.RegisterType((*UpgradeOracleInfo)(nil), "panacea.oracle.v2alpha2.UpgradeOracleInfo")
}

func init() {
	proto.RegisterFile("panacea/oracle/v2alpha2/genesis.proto", fileDescriptor_138242ba6860f444)
}

var fileDescriptor_138242ba6860f444 = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xd1, 0x6e, 0xd3, 0x3a,
	0x18, 0x6e, 0xda, 0x9d, 0x9e, 0x33, 0xb7, 0x47, 0x47, 0xf3, 0x7a, 0xb6, 0x6c, 0xa0, 0xb4, 0x2a,
	0x03, 0x4d, 0x43, 0x4b, 0xa4, 0x72, 0x87, 0x04, 0x48, 0xd5, 0x34, 0x18, 0x03, 0x31, 0x65, 0x82,
	0x8b, 0xdd, 0x64, 0x6e, 0xe2, 0xa6, 0x66, 0x49, 0x9c, 0xd9, 0x4e, 0xa1, 0x6f, 0x81, 0xb8, 0xe2,
	0x21, 0x78, 0x90, 0x71, 0xb7, 0x4b, 0x04, 0xd2, 0x40, 0xdb, 0x1b, 0xf0, 0x04, 0x28, 0xb6, 0xbb,
	0xb5, 0xdd, 0xca, 0xb4, 0xab, 0xc4, 0xff, 0xff, 0xfd, 0xdf, 0xf7, 0xfb, 0xb3, 0x7f, 0x83, 0xbb,
	0x29, 0x4a, 0x90, 0x8f, 0x91, 0x43, 0x19, 0xf2, 0x23, 0xec, 0xf4, 0x5b, 0x28, 0x4a, 0x7b, 0xa8,
	0xe5, 0x84, 0x38, 0xc1, 0x9c, 0x70, 0x3b, 0x65, 0x54, 0x50, 0xb8, 0xa8, 0x61, 0xb6, 0x82, 0xd9,
	0x43, 0xd8, 0x72, 0x2d, 0xa4, 0x21, 0x95, 0x18, 0x27, 0xff, 0x53, 0xf0, 0x65, 0x2b, 0xa4, 0x34,
	0x8c, 0xb0, 0x23, 0x57, 0x9d, 0xac, 0xeb, 0x04, 0x19, 0x43, 0x82, 0xd0, 0x44, 0xe7, 0xeb, 0x93,
	0x79, 0x41, 0x62, 0xcc, 0x05, 0x8a, 0x53, 0x0d, 0x58, 0x99, 0xd6, 0x96, 0xd6, 0x97, 0xa8, 0xe6,
	0x97, 0x12, 0xa8, 0x3e, 0x55, 0x7d, 0xee, 0x0a, 0x24, 0x30, 0x7c, 0x02, 0xfe, 0x56, 0x00, 0x6e,
	0x1a, 0x8d, 0xd2, 0x6a, 0xa5, 0x55, 0xb7, 0xa7, 0x34, 0x6e, 0xbf, 0x92, 0xeb, 0xf6, 0xcc, 0xd1,
	0x49, 0xbd, 0xe0, 0x0e, 0xab, 0x60, 0x00, 0x6a, 0xea, 0xd7, 0x63, 0x38, 0x24, 0x5c, 0xa8, 0xae,
	0xb9, 0x59, 0x94, 0x6c, 0xf7, 0xaf, 0x61, 0x73, 0x47, 0x6a, 0x34, 0xf3, 0x3c, 0xbd, 0x94, 0xe1,
	0xf0, 0x10, 0x2c, 0x5d, 0xa1, 0xe2, 0xf5, 0xa9, 0xc0, 0xdc, 0x2c, 0x49, 0x29, 0xe7, 0x06, 0x52,
	0x6f, 0xa8, 0x18, 0x6e, 0x64, 0x91, 0x5e, 0x99, 0xe5, 0xf0, 0x11, 0x28, 0xa7, 0x88, 0xa1, 0x98,
	0x9b, 0x33, 0x0d, 0xe3, 0x8f, 0xc6, 0xec, 0x48, 0x98, 0xe6, 0xd3, 0x45, 0x70, 0x1f, 0xcc, 0x67,
	0x69, 0xc8, 0x50, 0x80, 0x3d, 0xdd, 0x39, 0x49, 0xba, 0xd4, 0xfc, 0x4b, 0x72, 0xad, 0x4d, 0xe5,
	0x7a, 0xad, 0x6a, 0x54, 0xcb, 0x5b, 0x49, 0x97, 0x6a, 0xda, 0xb9, 0x6c, 0x32, 0xd1, 0xfc, 0x5c,
	0x04, 0x65, 0x25, 0x0d, 0xd7, 0xc0, 0x9c, 0x16, 0x49, 0xb3, 0x4e, 0x44, 0x7c, 0xef, 0x00, 0x0f,
	0x4c, 0xa3, 0x61, 0xac, 0x56, 0xdd, 0xff, 0x54, 0x62, 0x47, 0xc6, 0xb7, 0xf1, 0x00, 0x3e, 0x06,
	0xb7, 0x2f, 0xb0, 0x39, 0xd0, 0x63, 0x38, 0xa6, 0x22, 0x77, 0x36, 0xa5, 0x4c, 0x98, 0x45, 0x59,
	0x66, 0x9e, 0x97, 0x6d, 0xe3, 0x81, 0x2b, 0x01, 0xae, 0xcc, 0xc3, 0x5b, 0x60, 0x36, 0x4b, 0xc8,
	0x61, 0x86, 0x3d, 0x12, 0x98, 0xa5, 0x86, 0xb1, 0x3a, 0xeb, 0xfe, 0xa3, 0x02, 0x5b, 0x01, 0x7c,
	0x0e, 0x2a, 0xf9, 0x99, 0x78, 0x63, 0xce, 0xdd, 0x99, 0xba, 0xdb, 0xdc, 0xe9, 0x31, 0xf7, 0x40,
	0xff, 0x3c, 0x02, 0x5f, 0x82, 0x2a, 0x8f, 0x10, 0xef, 0x0d, 0xc9, 0x94, 0x75, 0x2b, 0x53, 0xc9,
	0x76, 0x73, 0xf0, 0x18, 0x5b, 0x85, 0x5f, 0x84, 0x9a, 0x1f, 0x8b, 0x00, 0x5c, 0xe8, 0xc1, 0x7d,
	0xf0, 0x6f, 0x9f, 0x0a, 0x92, 0x84, 0x5e, 0x8a, 0x19, 0xa1, 0x81, 0xb4, 0xab, 0xd2, 0x5a, 0xb2,
	0xd5, 0xa0, 0xd9, 0xc3, 0x41, 0xb3, 0x37, 0xf4, 0x20, 0xb6, 0x1b, 0x39, 0xe7, 0xaf, 0x93, 0x7a,
	0x6d, 0x80, 0xe2, 0xe8, 0x61, 0x73, 0xac, 0xba, 0xf9, 0xe9, 0x47, 0xdd, 0x70, 0xab, 0x2a, 0xb6,
	0x23, 0x43, 0x70, 0x0f, 0x54, 0xde, 0x22, 0x12, 0x0d, 0xf9, 0x8b, 0xd7, 0xf1, 0x5b, 0x9a, 0x1f,
	0x2a, 0xfe, 0x91, 0x5a, 0xc5, 0x0e, 0xf2, 0x88, 0xe6, 0xde, 0x04, 0xe5, 0xc3, 0x8c, 0xb2, 0x2c,
	0x56, 0x27, 0xd0, 0xb6, 0xf3, 0xda, 0x6f, 0x27, 0xf5, 0x7b, 0x21, 0x11, 0xbd, 0xac, 0x63, 0xfb,
	0x34, 0x76, 0x7c, 0xca, 0x63, 0xca, 0xf5, 0x67, 0x9d, 0x07, 0x07, 0x8e, 0x18, 0xa4, 0x98, 0xdb,
	0x1b, 0xd8, 0x77, 0x75, 0x75, 0xf3, 0xbb, 0x01, 0x2a, 0x23, 0xbe, 0xc1, 0x2e, 0x58, 0x54, 0x9e,
	0x77, 0x19, 0xf2, 0xe5, 0x88, 0x05, 0xf4, 0x5d, 0x92, 0xbf, 0x35, 0xd2, 0x9f, 0x9b, 0x0b, 0xfd,
	0x2f, 0xe9, 0x36, 0x35, 0xdb, 0x86, 0x26, 0x83, 0x01, 0x58, 0x98, 0xd0, 0xe9, 0x52, 0x16, 0x62,
	0x36, 0x90, 0x36, 0xdd, 0x5c, 0xa6, 0x36, 0x26, 0xb3, 0xa9, 0xb8, 0x9a, 0xcf, 0xc0, 0xdc, 0xa5,
	0x79, 0x1a, 0xbf, 0xbf, 0xc6, 0xc4, 0xfd, 0x5d, 0x00, 0xe5, 0x1e, 0x26, 0x61, 0x4f, 0x8d, 0x41,
	0xc9, 0xd5, 0xab, 0xf6, 0x8b, 0xa3, 0x53, 0xcb, 0x38, 0x3e, 0xb5, 0x8c, 0x9f, 0xa7, 0x96, 0xf1,
	0xe1, 0xcc, 0x2a, 0x1c, 0x9f, 0x59, 0x85, 0xaf, 0x67, 0x56, 0x61, 0xaf, 0x35, 0xd2, 0x61, 0x8c,
	0x03, 0xd2, 0x89, 0xa8, 0xef, 0xe8, 0x2b, 0xba, 0xee, 0x53, 0x96, 0xbf, 0xc4, 0xce, 0xfb, 0xe1,
	0xab, 0x2c, 0x3b, 0xee, 0x94, 0xe5, 0xe1, 0x3f, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xee, 0x52,
	0x82, 0x74, 0x4b, 0x06, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UpgradeOracleInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.OracleRegistrationVotes) > 0 {
		for iNdEx := len(m.OracleRegistrationVotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleRegistrationVotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OracleRegistrations) > 0 {
		for iNdEx := len(m.OracleRegistrations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleRegistrations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Oracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SlashParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.VoteParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OraclePubKeyRemoteReport) > 0 {
		i -= len(m.OraclePubKeyRemoteReport)
		copy(dAtA[i:], m.OraclePubKeyRemoteReport)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OraclePubKeyRemoteReport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OraclePublicKey) > 0 {
		i -= len(m.OraclePublicKey)
		copy(dAtA[i:], m.OraclePublicKey)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.OraclePublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quorum.Size()
		i -= size
		if _, err := m.Quorum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.JailPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.JailPeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGenesis(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VotingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintGenesis(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SlashParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashFractionForgery.Size()
		i -= size
		if _, err := m.SlashFractionForgery.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.SlashFractionDowntime.Size()
		i -= size
		if _, err := m.SlashFractionDowntime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpgradeOracleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeOracleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpgradeOracleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for _, e := range m.Oracles {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OracleRegistrations) > 0 {
		for _, e := range m.OracleRegistrations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OracleRegistrationVotes) > 0 {
		for _, e := range m.OracleRegistrationVotes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.UpgradeOracleInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OraclePublicKey)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.OraclePubKeyRemoteReport)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.VoteParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *VoteParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.JailPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Quorum.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *SlashParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SlashFractionDowntime.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SlashFractionForgery.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *UpgradeOracleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, Oracle{})
			if err := m.Oracles[len(m.Oracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRegistrations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleRegistrations = append(m.OracleRegistrations, OracleRegistration{})
			if err := m.OracleRegistrations[len(m.OracleRegistrations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRegistrationVotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleRegistrationVotes = append(m.OracleRegistrationVotes, OracleRegistrationVote{})
			if err := m.OracleRegistrationVotes[len(m.OracleRegistrationVotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeOracleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UpgradeOracleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OraclePublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OraclePublicKey = append(m.OraclePublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.OraclePublicKey == nil {
				m.OraclePublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OraclePubKeyRemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OraclePubKeyRemoteReport = append(m.OraclePubKeyRemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.OraclePubKeyRemoteReport == nil {
				m.OraclePubKeyRemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.JailPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quorum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionDowntime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionDowntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFractionForgery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFractionForgery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeOracleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeOracleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeOracleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
