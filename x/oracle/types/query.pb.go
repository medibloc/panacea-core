// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2alpha2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOraclesRequest is the request type for the Query/Oracles RPC method.
type QueryOraclesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOraclesRequest) Reset()         { *m = QueryOraclesRequest{} }
func (m *QueryOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOraclesRequest) ProtoMessage()    {}
func (*QueryOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{0}
}
func (m *QueryOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclesRequest.Merge(m, src)
}
func (m *QueryOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclesRequest proto.InternalMessageInfo

func (m *QueryOraclesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOracleResponse is the response type for the Query/Oracles RPC method.
type QueryOraclesResponse struct {
	Oracles    []*Oracle           `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOraclesResponse) Reset()         { *m = QueryOraclesResponse{} }
func (m *QueryOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOraclesResponse) ProtoMessage()    {}
func (*QueryOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{1}
}
func (m *QueryOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclesResponse.Merge(m, src)
}
func (m *QueryOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclesResponse proto.InternalMessageInfo

func (m *QueryOraclesResponse) GetOracles() []*Oracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *QueryOraclesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOracleRequest is the request type for the Query/Oracle RPC method.
type QueryOracleRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryOracleRequest) Reset()         { *m = QueryOracleRequest{} }
func (m *QueryOracleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequest) ProtoMessage()    {}
func (*QueryOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{2}
}
func (m *QueryOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequest.Merge(m, src)
}
func (m *QueryOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequest proto.InternalMessageInfo

func (m *QueryOracleRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryOracleResponse is the response type for the Query/Oracle RPC method.
type QueryOracleResponse struct {
	Oracle *Oracle `protobuf:"bytes,1,opt,name=oracle,proto3" json:"oracle,omitempty"`
}

func (m *QueryOracleResponse) Reset()         { *m = QueryOracleResponse{} }
func (m *QueryOracleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleResponse) ProtoMessage()    {}
func (*QueryOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{3}
}
func (m *QueryOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleResponse.Merge(m, src)
}
func (m *QueryOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleResponse proto.InternalMessageInfo

func (m *QueryOracleResponse) GetOracle() *Oracle {
	if m != nil {
		return m.Oracle
	}
	return nil
}

// QueryOracleRegistrationRequest is the request type for the Query/OracleRegistration RPC method.
type QueryOracleRegistrationRequest struct {
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryOracleRegistrationRequest) Reset()         { *m = QueryOracleRegistrationRequest{} }
func (m *QueryOracleRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRegistrationRequest) ProtoMessage()    {}
func (*QueryOracleRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{4}
}
func (m *QueryOracleRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRegistrationRequest.Merge(m, src)
}
func (m *QueryOracleRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRegistrationRequest proto.InternalMessageInfo

func (m *QueryOracleRegistrationRequest) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *QueryOracleRegistrationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryOracleRegistrationResponse is the response type for the Query/OracleRegistration RPC method.
type QueryOracleRegistrationResponse struct {
	OracleRegistration *OracleRegistration `protobuf:"bytes,1,opt,name=oracle_registration,json=oracleRegistration,proto3" json:"oracle_registration,omitempty"`
}

func (m *QueryOracleRegistrationResponse) Reset()         { *m = QueryOracleRegistrationResponse{} }
func (m *QueryOracleRegistrationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRegistrationResponse) ProtoMessage()    {}
func (*QueryOracleRegistrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{5}
}
func (m *QueryOracleRegistrationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRegistrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRegistrationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRegistrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRegistrationResponse.Merge(m, src)
}
func (m *QueryOracleRegistrationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRegistrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRegistrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRegistrationResponse proto.InternalMessageInfo

func (m *QueryOracleRegistrationResponse) GetOracleRegistration() *OracleRegistration {
	if m != nil {
		return m.OracleRegistration
	}
	return nil
}

// QueryOracleRegistrationVoteRequest is the request type for Query/OracleRegistrationVote RPC method.
type QueryOracleRegistrationVoteRequest struct {
	UniqueId            string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	VoterAddress        string `protobuf:"bytes,2,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	VotingTargetAddress string `protobuf:"bytes,3,opt,name=voting_target_address,json=votingTargetAddress,proto3" json:"voting_target_address,omitempty"`
}

func (m *QueryOracleRegistrationVoteRequest) Reset()         { *m = QueryOracleRegistrationVoteRequest{} }
func (m *QueryOracleRegistrationVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRegistrationVoteRequest) ProtoMessage()    {}
func (*QueryOracleRegistrationVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{6}
}
func (m *QueryOracleRegistrationVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRegistrationVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRegistrationVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRegistrationVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRegistrationVoteRequest.Merge(m, src)
}
func (m *QueryOracleRegistrationVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRegistrationVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRegistrationVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRegistrationVoteRequest proto.InternalMessageInfo

func (m *QueryOracleRegistrationVoteRequest) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *QueryOracleRegistrationVoteRequest) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *QueryOracleRegistrationVoteRequest) GetVotingTargetAddress() string {
	if m != nil {
		return m.VotingTargetAddress
	}
	return ""
}

// QueryOracleRegistrationVoteResponse is the response type for the Query/OracleRegistrationVote RPC method.
type QueryOracleRegistrationVoteResponse struct {
	OracleRegistrationVote *OracleRegistrationVote `protobuf:"bytes,1,opt,name=oracle_registration_vote,json=oracleRegistrationVote,proto3" json:"oracle_registration_vote,omitempty"`
}

func (m *QueryOracleRegistrationVoteResponse) Reset()         { *m = QueryOracleRegistrationVoteResponse{} }
func (m *QueryOracleRegistrationVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRegistrationVoteResponse) ProtoMessage()    {}
func (*QueryOracleRegistrationVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{7}
}
func (m *QueryOracleRegistrationVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRegistrationVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRegistrationVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRegistrationVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRegistrationVoteResponse.Merge(m, src)
}
func (m *QueryOracleRegistrationVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRegistrationVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRegistrationVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRegistrationVoteResponse proto.InternalMessageInfo

func (m *QueryOracleRegistrationVoteResponse) GetOracleRegistrationVote() *OracleRegistrationVote {
	if m != nil {
		return m.OracleRegistrationVote
	}
	return nil
}

// QueryOracleParamsRequest is the request type for the Query/OracleParams RPC method.
type QueryOracleParamsRequest struct {
}

func (m *QueryOracleParamsRequest) Reset()         { *m = QueryOracleParamsRequest{} }
func (m *QueryOracleParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleParamsRequest) ProtoMessage()    {}
func (*QueryOracleParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{8}
}
func (m *QueryOracleParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleParamsRequest.Merge(m, src)
}
func (m *QueryOracleParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/OracleParams RPC method.
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{9}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryOracleUpgradeInfoRequest is the request type for the Query/OracleUpgradeInfo RPC method.
type QueryOracleUpgradeInfoRequest struct {
}

func (m *QueryOracleUpgradeInfoRequest) Reset()         { *m = QueryOracleUpgradeInfoRequest{} }
func (m *QueryOracleUpgradeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleUpgradeInfoRequest) ProtoMessage()    {}
func (*QueryOracleUpgradeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{10}
}
func (m *QueryOracleUpgradeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleUpgradeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleUpgradeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleUpgradeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleUpgradeInfoRequest.Merge(m, src)
}
func (m *QueryOracleUpgradeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleUpgradeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleUpgradeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleUpgradeInfoRequest proto.InternalMessageInfo

// QueryOracleUpgradeInfoRequest is the response type for the Query/OracleUpgradeInfo RPC method.
type QueryOracleUpgradeInfoResponse struct {
	OracleUpgradeInfo *OracleUpgradeInfo `protobuf:"bytes,1,opt,name=oracle_upgrade_info,json=oracleUpgradeInfo,proto3" json:"oracle_upgrade_info,omitempty"`
}

func (m *QueryOracleUpgradeInfoResponse) Reset()         { *m = QueryOracleUpgradeInfoResponse{} }
func (m *QueryOracleUpgradeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleUpgradeInfoResponse) ProtoMessage()    {}
func (*QueryOracleUpgradeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_485af229b11a9528, []int{11}
}
func (m *QueryOracleUpgradeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleUpgradeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleUpgradeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleUpgradeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleUpgradeInfoResponse.Merge(m, src)
}
func (m *QueryOracleUpgradeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleUpgradeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleUpgradeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleUpgradeInfoResponse proto.InternalMessageInfo

func (m *QueryOracleUpgradeInfoResponse) GetOracleUpgradeInfo() *OracleUpgradeInfo {
	if m != nil {
		return m.OracleUpgradeInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryOraclesRequest)(nil), "panacea.oracle.v2alpha2.QueryOraclesRequest")
	proto.RegisterType((*QueryOraclesResponse)(nil), "panacea.oracle.v2alpha2.QueryOraclesResponse")
	proto.RegisterType((*QueryOracleRequest)(nil), "panacea.oracle.v2alpha2.QueryOracleRequest")
	proto.RegisterType((*QueryOracleResponse)(nil), "panacea.oracle.v2alpha2.QueryOracleResponse")
	proto.RegisterType((*QueryOracleRegistrationRequest)(nil), "panacea.oracle.v2alpha2.QueryOracleRegistrationRequest")
	proto.RegisterType((*QueryOracleRegistrationResponse)(nil), "panacea.oracle.v2alpha2.QueryOracleRegistrationResponse")
	proto.RegisterType((*QueryOracleRegistrationVoteRequest)(nil), "panacea.oracle.v2alpha2.QueryOracleRegistrationVoteRequest")
	proto.RegisterType((*QueryOracleRegistrationVoteResponse)(nil), "panacea.oracle.v2alpha2.QueryOracleRegistrationVoteResponse")
	proto.RegisterType((*QueryOracleParamsRequest)(nil), "panacea.oracle.v2alpha2.QueryOracleParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "panacea.oracle.v2alpha2.QueryParamsResponse")
	proto.RegisterType((*QueryOracleUpgradeInfoRequest)(nil), "panacea.oracle.v2alpha2.QueryOracleUpgradeInfoRequest")
	proto.RegisterType((*QueryOracleUpgradeInfoResponse)(nil), "panacea.oracle.v2alpha2.QueryOracleUpgradeInfoResponse")
}

func init() {
	proto.RegisterFile("panacea/oracle/v2alpha2/query.proto", fileDescriptor_485af229b11a9528)
}

var fileDescriptor_485af229b11a9528 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x5f, 0x4f, 0x13, 0x4d,
	0x14, 0xc6, 0xd9, 0x92, 0xb7, 0xc0, 0xf0, 0xbe, 0x17, 0x0c, 0xbc, 0xd8, 0xac, 0xba, 0xc5, 0x45,
	0x85, 0x40, 0xd9, 0x09, 0xab, 0x11, 0x8d, 0xde, 0xa8, 0x51, 0x43, 0x34, 0x8a, 0x8d, 0x7f, 0x12,
	0xa2, 0x69, 0xa6, 0xed, 0xb0, 0x6c, 0xd2, 0xee, 0x2c, 0x3b, 0xd3, 0x46, 0x82, 0xc4, 0x44, 0xbf,
	0x00, 0xd1, 0x0b, 0x13, 0x3f, 0x8a, 0x9f, 0xc0, 0x4b, 0x12, 0xbd, 0xf0, 0xd2, 0x50, 0x3f, 0x88,
	0xe9, 0xcc, 0x6c, 0xd9, 0xa5, 0x5d, 0x76, 0xeb, 0x5d, 0x39, 0xf3, 0x9c, 0x73, 0x7e, 0xcf, 0xd9,
	0x99, 0x13, 0xc0, 0xbc, 0x8f, 0x3d, 0x5c, 0x23, 0x18, 0xd1, 0x00, 0xd7, 0x1a, 0x04, 0xb5, 0x6d,
	0xdc, 0xf0, 0xb7, 0xb1, 0x8d, 0x76, 0x5a, 0x24, 0xd8, 0xb5, 0xfc, 0x80, 0x72, 0x0a, 0xcf, 0x28,
	0x91, 0x25, 0x45, 0x56, 0x28, 0xd2, 0x2f, 0x26, 0x65, 0x2b, 0xa1, 0x48, 0xd7, 0x2f, 0x25, 0xa9,
	0x1c, 0xe2, 0x11, 0xe6, 0x32, 0x25, 0x5b, 0xaa, 0x51, 0xd6, 0xa4, 0x0c, 0x55, 0x31, 0x23, 0xb2,
	0x3d, 0x6a, 0xaf, 0x56, 0x09, 0xc7, 0xab, 0xc8, 0xc7, 0x8e, 0xeb, 0x61, 0xee, 0x52, 0x4f, 0x69,
	0xcf, 0x39, 0x94, 0x3a, 0x0d, 0x82, 0xb0, 0xef, 0x22, 0xec, 0x79, 0x94, 0x8b, 0xc3, 0xb0, 0xd2,
	0x8c, 0x43, 0x1d, 0x2a, 0x7e, 0xa2, 0xee, 0x2f, 0x19, 0x35, 0x5f, 0x83, 0xe9, 0xa7, 0xdd, 0xaa,
	0x4f, 0x04, 0x05, 0x2b, 0x93, 0x9d, 0x16, 0x61, 0x1c, 0xde, 0x07, 0xe0, 0xb8, 0x7c, 0x41, 0x9b,
	0xd3, 0x16, 0x27, 0xed, 0xcb, 0x96, 0x64, 0xb1, 0xba, 0x2c, 0x96, 0x1c, 0x85, 0x62, 0xb1, 0x36,
	0xb0, 0x43, 0x54, 0x6e, 0x39, 0x92, 0x69, 0x7e, 0xd1, 0xc0, 0x4c, 0xbc, 0x3e, 0xf3, 0xa9, 0xc7,
	0x08, 0xbc, 0x01, 0xc6, 0xa4, 0x71, 0x56, 0xd0, 0xe6, 0x46, 0x17, 0x27, 0xed, 0xa2, 0x95, 0x30,
	0x4f, 0x4b, 0xa6, 0x96, 0x43, 0x3d, 0x7c, 0x10, 0x63, 0xcb, 0x09, 0xb6, 0x85, 0x54, 0x36, 0xd9,
	0x37, 0x06, 0x67, 0x01, 0x18, 0x61, 0x0b, 0xad, 0x17, 0xc0, 0x18, 0xae, 0xd7, 0x03, 0xc2, 0x98,
	0xf0, 0x3d, 0x51, 0x0e, 0xff, 0x34, 0x1f, 0xc7, 0x66, 0xd5, 0xb3, 0xb2, 0x06, 0xf2, 0x12, 0x4d,
	0xcd, 0x29, 0xd5, 0x89, 0x92, 0x9b, 0x2f, 0x81, 0x11, 0xab, 0xe7, 0xb8, 0x8c, 0x07, 0x02, 0x2d,
	0x64, 0x39, 0x0b, 0x26, 0x5a, 0x9e, 0xbb, 0xd3, 0x22, 0x15, 0xb7, 0xae, 0x68, 0xc6, 0x65, 0x60,
	0xbd, 0x1e, 0x05, 0xcd, 0xc5, 0x41, 0xdf, 0x81, 0x62, 0x62, 0x61, 0x05, 0xfd, 0x0a, 0x4c, 0x4b,
	0x8a, 0x4a, 0x10, 0x39, 0x56, 0x0e, 0x96, 0xd3, 0x1c, 0x44, 0x2b, 0x42, 0xda, 0x17, 0xeb, 0x7e,
	0x76, 0x33, 0x81, 0xe0, 0x05, 0xe5, 0x24, 0x93, 0xbd, 0x79, 0xf0, 0x5f, 0x9b, 0x72, 0x12, 0x54,
	0xe2, 0x26, 0xff, 0x15, 0xc1, 0xdb, 0x32, 0x06, 0x6d, 0xf0, 0x7f, 0x9b, 0x72, 0xd7, 0x73, 0x2a,
	0x1c, 0x07, 0x0e, 0xe1, 0x3d, 0xf1, 0xa8, 0x10, 0x4f, 0xcb, 0xc3, 0x67, 0xe2, 0x4c, 0xe5, 0x98,
	0x07, 0x1a, 0x98, 0x3f, 0x15, 0x4e, 0x8d, 0xc8, 0x05, 0x85, 0x01, 0x23, 0xaa, 0x74, 0xfb, 0xab,
	0x39, 0xa1, 0x21, 0xe6, 0x24, 0x4a, 0xcf, 0xd2, 0x81, 0x71, 0x53, 0x07, 0x85, 0x08, 0xd1, 0x06,
	0x0e, 0x70, 0x33, 0x7c, 0x8a, 0xbd, 0x5b, 0x17, 0x46, 0x8f, 0x6f, 0x9d, 0x2f, 0x22, 0xa9, 0xb7,
	0x4e, 0x25, 0x2a, 0xb9, 0x59, 0x04, 0xe7, 0x23, 0xbd, 0x9e, 0xfb, 0x4e, 0x80, 0xeb, 0x64, 0xdd,
	0xdb, 0xa2, 0x61, 0xc3, 0xb7, 0xb1, 0x6b, 0x19, 0x13, 0xa8, 0xde, 0x9b, 0xbd, 0xcb, 0xd3, 0x92,
	0xa7, 0x15, 0xd7, 0xdb, 0xa2, 0x0a, 0x64, 0x29, 0x65, 0x28, 0xd1, 0x82, 0x53, 0xf4, 0x64, 0xc8,
	0xee, 0x8c, 0x83, 0x7f, 0x44, 0x7b, 0x78, 0xa0, 0x81, 0x31, 0xb5, 0x36, 0x60, 0x29, 0xb1, 0xe8,
	0x80, 0xed, 0xa5, 0xaf, 0x64, 0x54, 0x4b, 0x3b, 0xe6, 0xe2, 0xfb, 0xef, 0xbf, 0x3f, 0xe5, 0x4c,
	0x38, 0x87, 0x4e, 0xdf, 0xdc, 0x0c, 0x7e, 0xd6, 0x40, 0x5e, 0x66, 0xc3, 0xe5, 0x2c, 0x3d, 0x42,
	0xa0, 0x52, 0x36, 0xb1, 0xe2, 0xb1, 0x05, 0x4f, 0x09, 0x2e, 0xa5, 0xf1, 0xa0, 0x3d, 0x75, 0xdd,
	0xf7, 0xe1, 0x0f, 0x0d, 0xc0, 0xfe, 0x4b, 0x07, 0xd7, 0xb2, 0x35, 0xee, 0xdb, 0x3c, 0xfa, 0xf5,
	0xe1, 0x13, 0x15, 0xfd, 0x43, 0x41, 0x7f, 0x0f, 0xde, 0x4d, 0xa1, 0x8f, 0xbd, 0x2a, 0x86, 0xf6,
	0x7a, 0x9b, 0x60, 0x3f, 0x62, 0xeb, 0x43, 0x0e, 0xcc, 0x0e, 0x7e, 0x4b, 0xf0, 0xe6, 0xb0, 0x84,
	0x91, 0xcd, 0xa3, 0xdf, 0xfa, 0xbb, 0x64, 0x65, 0xd1, 0x13, 0x16, 0xb7, 0xe1, 0xd6, 0x30, 0x16,
	0xc5, 0xe2, 0x38, 0xe1, 0x73, 0xe0, 0xee, 0x92, 0xf1, 0xe3, 0xc5, 0xb7, 0x0f, 0x3f, 0x6a, 0x20,
	0x2f, 0x5f, 0x31, 0x5c, 0xcd, 0x02, 0x1e, 0x5b, 0x20, 0x69, 0x97, 0x2f, 0xbe, 0x57, 0xcc, 0x05,
	0xe1, 0xed, 0x02, 0x2c, 0x26, 0x7a, 0x93, 0x7b, 0x04, 0x7e, 0xd5, 0xc0, 0x54, 0xdf, 0x8b, 0x86,
	0xd7, 0xb2, 0xf0, 0xf5, 0x2f, 0x1d, 0x7d, 0x6d, 0xe8, 0x3c, 0xc5, 0x7b, 0x55, 0xf0, 0x5a, 0xb0,
	0x94, 0xf6, 0x2d, 0xa2, 0xab, 0xea, 0xce, 0xa3, 0x6f, 0x47, 0x86, 0x76, 0x78, 0x64, 0x68, 0xbf,
	0x8e, 0x0c, 0xed, 0xa0, 0x63, 0x8c, 0x1c, 0x76, 0x8c, 0x91, 0x9f, 0x1d, 0x63, 0x64, 0xd3, 0x76,
	0x5c, 0xbe, 0xdd, 0xaa, 0x5a, 0x35, 0xda, 0x44, 0x4d, 0x52, 0x77, 0xab, 0x0d, 0x5a, 0x0b, 0x4b,
	0xaf, 0xd4, 0x68, 0xd0, 0x2d, 0x8c, 0xde, 0x84, 0x4d, 0xf8, 0xae, 0x4f, 0x58, 0x35, 0x2f, 0xfe,
	0x97, 0xba, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x40, 0x12, 0xa4, 0xbd, 0x38, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Oracles returns a list of oracles.
	Oracles(ctx context.Context, in *QueryOraclesRequest, opts ...grpc.CallOption) (*QueryOraclesResponse, error)
	// Oracle returns a oracle.
	Oracle(ctx context.Context, in *QueryOracleRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	// OracleRegistration returns a OracleRegistration details.
	OracleRegistration(ctx context.Context, in *QueryOracleRegistrationRequest, opts ...grpc.CallOption) (*QueryOracleRegistrationResponse, error)
	// OracleRegistrationVote a OracleRegistrationVote details.
	OracleRegistrationVote(ctx context.Context, in *QueryOracleRegistrationVoteRequest, opts ...grpc.CallOption) (*QueryOracleRegistrationVoteResponse, error)
	// Params returns params of oracle module.
	Params(ctx context.Context, in *QueryOracleParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// OracleUpgradeInfo returns OracleUpgradeInfo of oracle module.
	OracleUpgradeInfo(ctx context.Context, in *QueryOracleUpgradeInfoRequest, opts ...grpc.CallOption) (*QueryOracleUpgradeInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Oracles(ctx context.Context, in *QueryOraclesRequest, opts ...grpc.CallOption) (*QueryOraclesResponse, error) {
	out := new(QueryOraclesResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Query/Oracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Oracle(ctx context.Context, in *QueryOracleRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Query/Oracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRegistration(ctx context.Context, in *QueryOracleRegistrationRequest, opts ...grpc.CallOption) (*QueryOracleRegistrationResponse, error) {
	out := new(QueryOracleRegistrationResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Query/OracleRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleRegistrationVote(ctx context.Context, in *QueryOracleRegistrationVoteRequest, opts ...grpc.CallOption) (*QueryOracleRegistrationVoteResponse, error) {
	out := new(QueryOracleRegistrationVoteResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Query/OracleRegistrationVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryOracleParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleUpgradeInfo(ctx context.Context, in *QueryOracleUpgradeInfoRequest, opts ...grpc.CallOption) (*QueryOracleUpgradeInfoResponse, error) {
	out := new(QueryOracleUpgradeInfoResponse)
	err := c.cc.Invoke(ctx, "/panacea.oracle.v2alpha2.Query/OracleUpgradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Oracles returns a list of oracles.
	Oracles(context.Context, *QueryOraclesRequest) (*QueryOraclesResponse, error)
	// Oracle returns a oracle.
	Oracle(context.Context, *QueryOracleRequest) (*QueryOracleResponse, error)
	// OracleRegistration returns a OracleRegistration details.
	OracleRegistration(context.Context, *QueryOracleRegistrationRequest) (*QueryOracleRegistrationResponse, error)
	// OracleRegistrationVote a OracleRegistrationVote details.
	OracleRegistrationVote(context.Context, *QueryOracleRegistrationVoteRequest) (*QueryOracleRegistrationVoteResponse, error)
	// Params returns params of oracle module.
	Params(context.Context, *QueryOracleParamsRequest) (*QueryParamsResponse, error)
	// OracleUpgradeInfo returns OracleUpgradeInfo of oracle module.
	OracleUpgradeInfo(context.Context, *QueryOracleUpgradeInfoRequest) (*QueryOracleUpgradeInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Oracles(ctx context.Context, req *QueryOraclesRequest) (*QueryOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oracles not implemented")
}
func (*UnimplementedQueryServer) Oracle(ctx context.Context, req *QueryOracleRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oracle not implemented")
}
func (*UnimplementedQueryServer) OracleRegistration(ctx context.Context, req *QueryOracleRegistrationRequest) (*QueryOracleRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRegistration not implemented")
}
func (*UnimplementedQueryServer) OracleRegistrationVote(ctx context.Context, req *QueryOracleRegistrationVoteRequest) (*QueryOracleRegistrationVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleRegistrationVote not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryOracleParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OracleUpgradeInfo(ctx context.Context, req *QueryOracleUpgradeInfoRequest) (*QueryOracleUpgradeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleUpgradeInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Oracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Oracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Query/Oracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Oracles(ctx, req.(*QueryOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Oracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Oracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Query/Oracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Oracle(ctx, req.(*QueryOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Query/OracleRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRegistration(ctx, req.(*QueryOracleRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleRegistrationVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRegistrationVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleRegistrationVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Query/OracleRegistrationVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleRegistrationVote(ctx, req.(*QueryOracleRegistrationVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryOracleParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleUpgradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleUpgradeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleUpgradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.oracle.v2alpha2.Query/OracleUpgradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleUpgradeInfo(ctx, req.(*QueryOracleUpgradeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.oracle.v2alpha2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Oracles",
			Handler:    _Query_Oracles_Handler,
		},
		{
			MethodName: "Oracle",
			Handler:    _Query_Oracle_Handler,
		},
		{
			MethodName: "OracleRegistration",
			Handler:    _Query_OracleRegistration_Handler,
		},
		{
			MethodName: "OracleRegistrationVote",
			Handler:    _Query_OracleRegistrationVote_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OracleUpgradeInfo",
			Handler:    _Query_OracleUpgradeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/oracle/v2alpha2/query.proto",
}

func (m *QueryOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Oracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Oracle != nil {
		{
			size, err := m.Oracle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRegistrationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRegistrationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRegistrationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleRegistration != nil {
		{
			size, err := m.OracleRegistration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRegistrationVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRegistrationVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRegistrationVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VotingTargetAddress) > 0 {
		i -= len(m.VotingTargetAddress)
		copy(dAtA[i:], m.VotingTargetAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VotingTargetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleRegistrationVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRegistrationVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRegistrationVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleRegistrationVote != nil {
		{
			size, err := m.OracleRegistrationVote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleUpgradeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleUpgradeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleUpgradeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOracleUpgradeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleUpgradeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleUpgradeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleUpgradeInfo != nil {
		{
			size, err := m.OracleUpgradeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for _, e := range m.Oracles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oracle != nil {
		l = m.Oracle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRegistrationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleRegistration != nil {
		l = m.OracleRegistration.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRegistrationVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VotingTargetAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleRegistrationVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleRegistrationVote != nil {
		l = m.OracleRegistrationVote.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleUpgradeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOracleUpgradeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleUpgradeInfo != nil {
		l = m.OracleUpgradeInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, &Oracle{})
			if err := m.Oracles[len(m.Oracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oracle == nil {
				m.Oracle = &Oracle{}
			}
			if err := m.Oracle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRegistrationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRegistrationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRegistrationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRegistration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleRegistration == nil {
				m.OracleRegistration = &OracleRegistration{}
			}
			if err := m.OracleRegistration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRegistrationVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRegistrationVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRegistrationVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingTargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingTargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleRegistrationVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRegistrationVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRegistrationVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRegistrationVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleRegistrationVote == nil {
				m.OracleRegistrationVote = &OracleRegistrationVote{}
			}
			if err := m.OracleRegistrationVote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleUpgradeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleUpgradeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleUpgradeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleUpgradeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleUpgradeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleUpgradeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleUpgradeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleUpgradeInfo == nil {
				m.OracleUpgradeInfo = &OracleUpgradeInfo{}
			}
			if err := m.OracleUpgradeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
