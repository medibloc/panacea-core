// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2/oracle.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Oracle defines a detail of oracle.
type Oracle struct {
	OracleAddress                 string                                 `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	UniqueId                      string                                 `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Endpoint                      string                                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	UpdateTime                    time.Time                              `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3,stdtime" json:"update_time"`
	OracleCommissionRate          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=oracle_commission_rate,json=oracleCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_rate"`
	OracleCommissionMaxRate       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=oracle_commission_max_rate,json=oracleCommissionMaxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_max_rate"`
	OracleCommissionMaxChangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=oracle_commission_max_change_rate,json=oracleCommissionMaxChangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_max_change_rate"`
}

func (m *Oracle) Reset()         { *m = Oracle{} }
func (m *Oracle) String() string { return proto.CompactTextString(m) }
func (*Oracle) ProtoMessage()    {}
func (*Oracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1a1e2fbbbc7ea, []int{0}
}
func (m *Oracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Oracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Oracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Oracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oracle.Merge(m, src)
}
func (m *Oracle) XXX_Size() int {
	return m.Size()
}
func (m *Oracle) XXX_DiscardUnknown() {
	xxx_messageInfo_Oracle.DiscardUnknown(m)
}

var xxx_messageInfo_Oracle proto.InternalMessageInfo

func (m *Oracle) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *Oracle) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *Oracle) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Oracle) GetUpdateTime() time.Time {
	if m != nil {
		return m.UpdateTime
	}
	return time.Time{}
}

// OracleRegistration defines the detailed states of the registration of oracle.
type OracleRegistration struct {
	UniqueId      string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	OracleAddress string `protobuf:"bytes,2,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	// Node public key is a pair with a node private key which is generated in SGX by each oracle.
	// This key is used to share the oracle private key from other oracles.
	NodePubKey []byte `protobuf:"bytes,3,opt,name=node_pub_key,json=nodePubKey,proto3" json:"node_pub_key,omitempty"`
	// Anyone can validate that the node key pair is generated in SGX using this node key remote report.
	NodePubKeyRemoteReport []byte `protobuf:"bytes,4,opt,name=node_pub_key_remote_report,json=nodePubKeyRemoteReport,proto3" json:"node_pub_key_remote_report,omitempty"`
	// A newly joining oracle must report a trusted block info which was used to initialize its light client.
	// Other oracles will validate whether this trusted block info is correct,
	//   in order to prevent malicious operators from making the oracle look at a malicious chain node.
	// Other oracles don't have to worry about whether this block info was set by a malicious operator,
	//   because this message has to be generated inside SGX.
	// Also, after this oracle registration is complete, the light client is protected from malicious operators by SGX.
	TrustedBlockHeight            int64                                  `protobuf:"varint,5,opt,name=trusted_block_height,json=trustedBlockHeight,proto3" json:"trusted_block_height,omitempty"`
	TrustedBlockHash              []byte                                 `protobuf:"bytes,6,opt,name=trusted_block_hash,json=trustedBlockHash,proto3" json:"trusted_block_hash,omitempty"`
	Endpoint                      string                                 `protobuf:"bytes,7,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	OracleCommissionRate          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=oracle_commission_rate,json=oracleCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_rate"`
	OracleCommissionMaxRate       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=oracle_commission_max_rate,json=oracleCommissionMaxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_max_rate"`
	OracleCommissionMaxChangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=oracle_commission_max_change_rate,json=oracleCommissionMaxChangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_commission_max_change_rate"`
	EncryptedOraclePrivKey        []byte                                 `protobuf:"bytes,11,opt,name=encrypted_oracle_priv_key,json=encryptedOraclePrivKey,proto3" json:"encrypted_oracle_priv_key,omitempty"`
}

func (m *OracleRegistration) Reset()         { *m = OracleRegistration{} }
func (m *OracleRegistration) String() string { return proto.CompactTextString(m) }
func (*OracleRegistration) ProtoMessage()    {}
func (*OracleRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1a1e2fbbbc7ea, []int{1}
}
func (m *OracleRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRegistration.Merge(m, src)
}
func (m *OracleRegistration) XXX_Size() int {
	return m.Size()
}
func (m *OracleRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRegistration proto.InternalMessageInfo

func (m *OracleRegistration) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *OracleRegistration) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *OracleRegistration) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *OracleRegistration) GetNodePubKeyRemoteReport() []byte {
	if m != nil {
		return m.NodePubKeyRemoteReport
	}
	return nil
}

func (m *OracleRegistration) GetTrustedBlockHeight() int64 {
	if m != nil {
		return m.TrustedBlockHeight
	}
	return 0
}

func (m *OracleRegistration) GetTrustedBlockHash() []byte {
	if m != nil {
		return m.TrustedBlockHash
	}
	return nil
}

func (m *OracleRegistration) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *OracleRegistration) GetEncryptedOraclePrivKey() []byte {
	if m != nil {
		return m.EncryptedOraclePrivKey
	}
	return nil
}

// OracleUpgradeInfo defines the info of oracle upgrade, which includes the target height of upgrade and unique ID of the new version of oracle
type OracleUpgradeInfo struct {
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Height   int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *OracleUpgradeInfo) Reset()         { *m = OracleUpgradeInfo{} }
func (m *OracleUpgradeInfo) String() string { return proto.CompactTextString(m) }
func (*OracleUpgradeInfo) ProtoMessage()    {}
func (*OracleUpgradeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1a1e2fbbbc7ea, []int{2}
}
func (m *OracleUpgradeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleUpgradeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleUpgradeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleUpgradeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleUpgradeInfo.Merge(m, src)
}
func (m *OracleUpgradeInfo) XXX_Size() int {
	return m.Size()
}
func (m *OracleUpgradeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleUpgradeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OracleUpgradeInfo proto.InternalMessageInfo

func (m *OracleUpgradeInfo) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *OracleUpgradeInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*Oracle)(nil), "panacea.oracle.v2.Oracle")
	proto.RegisterType((*OracleRegistration)(nil), "panacea.oracle.v2.OracleRegistration")
	proto.RegisterType((*OracleUpgradeInfo)(nil), "panacea.oracle.v2.OracleUpgradeInfo")
}

func init() { proto.RegisterFile("panacea/oracle/v2/oracle.proto", fileDescriptor_35c1a1e2fbbbc7ea) }

var fileDescriptor_35c1a1e2fbbbc7ea = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xfe, 0x49, 0xd3, 0x6d, 0x40, 0x74, 0x55, 0x95, 0x60, 0x84, 0x53, 0x2a, 0x81,
	0x7a, 0xa0, 0x36, 0x2a, 0x27, 0x7a, 0x23, 0x05, 0x89, 0xaa, 0x02, 0x2a, 0x0b, 0x2e, 0x5c, 0xac,
	0xb5, 0x77, 0x6a, 0xaf, 0x52, 0x7b, 0xcd, 0xee, 0x3a, 0x4a, 0xde, 0xa2, 0x8f, 0xc0, 0x73, 0xf0,
	0x04, 0x3d, 0xf6, 0x88, 0x38, 0x14, 0x94, 0x5c, 0x78, 0x08, 0x0e, 0xc8, 0xbb, 0x4e, 0x69, 0xd2,
	0xc0, 0xa1, 0x12, 0x70, 0xb2, 0x77, 0xbe, 0xd9, 0xf9, 0x66, 0x35, 0x3f, 0x0d, 0x72, 0x72, 0x92,
	0x91, 0x08, 0x88, 0xc7, 0x05, 0x89, 0x8e, 0xc1, 0xeb, 0xed, 0x54, 0x7f, 0x6e, 0x2e, 0xb8, 0xe2,
	0x78, 0xb5, 0xd2, 0xdd, 0x2a, 0xda, 0xdb, 0xb1, 0xd7, 0x62, 0x1e, 0x73, 0xad, 0x7a, 0xe5, 0x9f,
	0x49, 0xb4, 0xdb, 0x31, 0xe7, 0xf1, 0x31, 0x78, 0xfa, 0x14, 0x16, 0x47, 0x9e, 0x62, 0x29, 0x48,
	0x45, 0xd2, 0xdc, 0x24, 0x6c, 0xfe, 0x98, 0x47, 0xf5, 0x37, 0xba, 0x08, 0x7e, 0x80, 0x6e, 0x9a,
	0x72, 0x01, 0xa1, 0x54, 0x80, 0x94, 0x2d, 0x6b, 0xc3, 0xda, 0x5a, 0xf6, 0x6f, 0x98, 0xe8, 0x33,
	0x13, 0xc4, 0x77, 0xd1, 0x72, 0x91, 0xb1, 0x0f, 0x05, 0x04, 0x8c, 0xb6, 0xe6, 0x74, 0x46, 0xc3,
	0x04, 0xf6, 0x29, 0xb6, 0x51, 0x03, 0x32, 0x9a, 0x73, 0x96, 0xa9, 0xd6, 0xbc, 0xd1, 0xc6, 0x67,
	0xfc, 0x02, 0xad, 0x14, 0x39, 0x25, 0x0a, 0x82, 0xb2, 0x89, 0xd6, 0xc2, 0x86, 0xb5, 0xb5, 0xb2,
	0x63, 0xbb, 0xa6, 0x43, 0x77, 0xdc, 0xa1, 0xfb, 0x76, 0xdc, 0x61, 0xa7, 0x71, 0x7a, 0xde, 0xae,
	0x9d, 0x7c, 0x6d, 0x5b, 0x3e, 0x32, 0x17, 0x4b, 0x09, 0x53, 0xb4, 0x5e, 0xb5, 0x19, 0xf1, 0x34,
	0x65, 0x52, 0x32, 0x9e, 0x05, 0x82, 0x28, 0x68, 0x2d, 0x96, 0x86, 0x1d, 0xb7, 0xbc, 0xf5, 0xe5,
	0xbc, 0xfd, 0x30, 0x66, 0x2a, 0x29, 0x42, 0x37, 0xe2, 0xa9, 0x17, 0x71, 0x99, 0x72, 0x59, 0x7d,
	0xb6, 0x25, 0xed, 0x7a, 0x6a, 0x90, 0x83, 0x74, 0x9f, 0x43, 0xe4, 0xaf, 0x99, 0x6a, 0x7b, 0x17,
	0xc5, 0x7c, 0xa2, 0x00, 0x77, 0x91, 0x7d, 0xd5, 0x25, 0x25, 0x7d, 0xe3, 0x54, 0xbf, 0x96, 0xd3,
	0xed, 0x69, 0xa7, 0x57, 0xa4, 0xaf, 0xcd, 0xfa, 0xe8, 0xfe, 0x6c, 0xb3, 0x28, 0x21, 0x59, 0x0c,
	0xc6, 0x73, 0xe9, 0x5a, 0x9e, 0xf7, 0x66, 0x78, 0xee, 0xe9, 0xaa, 0xa5, 0xf3, 0xe6, 0xa7, 0x45,
	0x84, 0xcd, 0xf8, 0x7d, 0x88, 0x99, 0x54, 0x82, 0x28, 0xc6, 0xb3, 0xc9, 0x19, 0x5b, 0x53, 0x33,
	0xbe, 0xca, 0xc9, 0xdc, 0x2c, 0x4e, 0x36, 0x50, 0x33, 0xe3, 0x14, 0x82, 0xbc, 0x08, 0x83, 0x2e,
	0x0c, 0x34, 0x0e, 0x4d, 0x1f, 0x95, 0xb1, 0xc3, 0x22, 0x3c, 0x80, 0x01, 0xde, 0x45, 0xf6, 0xe5,
	0x8c, 0x40, 0x40, 0xca, 0x15, 0x04, 0x02, 0x72, 0x2e, 0x94, 0xe6, 0xa3, 0xe9, 0xaf, 0xff, 0xca,
	0xf7, 0xb5, 0xec, 0x6b, 0x15, 0x3f, 0x46, 0x6b, 0x4a, 0x14, 0x52, 0x01, 0x0d, 0xc2, 0x63, 0x1e,
	0x75, 0x83, 0x04, 0x58, 0x9c, 0x28, 0xcd, 0xc0, 0xbc, 0x8f, 0x2b, 0xad, 0x53, 0x4a, 0x2f, 0xb5,
	0x82, 0x1f, 0x21, 0x3c, 0x75, 0x83, 0xc8, 0x44, 0x4f, 0xb2, 0xe9, 0xdf, 0x9a, 0xc8, 0x27, 0x32,
	0x99, 0x00, 0x79, 0x69, 0x0a, 0xe4, 0xdf, 0x13, 0xd8, 0xf8, 0x67, 0x04, 0x2e, 0xff, 0x07, 0x02,
	0xd1, 0x5f, 0x20, 0x10, 0x3f, 0x45, 0x77, 0x20, 0x8b, 0xc4, 0x20, 0x2f, 0x07, 0x53, 0xf5, 0x90,
	0x0b, 0xd6, 0xd3, 0xcc, 0xac, 0x18, 0x06, 0x2e, 0x12, 0x0c, 0xaa, 0x87, 0x82, 0xf5, 0x0e, 0x60,
	0xb0, 0xf9, 0x1a, 0xad, 0x9a, 0xc0, 0xbb, 0x3c, 0x16, 0x84, 0xc2, 0x7e, 0x76, 0xc4, 0xff, 0x8c,
	0xee, 0x3a, 0xaa, 0x57, 0x9c, 0xcc, 0x69, 0x4e, 0xaa, 0xd3, 0xee, 0xc2, 0xf7, 0x8f, 0x6d, 0xab,
	0xb3, 0x7f, 0x3a, 0x74, 0xac, 0xb3, 0xa1, 0x63, 0x7d, 0x1b, 0x3a, 0xd6, 0xc9, 0xc8, 0xa9, 0x9d,
	0x8d, 0x9c, 0xda, 0xe7, 0x91, 0x53, 0x7b, 0xef, 0x5d, 0x7a, 0x6b, 0x0a, 0x94, 0x95, 0x00, 0x79,
	0xd5, 0x0e, 0xde, 0x8e, 0xb8, 0x00, 0xaf, 0x3f, 0x5e, 0xd5, 0xfa, 0xe1, 0x61, 0x5d, 0xaf, 0xb3,
	0x27, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xba, 0x57, 0x01, 0x48, 0xc9, 0x05, 0x00, 0x00,
}

func (this *OracleUpgradeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleUpgradeInfo)
	if !ok {
		that2, ok := that.(OracleUpgradeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (m *Oracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Oracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Oracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OracleCommissionMaxChangeRate.Size()
		i -= size
		if _, err := m.OracleCommissionMaxChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.OracleCommissionMaxRate.Size()
		i -= size
		if _, err := m.OracleCommissionMaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.OracleCommissionRate.Size()
		i -= size
		if _, err := m.OracleCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOracle(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedOraclePrivKey) > 0 {
		i -= len(m.EncryptedOraclePrivKey)
		copy(dAtA[i:], m.EncryptedOraclePrivKey)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.EncryptedOraclePrivKey)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.OracleCommissionMaxChangeRate.Size()
		i -= size
		if _, err := m.OracleCommissionMaxChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.OracleCommissionMaxRate.Size()
		i -= size
		if _, err := m.OracleCommissionMaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.OracleCommissionRate.Size()
		i -= size
		if _, err := m.OracleCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedBlockHash) > 0 {
		i -= len(m.TrustedBlockHash)
		copy(dAtA[i:], m.TrustedBlockHash)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.TrustedBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.TrustedBlockHeight != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.TrustedBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NodePubKeyRemoteReport) > 0 {
		i -= len(m.NodePubKeyRemoteReport)
		copy(dAtA[i:], m.NodePubKeyRemoteReport)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.NodePubKeyRemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodePubKey) > 0 {
		i -= len(m.NodePubKey)
		copy(dAtA[i:], m.NodePubKey)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.NodePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleUpgradeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleUpgradeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleUpgradeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Oracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdateTime)
	n += 1 + l + sovOracle(uint64(l))
	l = m.OracleCommissionRate.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.OracleCommissionMaxRate.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.OracleCommissionMaxChangeRate.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *OracleRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.NodePubKey)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.NodePubKeyRemoteReport)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.TrustedBlockHeight != 0 {
		n += 1 + sovOracle(uint64(m.TrustedBlockHeight))
	}
	l = len(m.TrustedBlockHash)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.OracleCommissionRate.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.OracleCommissionMaxRate.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.OracleCommissionMaxChangeRate.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = len(m.EncryptedOraclePrivKey)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *OracleUpgradeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovOracle(uint64(m.Height))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Oracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionMaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionMaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionMaxChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionMaxChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKey = append(m.NodePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKey == nil {
				m.NodePubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKeyRemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKeyRemoteReport = append(m.NodePubKeyRemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKeyRemoteReport == nil {
				m.NodePubKeyRemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHeight", wireType)
			}
			m.TrustedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedBlockHash = append(m.TrustedBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TrustedBlockHash == nil {
				m.TrustedBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionMaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionMaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleCommissionMaxChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleCommissionMaxChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedOraclePrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedOraclePrivKey = append(m.EncryptedOraclePrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedOraclePrivKey == nil {
				m.EncryptedOraclePrivKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleUpgradeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleUpgradeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleUpgradeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
