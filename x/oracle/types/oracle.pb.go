// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/oracle/v2alpha2/oracle.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OracleStatus enumerates the status of oracle.
type OracleStatus int32

const (
	// ORACLE_STATUS_UNSPECIFIED
	ORACLE_STATUS_UNSPECIFIED OracleStatus = 0
	// ACTIVE defines the oracle status that is active
	ORACLE_STATUS_ACTIVE OracleStatus = 1
	// JAILED defines the oracle status that has been jailed
	ORACLE_STATUS_JAILED OracleStatus = 2
	// UPGRADING defines the oracle status that is being upgraded to new version of oracle
	ORACLE_STATUS_UPGRADING OracleStatus = 3
)

var OracleStatus_name = map[int32]string{
	0: "ORACLE_STATUS_UNSPECIFIED",
	1: "ORACLE_STATUS_ACTIVE",
	2: "ORACLE_STATUS_JAILED",
	3: "ORACLE_STATUS_UPGRADING",
}

var OracleStatus_value = map[string]int32{
	"ORACLE_STATUS_UNSPECIFIED": 0,
	"ORACLE_STATUS_ACTIVE":      1,
	"ORACLE_STATUS_JAILED":      2,
	"ORACLE_STATUS_UPGRADING":   3,
}

func (x OracleStatus) String() string {
	return proto.EnumName(OracleStatus_name, int32(x))
}

func (OracleStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{0}
}

// OracleRegistrationStatus enumerates the status of OracleRegistration.
type OracleRegistrationStatus int32

const (
	// ORACLE_REGISTRATION_STATUS_UNSPECIFIED
	ORACLE_REGISTRATION_STATUS_UNSPECIFIED OracleRegistrationStatus = 0
	// VOTING_PERIOD defines the status of OracleRegistration in voting period.
	ORACLE_REGISTRATION_STATUS_VOTING_PERIOD OracleRegistrationStatus = 1
	// PASSED defines the status of OracleRegistration passed.
	ORACLE_REGISTRATION_STATUS_PASSED OracleRegistrationStatus = 2
	// PASSED defines the status of OracleRegistration rejected.
	ORACLE_REGISTRATION_STATUS_REJECTED OracleRegistrationStatus = 3
)

var OracleRegistrationStatus_name = map[int32]string{
	0: "ORACLE_REGISTRATION_STATUS_UNSPECIFIED",
	1: "ORACLE_REGISTRATION_STATUS_VOTING_PERIOD",
	2: "ORACLE_REGISTRATION_STATUS_PASSED",
	3: "ORACLE_REGISTRATION_STATUS_REJECTED",
}

var OracleRegistrationStatus_value = map[string]int32{
	"ORACLE_REGISTRATION_STATUS_UNSPECIFIED":   0,
	"ORACLE_REGISTRATION_STATUS_VOTING_PERIOD": 1,
	"ORACLE_REGISTRATION_STATUS_PASSED":        2,
	"ORACLE_REGISTRATION_STATUS_REJECTED":      3,
}

func (x OracleRegistrationStatus) String() string {
	return proto.EnumName(OracleRegistrationStatus_name, int32(x))
}

func (OracleRegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{1}
}

// VoteOption enumerates the vote option.
type VoteOption int32

const (
	// VOTE_OPTION_UNSPECIFIED
	VOTE_OPTION_UNSPECIFIED VoteOption = 0
	// VOTE_OPTION_VALID
	VOTE_OPTION_YES VoteOption = 1
	// VOTE_OPTION_INVALID
	VOTE_OPTION_NO VoteOption = 2
)

var VoteOption_name = map[int32]string{
	0: "VOTE_OPTION_UNSPECIFIED",
	1: "VOTE_OPTION_YES",
	2: "VOTE_OPTION_NO",
}

var VoteOption_value = map[string]int32{
	"VOTE_OPTION_UNSPECIFIED": 0,
	"VOTE_OPTION_YES":         1,
	"VOTE_OPTION_NO":          2,
}

func (x VoteOption) String() string {
	return proto.EnumName(VoteOption_name, int32(x))
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{2}
}

// OracleRegistrationType defines of oracle registration type.
type OracleRegistrationType int32

const (
	// UNSPECIFIED type
	ORACLE_REGISTRATION_TYPE_UNSPECIFIED OracleRegistrationType = 0
	// For oracles newly added
	ORACLE_REGISTRATION_TYPE_NEW OracleRegistrationType = 1
	// For oracles to be upgraded
	ORACLE_REGISTRATION_TYPE_UPGRADE OracleRegistrationType = 2
)

var OracleRegistrationType_name = map[int32]string{
	0: "ORACLE_REGISTRATION_TYPE_UNSPECIFIED",
	1: "ORACLE_REGISTRATION_TYPE_NEW",
	2: "ORACLE_REGISTRATION_TYPE_UPGRADE",
}

var OracleRegistrationType_value = map[string]int32{
	"ORACLE_REGISTRATION_TYPE_UNSPECIFIED": 0,
	"ORACLE_REGISTRATION_TYPE_NEW":         1,
	"ORACLE_REGISTRATION_TYPE_UPGRADE":     2,
}

func (x OracleRegistrationType) String() string {
	return proto.EnumName(OracleRegistrationType_name, int32(x))
}

func (OracleRegistrationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{3}
}

// Oracle defines a detail of oracle.
type Oracle struct {
	Address  string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Status   OracleStatus `protobuf:"varint,2,opt,name=status,proto3,enum=panacea.oracle.v2alpha2.OracleStatus" json:"status,omitempty"`
	Uptime   uint64       `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	JailedAt *time.Time   `protobuf:"bytes,4,opt,name=jailed_at,json=jailedAt,proto3,stdtime" json:"jailed_at,omitempty" yaml:"jailed_at"`
}

func (m *Oracle) Reset()         { *m = Oracle{} }
func (m *Oracle) String() string { return proto.CompactTextString(m) }
func (*Oracle) ProtoMessage()    {}
func (*Oracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{0}
}
func (m *Oracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Oracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Oracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Oracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Oracle.Merge(m, src)
}
func (m *Oracle) XXX_Size() int {
	return m.Size()
}
func (m *Oracle) XXX_DiscardUnknown() {
	xxx_messageInfo_Oracle.DiscardUnknown(m)
}

var xxx_messageInfo_Oracle proto.InternalMessageInfo

func (m *Oracle) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Oracle) GetStatus() OracleStatus {
	if m != nil {
		return m.Status
	}
	return ORACLE_STATUS_UNSPECIFIED
}

func (m *Oracle) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Oracle) GetJailedAt() *time.Time {
	if m != nil {
		return m.JailedAt
	}
	return nil
}

// OracleRegistration defines the detailed states of the registration of oracle.
type OracleRegistration struct {
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Node public key is a pair with a node private key which is generated in SGX by each oracle.
	// This key is used to share the oracle private key from other oracles.
	NodePubKey []byte `protobuf:"bytes,3,opt,name=node_pub_key,json=nodePubKey,proto3" json:"node_pub_key,omitempty"`
	// Anyone can validate that the node key pair is generated in SGX using this node key remote report.
	NodePubKeyRemoteReport []byte `protobuf:"bytes,4,opt,name=node_pub_key_remote_report,json=nodePubKeyRemoteReport,proto3" json:"node_pub_key_remote_report,omitempty"`
	// The trusted block info is required for light client.
	// Other oracle can validate whether the oracle set correct trusted block info.
	TrustedBlockHeight int64  `protobuf:"varint,5,opt,name=trusted_block_height,json=trustedBlockHeight,proto3" json:"trusted_block_height,omitempty"`
	TrustedBlockHash   []byte `protobuf:"bytes,6,opt,name=trusted_block_hash,json=trustedBlockHash,proto3" json:"trusted_block_hash,omitempty"`
	// Encrypted oracle private key by node public key, which can only be decrypted in SGX securely.
	EncryptedOraclePrivKey []byte `protobuf:"bytes,7,opt,name=encrypted_oracle_priv_key,json=encryptedOraclePrivKey,proto3" json:"encrypted_oracle_priv_key,omitempty"`
	// The status of OracleRegistration.
	Status       OracleRegistrationStatus `protobuf:"varint,8,opt,name=status,proto3,enum=panacea.oracle.v2alpha2.OracleRegistrationStatus" json:"status,omitempty"`
	VotingPeriod *VotingPeriod            `protobuf:"bytes,9,opt,name=voting_period,json=votingPeriod,proto3" json:"voting_period,omitempty"`
	TallyResult  *TallyResult             `protobuf:"bytes,10,opt,name=tally_result,json=tallyResult,proto3" json:"tally_result,omitempty"`
	// Nonce required for AES256-GCM encryption
	Nonce []byte `protobuf:"bytes,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Type of registration through which path
	RegistrationType OracleRegistrationType `protobuf:"varint,12,opt,name=registration_type,json=registrationType,proto3,enum=panacea.oracle.v2alpha2.OracleRegistrationType" json:"registration_type,omitempty"`
}

func (m *OracleRegistration) Reset()         { *m = OracleRegistration{} }
func (m *OracleRegistration) String() string { return proto.CompactTextString(m) }
func (*OracleRegistration) ProtoMessage()    {}
func (*OracleRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{1}
}
func (m *OracleRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRegistration.Merge(m, src)
}
func (m *OracleRegistration) XXX_Size() int {
	return m.Size()
}
func (m *OracleRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRegistration proto.InternalMessageInfo

func (m *OracleRegistration) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *OracleRegistration) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *OracleRegistration) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *OracleRegistration) GetNodePubKeyRemoteReport() []byte {
	if m != nil {
		return m.NodePubKeyRemoteReport
	}
	return nil
}

func (m *OracleRegistration) GetTrustedBlockHeight() int64 {
	if m != nil {
		return m.TrustedBlockHeight
	}
	return 0
}

func (m *OracleRegistration) GetTrustedBlockHash() []byte {
	if m != nil {
		return m.TrustedBlockHash
	}
	return nil
}

func (m *OracleRegistration) GetEncryptedOraclePrivKey() []byte {
	if m != nil {
		return m.EncryptedOraclePrivKey
	}
	return nil
}

func (m *OracleRegistration) GetStatus() OracleRegistrationStatus {
	if m != nil {
		return m.Status
	}
	return ORACLE_REGISTRATION_STATUS_UNSPECIFIED
}

func (m *OracleRegistration) GetVotingPeriod() *VotingPeriod {
	if m != nil {
		return m.VotingPeriod
	}
	return nil
}

func (m *OracleRegistration) GetTallyResult() *TallyResult {
	if m != nil {
		return m.TallyResult
	}
	return nil
}

func (m *OracleRegistration) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *OracleRegistration) GetRegistrationType() OracleRegistrationType {
	if m != nil {
		return m.RegistrationType
	}
	return ORACLE_REGISTRATION_TYPE_UNSPECIFIED
}

// TallyResult defines the tally result of the votes.
type TallyResult struct {
	Yes github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=yes,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"yes"`
	No  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=no,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"no"`
	// Votes yes, but the value is different with the consensus value
	InvalidYes []*ConsensusTally                      `protobuf:"bytes,3,rep,name=invalid_yes,json=invalidYes,proto3" json:"invalid_yes,omitempty"`
	Total      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total"`
	// The consensus value between oracles
	ConsensusValue []byte       `protobuf:"bytes,5,opt,name=consensus_value,json=consensusValue,proto3" json:"consensus_value,omitempty"`
	ValidVoters    []*VoterInfo `protobuf:"bytes,6,rep,name=valid_voters,json=validVoters,proto3" json:"valid_voters,omitempty"`
}

func (m *TallyResult) Reset()         { *m = TallyResult{} }
func (m *TallyResult) String() string { return proto.CompactTextString(m) }
func (*TallyResult) ProtoMessage()    {}
func (*TallyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{2}
}
func (m *TallyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyResult.Merge(m, src)
}
func (m *TallyResult) XXX_Size() int {
	return m.Size()
}
func (m *TallyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyResult.DiscardUnknown(m)
}

var xxx_messageInfo_TallyResult proto.InternalMessageInfo

func (m *TallyResult) GetInvalidYes() []*ConsensusTally {
	if m != nil {
		return m.InvalidYes
	}
	return nil
}

func (m *TallyResult) GetConsensusValue() []byte {
	if m != nil {
		return m.ConsensusValue
	}
	return nil
}

func (m *TallyResult) GetValidVoters() []*VoterInfo {
	if m != nil {
		return m.ValidVoters
	}
	return nil
}

// VoterInfo defines the voter info
type VoterInfo struct {
	VoterAddress string                                 `protobuf:"bytes,1,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	VotingPower  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=voting_power,json=votingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"voting_power"`
}

func (m *VoterInfo) Reset()         { *m = VoterInfo{} }
func (m *VoterInfo) String() string { return proto.CompactTextString(m) }
func (*VoterInfo) ProtoMessage()    {}
func (*VoterInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{3}
}
func (m *VoterInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterInfo.Merge(m, src)
}
func (m *VoterInfo) XXX_Size() int {
	return m.Size()
}
func (m *VoterInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VoterInfo proto.InternalMessageInfo

func (m *VoterInfo) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

// ConsensusTally defines the consensus value and the vote amount.
type ConsensusTally struct {
	ConsensusValue []byte                                 `protobuf:"bytes,1,opt,name=consensus_value,json=consensusValue,proto3" json:"consensus_value,omitempty"`
	VotingAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=voting_amount,json=votingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"voting_amount"`
	VoterInfo      []*VoterInfo                           `protobuf:"bytes,3,rep,name=voter_info,json=voterInfo,proto3" json:"voter_info,omitempty"`
}

func (m *ConsensusTally) Reset()         { *m = ConsensusTally{} }
func (m *ConsensusTally) String() string { return proto.CompactTextString(m) }
func (*ConsensusTally) ProtoMessage()    {}
func (*ConsensusTally) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{4}
}
func (m *ConsensusTally) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusTally) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusTally.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusTally) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusTally.Merge(m, src)
}
func (m *ConsensusTally) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusTally) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusTally.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusTally proto.InternalMessageInfo

func (m *ConsensusTally) GetConsensusValue() []byte {
	if m != nil {
		return m.ConsensusValue
	}
	return nil
}

func (m *ConsensusTally) GetVoterInfo() []*VoterInfo {
	if m != nil {
		return m.VoterInfo
	}
	return nil
}

// VotingPeriod defines the voting period of transactions governed by oracles.
type VotingPeriod struct {
	VotingStartTime time.Time `protobuf:"bytes,1,opt,name=voting_start_time,json=votingStartTime,proto3,stdtime" json:"voting_start_time" yaml:"voting_start_time"`
	VotingEndTime   time.Time `protobuf:"bytes,2,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time" yaml:"voting_end_time"`
}

func (m *VotingPeriod) Reset()         { *m = VotingPeriod{} }
func (m *VotingPeriod) String() string { return proto.CompactTextString(m) }
func (*VotingPeriod) ProtoMessage()    {}
func (*VotingPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{5}
}
func (m *VotingPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingPeriod.Merge(m, src)
}
func (m *VotingPeriod) XXX_Size() int {
	return m.Size()
}
func (m *VotingPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_VotingPeriod proto.InternalMessageInfo

func (m *VotingPeriod) GetVotingStartTime() time.Time {
	if m != nil {
		return m.VotingStartTime
	}
	return time.Time{}
}

func (m *VotingPeriod) GetVotingEndTime() time.Time {
	if m != nil {
		return m.VotingEndTime
	}
	return time.Time{}
}

// OracleRegistrationVote defines the vote for oracle registration
type OracleRegistrationVote struct {
	UniqueId               string     `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	VoterUniqueId          string     `protobuf:"bytes,2,opt,name=voter_unique_id,json=voterUniqueId,proto3" json:"voter_unique_id,omitempty"`
	VoterAddress           string     `protobuf:"bytes,3,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	VotingTargetAddress    string     `protobuf:"bytes,4,opt,name=voting_target_address,json=votingTargetAddress,proto3" json:"voting_target_address,omitempty"`
	VoteOption             VoteOption `protobuf:"varint,5,opt,name=vote_option,json=voteOption,proto3,enum=panacea.oracle.v2alpha2.VoteOption" json:"vote_option,omitempty"`
	EncryptedOraclePrivKey []byte     `protobuf:"bytes,6,opt,name=encrypted_oracle_priv_key,json=encryptedOraclePrivKey,proto3" json:"encrypted_oracle_priv_key,omitempty"`
}

func (m *OracleRegistrationVote) Reset()         { *m = OracleRegistrationVote{} }
func (m *OracleRegistrationVote) String() string { return proto.CompactTextString(m) }
func (*OracleRegistrationVote) ProtoMessage()    {}
func (*OracleRegistrationVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{6}
}
func (m *OracleRegistrationVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRegistrationVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRegistrationVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRegistrationVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRegistrationVote.Merge(m, src)
}
func (m *OracleRegistrationVote) XXX_Size() int {
	return m.Size()
}
func (m *OracleRegistrationVote) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRegistrationVote.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRegistrationVote proto.InternalMessageInfo

func (m *OracleRegistrationVote) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *OracleRegistrationVote) GetVoterUniqueId() string {
	if m != nil {
		return m.VoterUniqueId
	}
	return ""
}

func (m *OracleRegistrationVote) GetVoterAddress() string {
	if m != nil {
		return m.VoterAddress
	}
	return ""
}

func (m *OracleRegistrationVote) GetVotingTargetAddress() string {
	if m != nil {
		return m.VotingTargetAddress
	}
	return ""
}

func (m *OracleRegistrationVote) GetVoteOption() VoteOption {
	if m != nil {
		return m.VoteOption
	}
	return VOTE_OPTION_UNSPECIFIED
}

func (m *OracleRegistrationVote) GetEncryptedOraclePrivKey() []byte {
	if m != nil {
		return m.EncryptedOraclePrivKey
	}
	return nil
}

// UpgradeOracleInfo defines the info of oracle upgrade, which includes the target height of upgrade and unique ID of the new version of oracle
type OracleUpgradeInfo struct {
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Height   int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *OracleUpgradeInfo) Reset()         { *m = OracleUpgradeInfo{} }
func (m *OracleUpgradeInfo) String() string { return proto.CompactTextString(m) }
func (*OracleUpgradeInfo) ProtoMessage()    {}
func (*OracleUpgradeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5566fafdf0dde25a, []int{7}
}
func (m *OracleUpgradeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleUpgradeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleUpgradeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleUpgradeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleUpgradeInfo.Merge(m, src)
}
func (m *OracleUpgradeInfo) XXX_Size() int {
	return m.Size()
}
func (m *OracleUpgradeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleUpgradeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OracleUpgradeInfo proto.InternalMessageInfo

func (m *OracleUpgradeInfo) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *OracleUpgradeInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("panacea.oracle.v2alpha2.OracleStatus", OracleStatus_name, OracleStatus_value)
	proto.RegisterEnum("panacea.oracle.v2alpha2.OracleRegistrationStatus", OracleRegistrationStatus_name, OracleRegistrationStatus_value)
	proto.RegisterEnum("panacea.oracle.v2alpha2.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterEnum("panacea.oracle.v2alpha2.OracleRegistrationType", OracleRegistrationType_name, OracleRegistrationType_value)
	proto.RegisterType((*Oracle)(nil), "panacea.oracle.v2alpha2.Oracle")
	proto.RegisterType((*OracleRegistration)(nil), "panacea.oracle.v2alpha2.OracleRegistration")
	proto.RegisterType((*TallyResult)(nil), "panacea.oracle.v2alpha2.TallyResult")
	proto.RegisterType((*VoterInfo)(nil), "panacea.oracle.v2alpha2.VoterInfo")
	proto.RegisterType((*ConsensusTally)(nil), "panacea.oracle.v2alpha2.ConsensusTally")
	proto.RegisterType((*VotingPeriod)(nil), "panacea.oracle.v2alpha2.VotingPeriod")
	proto.RegisterType((*OracleRegistrationVote)(nil), "panacea.oracle.v2alpha2.OracleRegistrationVote")
	proto.RegisterType((*OracleUpgradeInfo)(nil), "panacea.oracle.v2alpha2.OracleUpgradeInfo")
}

func init() {
	proto.RegisterFile("panacea/oracle/v2alpha2/oracle.proto", fileDescriptor_5566fafdf0dde25a)
}

var fileDescriptor_5566fafdf0dde25a = []byte{
	// 1248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x73, 0xdb, 0x44,
	0x14, 0xce, 0xda, 0x89, 0xdb, 0x3c, 0x9b, 0xd4, 0xdd, 0x86, 0x54, 0x4d, 0x8b, 0x6d, 0xdc, 0xb4,
	0xf5, 0x74, 0x5a, 0x1b, 0xcc, 0x89, 0xce, 0xc0, 0xe0, 0xc4, 0x22, 0x55, 0xe9, 0xd8, 0x66, 0xad,
	0x04, 0xca, 0x30, 0xa3, 0x51, 0xac, 0x8d, 0x23, 0x2a, 0x6b, 0x85, 0xb4, 0x32, 0xf8, 0x0c, 0x07,
	0x6e, 0xf4, 0xc8, 0x91, 0x19, 0x7e, 0x04, 0x7f, 0xa1, 0xc3, 0xa9, 0xdc, 0x18, 0x0e, 0x81, 0x69,
	0x39, 0x70, 0xee, 0x2f, 0x60, 0xb4, 0x2b, 0x39, 0x76, 0x12, 0xbb, 0xa4, 0x27, 0xfb, 0xbd, 0xf7,
	0xbd, 0xb7, 0xdf, 0x7b, 0xfb, 0xde, 0x3e, 0xc1, 0x86, 0x67, 0xba, 0x66, 0x8f, 0x9a, 0x35, 0xe6,
	0x9b, 0x3d, 0x87, 0xd6, 0x86, 0x75, 0xd3, 0xf1, 0x0e, 0xcc, 0x7a, 0x2c, 0x57, 0x3d, 0x9f, 0x71,
	0x86, 0x2f, 0xc7, 0xa8, 0x6a, 0xac, 0x4d, 0x50, 0xeb, 0xab, 0x7d, 0xd6, 0x67, 0x02, 0x53, 0x8b,
	0xfe, 0x49, 0xf8, 0x7a, 0xb1, 0xcf, 0x58, 0xdf, 0xa1, 0x35, 0x21, 0xed, 0x85, 0xfb, 0x35, 0x6e,
	0x0f, 0x68, 0xc0, 0xcd, 0x81, 0x27, 0x01, 0xe5, 0x67, 0x08, 0x32, 0x6d, 0x11, 0x0a, 0x2b, 0x70,
	0xce, 0xb4, 0x2c, 0x9f, 0x06, 0x81, 0x82, 0x4a, 0xa8, 0xb2, 0x4c, 0x12, 0x11, 0x7f, 0x00, 0x99,
	0x80, 0x9b, 0x3c, 0x0c, 0x94, 0x54, 0x09, 0x55, 0x56, 0xea, 0x37, 0xaa, 0x33, 0x58, 0x54, 0x65,
	0xa8, 0xae, 0x00, 0x93, 0xd8, 0x09, 0xaf, 0x41, 0x26, 0xf4, 0xa2, 0x83, 0x95, 0x74, 0x09, 0x55,
	0x16, 0x49, 0x2c, 0xe1, 0x1d, 0x58, 0xfe, 0xca, 0xb4, 0x1d, 0x6a, 0x19, 0x26, 0x57, 0x16, 0x4b,
	0xa8, 0x92, 0xad, 0xaf, 0x57, 0x25, 0xe1, 0x6a, 0x42, 0xb8, 0xaa, 0x27, 0x84, 0x37, 0xaf, 0x3d,
	0x3d, 0x2c, 0xa2, 0x97, 0x87, 0xc5, 0xfc, 0xc8, 0x1c, 0x38, 0xf7, 0xca, 0x63, 0xd7, 0xf2, 0x93,
	0xbf, 0x8a, 0x88, 0x9c, 0x97, 0x72, 0x83, 0x97, 0x7f, 0x5a, 0x02, 0x2c, 0x79, 0x10, 0xda, 0xb7,
	0x03, 0xee, 0x9b, 0xdc, 0x66, 0x2e, 0xbe, 0x0a, 0xcb, 0xa1, 0x6b, 0x7f, 0x1d, 0x52, 0xc3, 0xb6,
	0xe2, 0x04, 0xcf, 0x4b, 0x85, 0x66, 0x4d, 0xe6, 0x9e, 0x9a, 0xce, 0xbd, 0x04, 0x39, 0x97, 0x59,
	0xd4, 0xf0, 0xc2, 0x3d, 0xe3, 0x31, 0x1d, 0x89, 0x14, 0x72, 0x04, 0x22, 0x5d, 0x27, 0xdc, 0xfb,
	0x84, 0x8e, 0xf0, 0x3d, 0x58, 0x9f, 0x44, 0x18, 0x3e, 0x1d, 0x30, 0x4e, 0x0d, 0x9f, 0x7a, 0xcc,
	0x97, 0x79, 0xe5, 0xc8, 0xda, 0x11, 0x9e, 0x08, 0x33, 0x11, 0x56, 0xfc, 0x0e, 0xac, 0x72, 0x3f,
	0x0c, 0x38, 0xb5, 0x8c, 0x3d, 0x87, 0xf5, 0x1e, 0x1b, 0x07, 0xd4, 0xee, 0x1f, 0x70, 0x65, 0xa9,
	0x84, 0x2a, 0x69, 0x82, 0x63, 0xdb, 0x66, 0x64, 0xba, 0x2f, 0x2c, 0xf8, 0x0e, 0xe0, 0x63, 0x1e,
	0x66, 0x70, 0xa0, 0x64, 0xc4, 0x29, 0xf9, 0x29, 0xbc, 0x19, 0x1c, 0xe0, 0xf7, 0xe1, 0x0a, 0x75,
	0x7b, 0xfe, 0xc8, 0x8b, 0xf0, 0xf2, 0xb2, 0x0c, 0xcf, 0xb7, 0x87, 0x22, 0x95, 0x73, 0x92, 0xda,
	0x18, 0x20, 0x8b, 0xd6, 0xf1, 0xed, 0x61, 0x94, 0x96, 0x36, 0xbe, 0xf4, 0xf3, 0xe2, 0xd2, 0xdf,
	0x7d, 0xc5, 0xa5, 0x4f, 0x16, 0xfb, 0x58, 0x03, 0x3c, 0x80, 0x37, 0x86, 0x8c, 0xdb, 0x6e, 0xdf,
	0xf0, 0xa8, 0x6f, 0x33, 0x4b, 0x59, 0x16, 0x97, 0x3d, 0xbb, 0x8d, 0x76, 0x05, 0xba, 0x23, 0xc0,
	0x24, 0x37, 0x9c, 0x90, 0xf0, 0x36, 0xe4, 0xb8, 0xe9, 0x38, 0x51, 0x99, 0x83, 0xd0, 0xe1, 0x0a,
	0x88, 0x50, 0x1b, 0x33, 0x43, 0xe9, 0x11, 0x98, 0x08, 0x2c, 0xc9, 0xf2, 0x23, 0x01, 0xaf, 0xc2,
	0x92, 0xcb, 0xdc, 0x1e, 0x55, 0xb2, 0xa2, 0x0c, 0x52, 0xc0, 0x5f, 0xc2, 0x45, 0x7f, 0x22, 0x11,
	0x83, 0x8f, 0x3c, 0xaa, 0xe4, 0x44, 0x01, 0x6a, 0x67, 0x28, 0x80, 0x3e, 0xf2, 0x28, 0xc9, 0xfb,
	0xc7, 0x34, 0xe5, 0x1f, 0xd3, 0x90, 0x9d, 0x20, 0x84, 0x3f, 0x82, 0xf4, 0x88, 0xc6, 0xe3, 0xb6,
	0x59, 0x7d, 0x7a, 0x58, 0x5c, 0xf8, 0xf3, 0xb0, 0x78, 0xb3, 0x6f, 0xf3, 0x83, 0x70, 0xaf, 0xda,
	0x63, 0x83, 0x5a, 0x8f, 0x05, 0x03, 0x16, 0xc4, 0x3f, 0x77, 0x03, 0xeb, 0x71, 0x2d, 0x22, 0x14,
	0x54, 0x35, 0x97, 0x93, 0xc8, 0x15, 0x7f, 0x08, 0x29, 0x97, 0xc9, 0x9e, 0x3d, 0x73, 0x80, 0x94,
	0xcb, 0xf0, 0x7d, 0xc8, 0xda, 0xee, 0xd0, 0x74, 0x6c, 0xcb, 0x88, 0x98, 0xa4, 0x4b, 0xe9, 0x4a,
	0xb6, 0x7e, 0x6b, 0x66, 0xa6, 0x5b, 0xcc, 0x0d, 0xa8, 0x1b, 0x84, 0x81, 0xcc, 0x02, 0x62, 0xdf,
	0x47, 0x34, 0xc0, 0x4d, 0x58, 0xe2, 0x8c, 0x9b, 0x8e, 0xe8, 0xf8, 0xb3, 0x93, 0x91, 0xce, 0xf8,
	0x16, 0x5c, 0xe8, 0x25, 0x67, 0x18, 0x43, 0xd3, 0x09, 0xa9, 0x98, 0x85, 0x1c, 0x59, 0x19, 0xab,
	0x77, 0x23, 0x2d, 0x56, 0x21, 0x27, 0x69, 0x0f, 0x19, 0xa7, 0x7e, 0xa0, 0x64, 0x04, 0xf3, 0xf2,
	0xbc, 0x96, 0xa2, 0xbe, 0xe6, 0xee, 0x33, 0x92, 0x15, 0x7e, 0x42, 0x0e, 0xca, 0xdf, 0x21, 0x58,
	0x1e, 0x9b, 0xf0, 0x75, 0xd1, 0xa8, 0xd4, 0x37, 0xa6, 0x1f, 0xc2, 0x9c, 0x50, 0x36, 0xe2, 0x17,
	0xe1, 0x53, 0xc8, 0x25, 0xdd, 0xcc, 0xbe, 0xa1, 0xfe, 0x6b, 0x16, 0x3f, 0x1b, 0x77, 0x75, 0x14,
	0xa2, 0xfc, 0x3b, 0x82, 0x95, 0xe9, 0xd2, 0x9e, 0x56, 0x08, 0x74, 0x6a, 0x21, 0xba, 0xe3, 0xe1,
	0x32, 0x07, 0x2c, 0x74, 0xf9, 0x6b, 0xf2, 0x89, 0x73, 0x6a, 0x88, 0x18, 0xb8, 0x01, 0x20, 0x0b,
	0x61, 0xbb, 0xfb, 0x2c, 0xee, 0x8a, 0xff, 0x53, 0xdb, 0xe5, 0x61, 0xf2, 0xb7, 0xfc, 0x0f, 0x82,
	0xdc, 0xe4, 0x1c, 0x63, 0x07, 0x2e, 0xc6, 0x44, 0x03, 0x6e, 0xfa, 0xdc, 0x10, 0x1b, 0x01, 0xbd,
	0xf2, 0xd9, 0xdf, 0x88, 0x12, 0x79, 0x79, 0x58, 0x54, 0xe4, 0xb3, 0x7f, 0x22, 0x84, 0x7c, 0xfe,
	0x2f, 0x48, 0x7d, 0x37, 0x52, 0x47, 0xbe, 0x78, 0x1f, 0x62, 0x95, 0x41, 0x5d, 0x4b, 0x9e, 0x95,
	0x7a, 0xe5, 0x59, 0xe5, 0xf8, 0xac, 0xb5, 0xa9, 0xb3, 0x92, 0x00, 0xf2, 0xa4, 0xb8, 0xda, 0xaa,
	0x6b, 0x45, 0x7e, 0xe5, 0x5f, 0x53, 0xb0, 0x76, 0x72, 0xfe, 0xa3, 0x8a, 0xcc, 0xdf, 0x38, 0x37,
	0x05, 0x3f, 0xea, 0x1b, 0x47, 0x10, 0xb9, 0x79, 0x64, 0x07, 0xee, 0x24, 0xb8, 0x13, 0x2d, 0x99,
	0x3e, 0xa5, 0x25, 0xeb, 0xf0, 0x66, 0xcc, 0x95, 0x9b, 0x7e, 0x9f, 0xf2, 0x31, 0x58, 0xcc, 0x22,
	0xb9, 0x24, 0x8d, 0xba, 0xb0, 0x25, 0x3e, 0x4d, 0x88, 0x5a, 0x90, 0x1a, 0xcc, 0x8b, 0x08, 0x8b,
	0x29, 0x5b, 0xa9, 0x5f, 0x9f, 0x7b, 0xc7, 0x6d, 0x01, 0x25, 0xa2, 0x35, 0xe4, 0xff, 0xf9, 0x0b,
	0x26, 0x33, 0x6f, 0xc1, 0x94, 0x5b, 0x70, 0x51, 0x2a, 0x76, 0xbc, 0xbe, 0x6f, 0x5a, 0x54, 0x4c,
	0xe0, 0xdc, 0x9a, 0xad, 0x41, 0x26, 0xde, 0x8f, 0x29, 0xb1, 0x1f, 0x63, 0xe9, 0xde, 0xe2, 0xbf,
	0x3f, 0x17, 0xd1, 0xed, 0xef, 0x11, 0xe4, 0x26, 0xbf, 0x3f, 0xf0, 0x5b, 0x70, 0xa5, 0x4d, 0x1a,
	0x5b, 0x0f, 0x55, 0xa3, 0xab, 0x37, 0xf4, 0x9d, 0xae, 0xb1, 0xd3, 0xea, 0x76, 0xd4, 0x2d, 0xed,
	0x63, 0x4d, 0x6d, 0xe6, 0x17, 0xb0, 0x02, 0xab, 0xd3, 0xe6, 0xc6, 0x96, 0xae, 0xed, 0xaa, 0x79,
	0x74, 0xd2, 0xf2, 0xa0, 0xa1, 0x3d, 0x54, 0x9b, 0xf9, 0x14, 0xbe, 0x0a, 0x97, 0x8f, 0x85, 0xec,
	0x6c, 0x93, 0x46, 0x53, 0x6b, 0x6d, 0xe7, 0xd3, 0xeb, 0x8b, 0x3f, 0xfc, 0x52, 0x58, 0xb8, 0xfd,
	0x1b, 0x02, 0x65, 0xd6, 0x46, 0xc4, 0xb7, 0xe1, 0x66, 0xec, 0x4f, 0xd4, 0x6d, 0xad, 0xab, 0x93,
	0x86, 0xae, 0xb5, 0x5b, 0xa7, 0xf3, 0xbb, 0x03, 0x95, 0x39, 0xd8, 0xdd, 0xb6, 0xae, 0xb5, 0xb6,
	0x8d, 0x8e, 0x4a, 0xb4, 0x76, 0x33, 0x8f, 0xf0, 0x0d, 0x78, 0x7b, 0x0e, 0xba, 0xd3, 0xe8, 0x76,
	0x45, 0x02, 0xb7, 0xe0, 0xfa, 0x1c, 0x18, 0x51, 0x1f, 0xa8, 0x5b, 0xba, 0xda, 0x1c, 0x27, 0xf3,
	0x39, 0xc0, 0xd1, 0xc5, 0x47, 0xd9, 0xef, 0xb6, 0x75, 0xd5, 0x68, 0x77, 0x84, 0xd3, 0x34, 0xdd,
	0x4b, 0x70, 0x61, 0xd2, 0xf8, 0x48, 0xed, 0xe6, 0x11, 0xc6, 0xb0, 0x32, 0xa9, 0x6c, 0xb5, 0xf3,
	0xa9, 0x38, 0xf2, 0x13, 0x74, 0xda, 0xdc, 0x44, 0x5b, 0x12, 0x57, 0x60, 0xe3, 0x34, 0x8e, 0xfa,
	0xa3, 0x8e, 0x7a, 0xec, 0xcc, 0x12, 0x5c, 0x9b, 0x89, 0x6c, 0xa9, 0x9f, 0xe5, 0x11, 0xde, 0x80,
	0xd2, 0xec, 0x58, 0xe2, 0xee, 0xd4, 0x84, 0xd2, 0xe6, 0xc3, 0xa7, 0xcf, 0x0b, 0xe8, 0xd9, 0xf3,
	0x02, 0xfa, 0xfb, 0x79, 0x01, 0x3d, 0x79, 0x51, 0x58, 0x78, 0xf6, 0xa2, 0xb0, 0xf0, 0xc7, 0x8b,
	0xc2, 0xc2, 0x17, 0xf5, 0x89, 0x47, 0x74, 0x40, 0x2d, 0x3b, 0xfa, 0xf2, 0xaa, 0xc5, 0x93, 0x72,
	0xb7, 0xc7, 0xfc, 0xe8, 0x6b, 0xbd, 0xf6, 0x6d, 0xf2, 0xe5, 0x2e, 0x1e, 0xd5, 0xbd, 0x8c, 0x78,
	0x5f, 0xde, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xce, 0x37, 0xcc, 0x78, 0xd8, 0x0b, 0x00, 0x00,
}

func (this *OracleUpgradeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleUpgradeInfo)
	if !ok {
		that2, ok := that.(OracleUpgradeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UniqueId != that1.UniqueId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (m *Oracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Oracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Oracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JailedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.JailedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.JailedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintOracle(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.Uptime != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Uptime))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationType != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.RegistrationType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TallyResult != nil {
		{
			size, err := m.TallyResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.VotingPeriod != nil {
		{
			size, err := m.VotingPeriod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.EncryptedOraclePrivKey) > 0 {
		i -= len(m.EncryptedOraclePrivKey)
		copy(dAtA[i:], m.EncryptedOraclePrivKey)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.EncryptedOraclePrivKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedBlockHash) > 0 {
		i -= len(m.TrustedBlockHash)
		copy(dAtA[i:], m.TrustedBlockHash)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.TrustedBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.TrustedBlockHeight != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.TrustedBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NodePubKeyRemoteReport) > 0 {
		i -= len(m.NodePubKeyRemoteReport)
		copy(dAtA[i:], m.NodePubKeyRemoteReport)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.NodePubKeyRemoteReport)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NodePubKey) > 0 {
		i -= len(m.NodePubKey)
		copy(dAtA[i:], m.NodePubKey)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.NodePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TallyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidVoters) > 0 {
		for iNdEx := len(m.ValidVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ConsensusValue) > 0 {
		i -= len(m.ConsensusValue)
		copy(dAtA[i:], m.ConsensusValue)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.ConsensusValue)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.InvalidYes) > 0 {
		for iNdEx := len(m.InvalidYes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InvalidYes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.No.Size()
		i -= size
		if _, err := m.No.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Yes.Size()
		i -= size
		if _, err := m.Yes.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VoterInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.VotingPower.Size()
		i -= size
		if _, err := m.VotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusTally) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusTally) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusTally) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterInfo) > 0 {
		for iNdEx := len(m.VoterInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoterInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOracle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.VotingAmount.Size()
		i -= size
		if _, err := m.VotingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ConsensusValue) > 0 {
		i -= len(m.ConsensusValue)
		copy(dAtA[i:], m.ConsensusValue)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.ConsensusValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VotingPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintOracle(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintOracle(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OracleRegistrationVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRegistrationVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRegistrationVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedOraclePrivKey) > 0 {
		i -= len(m.EncryptedOraclePrivKey)
		copy(dAtA[i:], m.EncryptedOraclePrivKey)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.EncryptedOraclePrivKey)))
		i--
		dAtA[i] = 0x32
	}
	if m.VoteOption != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.VoteOption))
		i--
		dAtA[i] = 0x28
	}
	if len(m.VotingTargetAddress) > 0 {
		i -= len(m.VotingTargetAddress)
		copy(dAtA[i:], m.VotingTargetAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.VotingTargetAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VoterAddress) > 0 {
		i -= len(m.VoterAddress)
		copy(dAtA[i:], m.VoterAddress)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.VoterAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterUniqueId) > 0 {
		i -= len(m.VoterUniqueId)
		copy(dAtA[i:], m.VoterUniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.VoterUniqueId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleUpgradeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleUpgradeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleUpgradeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintOracle(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UniqueId) > 0 {
		i -= len(m.UniqueId)
		copy(dAtA[i:], m.UniqueId)
		i = encodeVarintOracle(dAtA, i, uint64(len(m.UniqueId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Oracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOracle(uint64(m.Status))
	}
	if m.Uptime != 0 {
		n += 1 + sovOracle(uint64(m.Uptime))
	}
	if m.JailedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.JailedAt)
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *OracleRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.NodePubKey)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.NodePubKeyRemoteReport)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.TrustedBlockHeight != 0 {
		n += 1 + sovOracle(uint64(m.TrustedBlockHeight))
	}
	l = len(m.TrustedBlockHash)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.EncryptedOraclePrivKey)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOracle(uint64(m.Status))
	}
	if m.VotingPeriod != nil {
		l = m.VotingPeriod.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.TallyResult != nil {
		l = m.TallyResult.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.RegistrationType != 0 {
		n += 1 + sovOracle(uint64(m.RegistrationType))
	}
	return n
}

func (m *TallyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Yes.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = m.No.Size()
	n += 1 + l + sovOracle(uint64(l))
	if len(m.InvalidYes) > 0 {
		for _, e := range m.InvalidYes {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	l = m.Total.Size()
	n += 1 + l + sovOracle(uint64(l))
	l = len(m.ConsensusValue)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if len(m.ValidVoters) > 0 {
		for _, e := range m.ValidVoters {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *VoterInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.VotingPower.Size()
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *ConsensusTally) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsensusValue)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = m.VotingAmount.Size()
	n += 1 + l + sovOracle(uint64(l))
	if len(m.VoterInfo) > 0 {
		for _, e := range m.VoterInfo {
			l = e.Size()
			n += 1 + l + sovOracle(uint64(l))
		}
	}
	return n
}

func (m *VotingPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime)
	n += 1 + l + sovOracle(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *OracleRegistrationVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.VoterUniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.VoterAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	l = len(m.VotingTargetAddress)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.VoteOption != 0 {
		n += 1 + sovOracle(uint64(m.VoteOption))
	}
	l = len(m.EncryptedOraclePrivKey)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func (m *OracleUpgradeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovOracle(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovOracle(uint64(m.Height))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Oracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OracleStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JailedAt == nil {
				m.JailedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.JailedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKey = append(m.NodePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKey == nil {
				m.NodePubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePubKeyRemoteReport", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePubKeyRemoteReport = append(m.NodePubKeyRemoteReport[:0], dAtA[iNdEx:postIndex]...)
			if m.NodePubKeyRemoteReport == nil {
				m.NodePubKeyRemoteReport = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHeight", wireType)
			}
			m.TrustedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrustedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedBlockHash = append(m.TrustedBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TrustedBlockHash == nil {
				m.TrustedBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedOraclePrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedOraclePrivKey = append(m.EncryptedOraclePrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedOraclePrivKey == nil {
				m.EncryptedOraclePrivKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OracleRegistrationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotingPeriod == nil {
				m.VotingPeriod = &VotingPeriod{}
			}
			if err := m.VotingPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TallyResult == nil {
				m.TallyResult = &TallyResult{}
			}
			if err := m.TallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationType", wireType)
			}
			m.RegistrationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationType |= OracleRegistrationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Yes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.No.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidYes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidYes = append(m.InvalidYes, &ConsensusTally{})
			if err := m.InvalidYes[len(m.InvalidYes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusValue = append(m.ConsensusValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusValue == nil {
				m.ConsensusValue = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidVoters = append(m.ValidVoters, &VoterInfo{})
			if err := m.ValidVoters[len(m.ValidVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoterInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusTally) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusTally: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusTally: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusValue = append(m.ConsensusValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ConsensusValue == nil {
				m.ConsensusValue = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterInfo = append(m.VoterInfo, &VoterInfo{})
			if err := m.VoterInfo[len(m.VoterInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotingPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRegistrationVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRegistrationVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRegistrationVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterUniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterUniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingTargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingTargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteOption", wireType)
			}
			m.VoteOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteOption |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedOraclePrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedOraclePrivKey = append(m.EncryptedOraclePrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedOraclePrivKey == nil {
				m.EncryptedOraclePrivKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleUpgradeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleUpgradeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleUpgradeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
