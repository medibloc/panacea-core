// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datapool/v2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterDataValidator defines the Msg/RegisterDataValidator request type.
type MsgRegisterDataValidator struct {
	ValidatorDetail *DataValidator `protobuf:"bytes,1,opt,name=validator_detail,json=validatorDetail,proto3" json:"validator_detail,omitempty"`
}

func (m *MsgRegisterDataValidator) Reset()         { *m = MsgRegisterDataValidator{} }
func (m *MsgRegisterDataValidator) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDataValidator) ProtoMessage()    {}
func (*MsgRegisterDataValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{0}
}
func (m *MsgRegisterDataValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDataValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDataValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDataValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDataValidator.Merge(m, src)
}
func (m *MsgRegisterDataValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDataValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDataValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDataValidator proto.InternalMessageInfo

func (m *MsgRegisterDataValidator) GetValidatorDetail() *DataValidator {
	if m != nil {
		return m.ValidatorDetail
	}
	return nil
}

// MsgRegisterDataValidatorResponse defines the Msg/RegisterDataValidator response type.
type MsgRegisterDataValidatorResponse struct {
}

func (m *MsgRegisterDataValidatorResponse) Reset()         { *m = MsgRegisterDataValidatorResponse{} }
func (m *MsgRegisterDataValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDataValidatorResponse) ProtoMessage()    {}
func (*MsgRegisterDataValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{1}
}
func (m *MsgRegisterDataValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDataValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDataValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDataValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDataValidatorResponse.Merge(m, src)
}
func (m *MsgRegisterDataValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDataValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDataValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDataValidatorResponse proto.InternalMessageInfo

// MsgCreatePool defines the Msg/CreatePool request type.
type MsgCreatePool struct {
	DataSchema            []string       `protobuf:"bytes,1,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	TargetNumData         uint64         `protobuf:"varint,2,opt,name=target_num_data,json=targetNumData,proto3" json:"target_num_data,omitempty"`
	MaxNftSupply          uint64         `protobuf:"varint,3,opt,name=max_nft_supply,json=maxNftSupply,proto3" json:"max_nft_supply,omitempty"`
	NftPrice              *types.Coin    `protobuf:"bytes,4,opt,name=nft_price,json=nftPrice,proto3" json:"nft_price,omitempty"`
	TrustedDataValidators []string       `protobuf:"bytes,5,rep,name=trusted_data_validators,json=trustedDataValidators,proto3" json:"trusted_data_validators,omitempty"`
	TrustedDataIssuers    []string       `protobuf:"bytes,6,rep,name=trusted_data_issuers,json=trustedDataIssuers,proto3" json:"trusted_data_issuers,omitempty"`
	Deposit               *types.Coin    `protobuf:"bytes,7,opt,name=deposit,proto3" json:"deposit,omitempty"`
	DownloadPeriod        *time.Duration `protobuf:"bytes,8,opt,name=download_period,json=downloadPeriod,proto3,stdduration" json:"download_period,omitempty"`
	Curator               string         `protobuf:"bytes,9,opt,name=curator,proto3" json:"curator,omitempty"`
}

func (m *MsgCreatePool) Reset()         { *m = MsgCreatePool{} }
func (m *MsgCreatePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePool) ProtoMessage()    {}
func (*MsgCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{2}
}
func (m *MsgCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePool.Merge(m, src)
}
func (m *MsgCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePool proto.InternalMessageInfo

func (m *MsgCreatePool) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *MsgCreatePool) GetTargetNumData() uint64 {
	if m != nil {
		return m.TargetNumData
	}
	return 0
}

func (m *MsgCreatePool) GetMaxNftSupply() uint64 {
	if m != nil {
		return m.MaxNftSupply
	}
	return 0
}

func (m *MsgCreatePool) GetNftPrice() *types.Coin {
	if m != nil {
		return m.NftPrice
	}
	return nil
}

func (m *MsgCreatePool) GetTrustedDataValidators() []string {
	if m != nil {
		return m.TrustedDataValidators
	}
	return nil
}

func (m *MsgCreatePool) GetTrustedDataIssuers() []string {
	if m != nil {
		return m.TrustedDataIssuers
	}
	return nil
}

func (m *MsgCreatePool) GetDeposit() *types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgCreatePool) GetDownloadPeriod() *time.Duration {
	if m != nil {
		return m.DownloadPeriod
	}
	return nil
}

func (m *MsgCreatePool) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
type MsgCreatePoolResponse struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round         uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	CurationNftId uint64 `protobuf:"varint,3,opt,name=curation_nft_id,json=curationNftId,proto3" json:"curation_nft_id,omitempty"`
}

func (m *MsgCreatePoolResponse) Reset()         { *m = MsgCreatePoolResponse{} }
func (m *MsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolResponse) ProtoMessage()    {}
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{3}
}
func (m *MsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolResponse.Merge(m, src)
}
func (m *MsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolResponse proto.InternalMessageInfo

func (m *MsgCreatePoolResponse) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgCreatePoolResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MsgCreatePoolResponse) GetCurationNftId() uint64 {
	if m != nil {
		return m.CurationNftId
	}
	return 0
}

// MsgSellData defines the Msg/SellData request type.
type MsgSellData struct {
	Cert   *DataValidationCertificate `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Seller string                     `protobuf:"bytes,2,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *MsgSellData) Reset()         { *m = MsgSellData{} }
func (m *MsgSellData) String() string { return proto.CompactTextString(m) }
func (*MsgSellData) ProtoMessage()    {}
func (*MsgSellData) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{4}
}
func (m *MsgSellData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellData.Merge(m, src)
}
func (m *MsgSellData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellData proto.InternalMessageInfo

func (m *MsgSellData) GetCert() *DataValidationCertificate {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *MsgSellData) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

// MsgSellDataResponse defines the Msg/SellData response type.
type MsgSellDataResponse struct {
	AccumPoolShareToken *types.Coin `protobuf:"bytes,1,opt,name=accum_pool_share_token,json=accumPoolShareToken,proto3" json:"accum_pool_share_token,omitempty"`
}

func (m *MsgSellDataResponse) Reset()         { *m = MsgSellDataResponse{} }
func (m *MsgSellDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSellDataResponse) ProtoMessage()    {}
func (*MsgSellDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{5}
}
func (m *MsgSellDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSellDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSellDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSellDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSellDataResponse.Merge(m, src)
}
func (m *MsgSellDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSellDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSellDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSellDataResponse proto.InternalMessageInfo

func (m *MsgSellDataResponse) GetAccumPoolShareToken() *types.Coin {
	if m != nil {
		return m.AccumPoolShareToken
	}
	return nil
}

// MsgBuyDataAccessNFT defines the Msg/BuyDataAccessNFT request type.
type MsgBuyDataAccessNFT struct {
	PoolId  uint64      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round   uint64      `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Payment *types.Coin `protobuf:"bytes,3,opt,name=payment,proto3" json:"payment,omitempty"`
	Buyer   string      `protobuf:"bytes,4,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *MsgBuyDataAccessNFT) Reset()         { *m = MsgBuyDataAccessNFT{} }
func (m *MsgBuyDataAccessNFT) String() string { return proto.CompactTextString(m) }
func (*MsgBuyDataAccessNFT) ProtoMessage()    {}
func (*MsgBuyDataAccessNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{6}
}
func (m *MsgBuyDataAccessNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyDataAccessNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyDataAccessNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyDataAccessNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyDataAccessNFT.Merge(m, src)
}
func (m *MsgBuyDataAccessNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyDataAccessNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyDataAccessNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyDataAccessNFT proto.InternalMessageInfo

func (m *MsgBuyDataAccessNFT) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgBuyDataAccessNFT) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MsgBuyDataAccessNFT) GetPayment() *types.Coin {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *MsgBuyDataAccessNFT) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

// MsgBuyDataAccessNFTResponse defines the Msg/BuyDataAccessNFT response type.
type MsgBuyDataAccessNFTResponse struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round  uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	NftId  uint64 `protobuf:"varint,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *MsgBuyDataAccessNFTResponse) Reset()         { *m = MsgBuyDataAccessNFTResponse{} }
func (m *MsgBuyDataAccessNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBuyDataAccessNFTResponse) ProtoMessage()    {}
func (*MsgBuyDataAccessNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{7}
}
func (m *MsgBuyDataAccessNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBuyDataAccessNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBuyDataAccessNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBuyDataAccessNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBuyDataAccessNFTResponse.Merge(m, src)
}
func (m *MsgBuyDataAccessNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBuyDataAccessNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBuyDataAccessNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBuyDataAccessNFTResponse proto.InternalMessageInfo

func (m *MsgBuyDataAccessNFTResponse) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgBuyDataAccessNFTResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MsgBuyDataAccessNFTResponse) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

// MsgRedeemDataAccessNFT defines the Msg/RedeemDataAccessNFT request type.
type MsgRedeemDataAccessNFT struct {
	PoolId   uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round    uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	NftId    uint64 `protobuf:"varint,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Redeemer string `protobuf:"bytes,4,opt,name=redeemer,proto3" json:"redeemer,omitempty"`
}

func (m *MsgRedeemDataAccessNFT) Reset()         { *m = MsgRedeemDataAccessNFT{} }
func (m *MsgRedeemDataAccessNFT) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemDataAccessNFT) ProtoMessage()    {}
func (*MsgRedeemDataAccessNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{8}
}
func (m *MsgRedeemDataAccessNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemDataAccessNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemDataAccessNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemDataAccessNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemDataAccessNFT.Merge(m, src)
}
func (m *MsgRedeemDataAccessNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemDataAccessNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemDataAccessNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemDataAccessNFT proto.InternalMessageInfo

func (m *MsgRedeemDataAccessNFT) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgRedeemDataAccessNFT) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *MsgRedeemDataAccessNFT) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

func (m *MsgRedeemDataAccessNFT) GetRedeemer() string {
	if m != nil {
		return m.Redeemer
	}
	return ""
}

// MsgRedeemDataAccessNFTResponse defines the Msg/RedeemDataAccessNFT response type.
type MsgRedeemDataAccessNFTResponse struct {
	Receipt *DataAccessNFTRedeemReceipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (m *MsgRedeemDataAccessNFTResponse) Reset()         { *m = MsgRedeemDataAccessNFTResponse{} }
func (m *MsgRedeemDataAccessNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemDataAccessNFTResponse) ProtoMessage()    {}
func (*MsgRedeemDataAccessNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3d400cb0e531d6, []int{9}
}
func (m *MsgRedeemDataAccessNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemDataAccessNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemDataAccessNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemDataAccessNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemDataAccessNFTResponse.Merge(m, src)
}
func (m *MsgRedeemDataAccessNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemDataAccessNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemDataAccessNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemDataAccessNFTResponse proto.InternalMessageInfo

func (m *MsgRedeemDataAccessNFTResponse) GetReceipt() *DataAccessNFTRedeemReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgRegisterDataValidator)(nil), "panacea.datapool.v2.MsgRegisterDataValidator")
	proto.RegisterType((*MsgRegisterDataValidatorResponse)(nil), "panacea.datapool.v2.MsgRegisterDataValidatorResponse")
	proto.RegisterType((*MsgCreatePool)(nil), "panacea.datapool.v2.MsgCreatePool")
	proto.RegisterType((*MsgCreatePoolResponse)(nil), "panacea.datapool.v2.MsgCreatePoolResponse")
	proto.RegisterType((*MsgSellData)(nil), "panacea.datapool.v2.MsgSellData")
	proto.RegisterType((*MsgSellDataResponse)(nil), "panacea.datapool.v2.MsgSellDataResponse")
	proto.RegisterType((*MsgBuyDataAccessNFT)(nil), "panacea.datapool.v2.MsgBuyDataAccessNFT")
	proto.RegisterType((*MsgBuyDataAccessNFTResponse)(nil), "panacea.datapool.v2.MsgBuyDataAccessNFTResponse")
	proto.RegisterType((*MsgRedeemDataAccessNFT)(nil), "panacea.datapool.v2.MsgRedeemDataAccessNFT")
	proto.RegisterType((*MsgRedeemDataAccessNFTResponse)(nil), "panacea.datapool.v2.MsgRedeemDataAccessNFTResponse")
}

func init() { proto.RegisterFile("panacea/datapool/v2/tx.proto", fileDescriptor_eb3d400cb0e531d6) }

var fileDescriptor_eb3d400cb0e531d6 = []byte{
	// 862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0x69, 0x9a, 0x34, 0xa7, 0x74, 0xbb, 0x72, 0x7f, 0xd6, 0x04, 0x94, 0x8d, 0x2c, 0x84,
	0x22, 0xd0, 0xda, 0xdb, 0x56, 0xec, 0x3d, 0x6d, 0x85, 0xa8, 0x50, 0xa2, 0xca, 0x5d, 0xed, 0x05,
	0x42, 0xb2, 0x26, 0xe3, 0x13, 0x77, 0xb4, 0xb6, 0xc7, 0x9a, 0x19, 0x77, 0x1b, 0x24, 0x9e, 0x01,
	0x2e, 0xb9, 0xe7, 0x29, 0x78, 0x03, 0x2e, 0xf7, 0x92, 0x3b, 0x50, 0xfb, 0x22, 0x68, 0x26, 0xb6,
	0xb7, 0x61, 0x9d, 0x96, 0xc2, 0x5d, 0xce, 0x9c, 0xef, 0x3b, 0x3f, 0xf3, 0x7d, 0x9e, 0xc0, 0x27,
	0x39, 0xc9, 0x08, 0x45, 0xe2, 0x47, 0x44, 0x91, 0x9c, 0xf3, 0xc4, 0xbf, 0x3c, 0xf0, 0xd5, 0x95,
	0x97, 0x0b, 0xae, 0xb8, 0xbd, 0x5d, 0x66, 0xbd, 0x2a, 0xeb, 0x5d, 0x1e, 0xf4, 0x76, 0x62, 0x1e,
	0x73, 0x93, 0xf7, 0xf5, 0xaf, 0x39, 0xb4, 0xd7, 0xa7, 0x5c, 0xa6, 0x5c, 0xfa, 0x13, 0x22, 0xd1,
	0xbf, 0xdc, 0x9f, 0xa0, 0x22, 0xfb, 0x3e, 0xe5, 0x2c, 0xab, 0xf2, 0x31, 0xe7, 0x71, 0x82, 0xbe,
	0x89, 0x26, 0xc5, 0xd4, 0x8f, 0x0a, 0x41, 0x14, 0xe3, 0x75, 0xbe, 0x69, 0x10, 0xd3, 0xd2, 0xe4,
	0x5d, 0x06, 0xce, 0x48, 0xc6, 0x01, 0xc6, 0x4c, 0x2a, 0x14, 0x27, 0x44, 0x91, 0x57, 0x24, 0x61,
	0x11, 0x51, 0x5c, 0xd8, 0x23, 0x78, 0x7c, 0x59, 0x05, 0x61, 0x84, 0x8a, 0xb0, 0xc4, 0xb1, 0x06,
	0xd6, 0x70, 0xe3, 0xc0, 0xf5, 0x1a, 0x36, 0xf0, 0x16, 0xd8, 0xc1, 0x56, 0xcd, 0x3d, 0x31, 0x54,
	0xd7, 0x85, 0xc1, 0xb2, 0x56, 0x01, 0xca, 0x9c, 0x67, 0x12, 0xdd, 0xdf, 0x56, 0x61, 0x73, 0x24,
	0xe3, 0x63, 0x81, 0x44, 0xe1, 0x19, 0xe7, 0x89, 0xfd, 0x14, 0x36, 0x74, 0x8f, 0x50, 0xd2, 0x0b,
	0x4c, 0x89, 0x63, 0x0d, 0x56, 0x87, 0xdd, 0x00, 0xf4, 0xd1, 0xb9, 0x39, 0xb1, 0x3f, 0x83, 0x2d,
	0x45, 0x44, 0x8c, 0x2a, 0xcc, 0x8a, 0x34, 0xd4, 0x09, 0xe7, 0x83, 0x81, 0x35, 0x6c, 0x05, 0x9b,
	0xf3, 0xe3, 0x71, 0x91, 0xea, 0x5e, 0xf6, 0xa7, 0xf0, 0x28, 0x25, 0x57, 0x61, 0x36, 0x55, 0xa1,
	0x2c, 0xf2, 0x3c, 0x99, 0x39, 0xab, 0x06, 0xf6, 0x61, 0x4a, 0xae, 0xc6, 0x53, 0x75, 0x6e, 0xce,
	0xec, 0x17, 0xd0, 0xd5, 0x88, 0x5c, 0x30, 0x8a, 0x4e, 0xcb, 0x2c, 0xfb, 0x91, 0x37, 0xd7, 0xc0,
	0xd3, 0x1a, 0x78, 0xa5, 0x06, 0xde, 0x31, 0x67, 0x59, 0xb0, 0x9e, 0x4d, 0xd5, 0x99, 0x86, 0xda,
	0x2f, 0xe0, 0x89, 0x12, 0x85, 0x54, 0x18, 0x99, 0x11, 0xc2, 0x7a, 0x79, 0xe9, 0xac, 0x99, 0x91,
	0x77, 0xcb, 0xf4, 0xc2, 0xde, 0xd2, 0x7e, 0x0e, 0x3b, 0x0b, 0x3c, 0x26, 0x65, 0x81, 0x42, 0x3a,
	0x6d, 0x43, 0xb2, 0x6f, 0x91, 0x4e, 0xe7, 0x19, 0xfb, 0x10, 0x3a, 0x11, 0xe6, 0x5c, 0x32, 0xe5,
	0x74, 0xee, 0x9b, 0xaf, 0x42, 0xda, 0xdf, 0xc0, 0x56, 0xc4, 0xdf, 0x64, 0x09, 0x27, 0x51, 0x98,
	0xa3, 0x60, 0x3c, 0x72, 0xd6, 0x4b, 0xf2, 0xdc, 0x40, 0x5e, 0x65, 0x20, 0xef, 0xa4, 0x34, 0xd0,
	0x51, 0xeb, 0x97, 0x3f, 0x9f, 0x5a, 0xc1, 0xa3, 0x8a, 0x77, 0x66, 0x68, 0xb6, 0x03, 0x1d, 0xaa,
	0x11, 0x5c, 0x38, 0xdd, 0x81, 0x35, 0xec, 0x06, 0x55, 0xe8, 0x66, 0xb0, 0xbb, 0x20, 0x5d, 0x25,
	0xaa, 0xfd, 0x04, 0x3a, 0xda, 0x22, 0x21, 0x8b, 0x8c, 0x7d, 0x5a, 0x41, 0x5b, 0x87, 0xa7, 0x91,
	0xbd, 0x03, 0x6b, 0x82, 0x17, 0x59, 0x54, 0x0a, 0x36, 0x0f, 0xb4, 0xa0, 0xb4, 0x9c, 0xc1, 0xa8,
	0xc5, 0xa2, 0x52, 0xa9, 0xcd, 0xea, 0x78, 0x3c, 0x55, 0xa7, 0x91, 0xcb, 0x60, 0x63, 0x24, 0xe3,
	0x73, 0x4c, 0x12, 0xa3, 0xef, 0x11, 0xb4, 0x28, 0x0a, 0x55, 0x3a, 0xd4, 0xbb, 0xcf, 0xa1, 0x8c,
	0x67, 0xc7, 0x28, 0x14, 0x9b, 0x32, 0x4a, 0x14, 0x06, 0x86, 0x6b, 0xef, 0x41, 0x5b, 0x62, 0x92,
	0xa0, 0x30, 0x13, 0x75, 0x83, 0x32, 0x72, 0x11, 0xb6, 0x6f, 0xb5, 0xaa, 0x17, 0x1b, 0xc3, 0x1e,
	0xa1, 0xb4, 0x48, 0x43, 0xb3, 0x9e, 0xbc, 0x20, 0x02, 0x43, 0xc5, 0x5f, 0x63, 0x56, 0x0e, 0x71,
	0x87, 0x32, 0xdb, 0x86, 0xa8, 0xaf, 0xe9, 0x5c, 0xd3, 0x5e, 0x6a, 0x96, 0xfb, 0x93, 0x65, 0xfa,
	0x1c, 0x15, 0x33, 0xdd, 0xe6, 0x2b, 0x4a, 0x51, 0xca, 0xf1, 0xd7, 0x2f, 0x1f, 0x7a, 0x81, 0x87,
	0xd0, 0xc9, 0xc9, 0x2c, 0xc5, 0x4c, 0x99, 0x8b, 0xbb, 0xdb, 0x21, 0x25, 0x52, 0x97, 0x9a, 0x14,
	0x33, 0x14, 0xc6, 0xf4, 0xdd, 0x60, 0x1e, 0xb8, 0x14, 0x3e, 0x6e, 0x18, 0xe8, 0xbf, 0x2a, 0xbb,
	0x0b, 0xed, 0x05, 0x41, 0xd7, 0x32, 0x23, 0xe4, 0x0f, 0xb0, 0x67, 0x1e, 0x86, 0x08, 0x31, 0xfd,
	0x5f, 0x8b, 0x37, 0xd7, 0xb7, 0x7b, 0xb0, 0x2e, 0x4c, 0xf1, 0x7a, 0xbb, 0x3a, 0x76, 0x5f, 0x43,
	0xbf, 0xb9, 0x77, 0xbd, 0xe3, 0x29, 0x74, 0x04, 0x52, 0x64, 0x79, 0x65, 0x2d, 0x7f, 0xa9, 0xb5,
	0x6e, 0x91, 0x75, 0xbd, 0x60, 0x4e, 0x0b, 0x2a, 0xfe, 0xc1, 0xaf, 0x2d, 0x58, 0x1d, 0xc9, 0xd8,
	0xfe, 0x11, 0x76, 0x9b, 0x5f, 0xdc, 0x67, 0x8d, 0xa5, 0x97, 0xbd, 0x9a, 0xbd, 0x2f, 0x1f, 0x04,
	0xaf, 0x37, 0xfa, 0x1e, 0xe0, 0xd6, 0x03, 0xeb, 0x2e, 0x2b, 0xf2, 0x0e, 0xd3, 0xfb, 0xfc, 0x7e,
	0x4c, 0x5d, 0xfd, 0x15, 0xac, 0xd7, 0xdf, 0xe4, 0x60, 0x19, 0xaf, 0x42, 0xf4, 0x86, 0xf7, 0x21,
	0xea, 0xba, 0x19, 0x3c, 0x7e, 0xef, 0xc3, 0x58, 0xca, 0xfe, 0x27, 0xb2, 0xf7, 0xfc, 0xdf, 0x22,
	0xeb, 0x7e, 0x6f, 0x60, 0xbb, 0xc9, 0x92, 0x5f, 0x2c, 0xbf, 0xf3, 0xf7, 0xc0, 0xbd, 0xc3, 0x07,
	0x80, 0xab, 0xc6, 0x47, 0xdf, 0xfe, 0x7e, 0xdd, 0xb7, 0xde, 0x5e, 0xf7, 0xad, 0xbf, 0xae, 0xfb,
	0xd6, 0xcf, 0x37, 0xfd, 0x95, 0xb7, 0x37, 0xfd, 0x95, 0x3f, 0x6e, 0xfa, 0x2b, 0xdf, 0xed, 0xc7,
	0x4c, 0x5d, 0x14, 0x13, 0x8f, 0xf2, 0xd4, 0x4f, 0x31, 0x62, 0x93, 0x84, 0x53, 0xbf, 0xec, 0xf0,
	0x8c, 0x72, 0x81, 0xfe, 0xd5, 0xbb, 0xff, 0x79, 0x35, 0xcb, 0x51, 0x4e, 0xda, 0xe6, 0x5d, 0x3f,
	0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xb5, 0x48, 0xd0, 0x91, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterDataValidator defines a method for registration of data validator.
	RegisterDataValidator(ctx context.Context, in *MsgRegisterDataValidator, opts ...grpc.CallOption) (*MsgRegisterDataValidatorResponse, error)
	// CreatePool defines a method for creating data pool.
	CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error)
	// SellData defines a method for selling data
	SellData(ctx context.Context, in *MsgSellData, opts ...grpc.CallOption) (*MsgSellDataResponse, error)
	// BuyDataAccessNFT defines a method for buying data access NFT
	BuyDataAccessNFT(ctx context.Context, in *MsgBuyDataAccessNFT, opts ...grpc.CallOption) (*MsgBuyDataAccessNFTResponse, error)
	// RedeemDataAccessNFT defines a method for redeeming data access NFT to get data
	RedeemDataAccessNFT(ctx context.Context, in *MsgRedeemDataAccessNFT, opts ...grpc.CallOption) (*MsgRedeemDataAccessNFTResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterDataValidator(ctx context.Context, in *MsgRegisterDataValidator, opts ...grpc.CallOption) (*MsgRegisterDataValidatorResponse, error) {
	out := new(MsgRegisterDataValidatorResponse)
	err := c.cc.Invoke(ctx, "/panacea.datapool.v2.Msg/RegisterDataValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error) {
	out := new(MsgCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/panacea.datapool.v2.Msg/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SellData(ctx context.Context, in *MsgSellData, opts ...grpc.CallOption) (*MsgSellDataResponse, error) {
	out := new(MsgSellDataResponse)
	err := c.cc.Invoke(ctx, "/panacea.datapool.v2.Msg/SellData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BuyDataAccessNFT(ctx context.Context, in *MsgBuyDataAccessNFT, opts ...grpc.CallOption) (*MsgBuyDataAccessNFTResponse, error) {
	out := new(MsgBuyDataAccessNFTResponse)
	err := c.cc.Invoke(ctx, "/panacea.datapool.v2.Msg/BuyDataAccessNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemDataAccessNFT(ctx context.Context, in *MsgRedeemDataAccessNFT, opts ...grpc.CallOption) (*MsgRedeemDataAccessNFTResponse, error) {
	out := new(MsgRedeemDataAccessNFTResponse)
	err := c.cc.Invoke(ctx, "/panacea.datapool.v2.Msg/RedeemDataAccessNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterDataValidator defines a method for registration of data validator.
	RegisterDataValidator(context.Context, *MsgRegisterDataValidator) (*MsgRegisterDataValidatorResponse, error)
	// CreatePool defines a method for creating data pool.
	CreatePool(context.Context, *MsgCreatePool) (*MsgCreatePoolResponse, error)
	// SellData defines a method for selling data
	SellData(context.Context, *MsgSellData) (*MsgSellDataResponse, error)
	// BuyDataAccessNFT defines a method for buying data access NFT
	BuyDataAccessNFT(context.Context, *MsgBuyDataAccessNFT) (*MsgBuyDataAccessNFTResponse, error)
	// RedeemDataAccessNFT defines a method for redeeming data access NFT to get data
	RedeemDataAccessNFT(context.Context, *MsgRedeemDataAccessNFT) (*MsgRedeemDataAccessNFTResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterDataValidator(ctx context.Context, req *MsgRegisterDataValidator) (*MsgRegisterDataValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataValidator not implemented")
}
func (*UnimplementedMsgServer) CreatePool(ctx context.Context, req *MsgCreatePool) (*MsgCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (*UnimplementedMsgServer) SellData(ctx context.Context, req *MsgSellData) (*MsgSellDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellData not implemented")
}
func (*UnimplementedMsgServer) BuyDataAccessNFT(ctx context.Context, req *MsgBuyDataAccessNFT) (*MsgBuyDataAccessNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyDataAccessNFT not implemented")
}
func (*UnimplementedMsgServer) RedeemDataAccessNFT(ctx context.Context, req *MsgRedeemDataAccessNFT) (*MsgRedeemDataAccessNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemDataAccessNFT not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterDataValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDataValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDataValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datapool.v2.Msg/RegisterDataValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDataValidator(ctx, req.(*MsgRegisterDataValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datapool.v2.Msg/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePool(ctx, req.(*MsgCreatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SellData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSellData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SellData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datapool.v2.Msg/SellData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SellData(ctx, req.(*MsgSellData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BuyDataAccessNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBuyDataAccessNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BuyDataAccessNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datapool.v2.Msg/BuyDataAccessNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BuyDataAccessNFT(ctx, req.(*MsgBuyDataAccessNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemDataAccessNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemDataAccessNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemDataAccessNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/panacea.datapool.v2.Msg/RedeemDataAccessNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemDataAccessNFT(ctx, req.(*MsgRedeemDataAccessNFT))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "panacea.datapool.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDataValidator",
			Handler:    _Msg_RegisterDataValidator_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Msg_CreatePool_Handler,
		},
		{
			MethodName: "SellData",
			Handler:    _Msg_SellData_Handler,
		},
		{
			MethodName: "BuyDataAccessNFT",
			Handler:    _Msg_BuyDataAccessNFT_Handler,
		},
		{
			MethodName: "RedeemDataAccessNFT",
			Handler:    _Msg_RedeemDataAccessNFT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "panacea/datapool/v2/tx.proto",
}

func (m *MsgRegisterDataValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDataValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDataValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidatorDetail != nil {
		{
			size, err := m.ValidatorDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDataValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDataValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDataValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DownloadPeriod != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.DownloadPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.DownloadPeriod):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedDataIssuers) > 0 {
		for iNdEx := len(m.TrustedDataIssuers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataIssuers[iNdEx])
			copy(dAtA[i:], m.TrustedDataIssuers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TrustedDataIssuers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TrustedDataValidators) > 0 {
		for iNdEx := len(m.TrustedDataValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataValidators[iNdEx])
			copy(dAtA[i:], m.TrustedDataValidators[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TrustedDataValidators[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NftPrice != nil {
		{
			size, err := m.NftPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxNftSupply != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxNftSupply))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetNumData != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TargetNumData))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurationNftId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CurationNftId))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x12
	}
	if m.Cert != nil {
		{
			size, err := m.Cert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSellDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSellDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSellDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccumPoolShareToken != nil {
		{
			size, err := m.AccumPoolShareToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyDataAccessNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyDataAccessNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyDataAccessNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x22
	}
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBuyDataAccessNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBuyDataAccessNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBuyDataAccessNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemDataAccessNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemDataAccessNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemDataAccessNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redeemer) > 0 {
		i -= len(m.Redeemer)
		copy(dAtA[i:], m.Redeemer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Redeemer)))
		i--
		dAtA[i] = 0x22
	}
	if m.NftId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemDataAccessNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemDataAccessNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemDataAccessNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receipt != nil {
		{
			size, err := m.Receipt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterDataValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorDetail != nil {
		l = m.ValidatorDetail.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterDataValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.TargetNumData != 0 {
		n += 1 + sovTx(uint64(m.TargetNumData))
	}
	if m.MaxNftSupply != 0 {
		n += 1 + sovTx(uint64(m.MaxNftSupply))
	}
	if m.NftPrice != nil {
		l = m.NftPrice.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TrustedDataValidators) > 0 {
		for _, s := range m.TrustedDataValidators {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TrustedDataIssuers) > 0 {
		for _, s := range m.TrustedDataIssuers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DownloadPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.DownloadPeriod)
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovTx(uint64(m.Round))
	}
	if m.CurationNftId != 0 {
		n += 1 + sovTx(uint64(m.CurationNftId))
	}
	return n
}

func (m *MsgSellData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cert != nil {
		l = m.Cert.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSellDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccumPoolShareToken != nil {
		l = m.AccumPoolShareToken.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyDataAccessNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovTx(uint64(m.Round))
	}
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBuyDataAccessNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovTx(uint64(m.Round))
	}
	if m.NftId != 0 {
		n += 1 + sovTx(uint64(m.NftId))
	}
	return n
}

func (m *MsgRedeemDataAccessNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovTx(uint64(m.Round))
	}
	if m.NftId != 0 {
		n += 1 + sovTx(uint64(m.NftId))
	}
	l = len(m.Redeemer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedeemDataAccessNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receipt != nil {
		l = m.Receipt.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterDataValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDataValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDataValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorDetail == nil {
				m.ValidatorDetail = &DataValidator{}
			}
			if err := m.ValidatorDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDataValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDataValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDataValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNumData", wireType)
			}
			m.TargetNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNftSupply", wireType)
			}
			m.MaxNftSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNftSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftPrice == nil {
				m.NftPrice = &types.Coin{}
			}
			if err := m.NftPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataValidators = append(m.TrustedDataValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataIssuers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataIssuers = append(m.TrustedDataIssuers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposit == nil {
				m.Deposit = &types.Coin{}
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadPeriod == nil {
				m.DownloadPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.DownloadPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurationNftId", wireType)
			}
			m.CurationNftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurationNftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cert == nil {
				m.Cert = &DataValidationCertificate{}
			}
			if err := m.Cert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSellDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSellDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSellDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumPoolShareToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccumPoolShareToken == nil {
				m.AccumPoolShareToken = &types.Coin{}
			}
			if err := m.AccumPoolShareToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyDataAccessNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyDataAccessNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyDataAccessNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &types.Coin{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBuyDataAccessNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBuyDataAccessNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBuyDataAccessNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemDataAccessNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemDataAccessNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemDataAccessNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redeemer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redeemer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemDataAccessNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemDataAccessNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemDataAccessNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipt == nil {
				m.Receipt = &DataAccessNFTRedeemReceipt{}
			}
			if err := m.Receipt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
