// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datapool/v2/pool.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pool defines a data pool
type Pool struct {
	PoolId        uint64      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolAddress   string      `protobuf:"bytes,2,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	Round         uint64      `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PoolParams    *PoolParams `protobuf:"bytes,4,opt,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	CurNumData    uint64      `protobuf:"varint,5,opt,name=cur_num_data,json=curNumData,proto3" json:"cur_num_data,omitempty"`
	NumIssuedNfts uint64      `protobuf:"varint,6,opt,name=num_issued_nfts,json=numIssuedNfts,proto3" json:"num_issued_nfts,omitempty"`
	Status        string      `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Curator       string      `protobuf:"bytes,8,opt,name=curator,proto3" json:"curator,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Pool) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *Pool) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Pool) GetPoolParams() *PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *Pool) GetCurNumData() uint64 {
	if m != nil {
		return m.CurNumData
	}
	return 0
}

func (m *Pool) GetNumIssuedNfts() uint64 {
	if m != nil {
		return m.NumIssuedNfts
	}
	return 0
}

func (m *Pool) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Pool) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

// DataValidationCertificate defines the certificate for data validation w/ data validator signature.
type DataValidationCertificate struct {
	UnsignedCert *UnsignedDataValidationCertificate `protobuf:"bytes,1,opt,name=unsigned_cert,json=unsignedCert,proto3" json:"unsigned_cert,omitempty"`
	Signature    []byte                             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DataValidationCertificate) Reset()         { *m = DataValidationCertificate{} }
func (m *DataValidationCertificate) String() string { return proto.CompactTextString(m) }
func (*DataValidationCertificate) ProtoMessage()    {}
func (*DataValidationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{1}
}
func (m *DataValidationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataValidationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataValidationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataValidationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValidationCertificate.Merge(m, src)
}
func (m *DataValidationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *DataValidationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValidationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_DataValidationCertificate proto.InternalMessageInfo

func (m *DataValidationCertificate) GetUnsignedCert() *UnsignedDataValidationCertificate {
	if m != nil {
		return m.UnsignedCert
	}
	return nil
}

func (m *DataValidationCertificate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// UnsignedDataValidationCertificate defines the unsigned certificate for data validation.
type UnsignedDataValidationCertificate struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round         uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	DataHash      []byte `protobuf:"bytes,3,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DataValidator string `protobuf:"bytes,4,opt,name=data_validator,json=dataValidator,proto3" json:"data_validator,omitempty"`
	Requester     string `protobuf:"bytes,5,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *UnsignedDataValidationCertificate) Reset()         { *m = UnsignedDataValidationCertificate{} }
func (m *UnsignedDataValidationCertificate) String() string { return proto.CompactTextString(m) }
func (*UnsignedDataValidationCertificate) ProtoMessage()    {}
func (*UnsignedDataValidationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{2}
}
func (m *UnsignedDataValidationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedDataValidationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedDataValidationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedDataValidationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedDataValidationCertificate.Merge(m, src)
}
func (m *UnsignedDataValidationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedDataValidationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedDataValidationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedDataValidationCertificate proto.InternalMessageInfo

func (m *UnsignedDataValidationCertificate) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UnsignedDataValidationCertificate) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *UnsignedDataValidationCertificate) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *UnsignedDataValidationCertificate) GetDataValidator() string {
	if m != nil {
		return m.DataValidator
	}
	return ""
}

func (m *UnsignedDataValidationCertificate) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

// DataAccessNFTRedeemReceipt defines a receipt for redeeming data access NFT to get data.
type DataAccessNFTRedeemReceipt struct {
	PoolId      uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round       uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	NftId       uint64 `protobuf:"varint,3,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Redeemer    string `protobuf:"bytes,4,opt,name=redeemer,proto3" json:"redeemer,omitempty"`
	BlockHeight uint64 `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *DataAccessNFTRedeemReceipt) Reset()         { *m = DataAccessNFTRedeemReceipt{} }
func (m *DataAccessNFTRedeemReceipt) String() string { return proto.CompactTextString(m) }
func (*DataAccessNFTRedeemReceipt) ProtoMessage()    {}
func (*DataAccessNFTRedeemReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{3}
}
func (m *DataAccessNFTRedeemReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataAccessNFTRedeemReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataAccessNFTRedeemReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataAccessNFTRedeemReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataAccessNFTRedeemReceipt.Merge(m, src)
}
func (m *DataAccessNFTRedeemReceipt) XXX_Size() int {
	return m.Size()
}
func (m *DataAccessNFTRedeemReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_DataAccessNFTRedeemReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_DataAccessNFTRedeemReceipt proto.InternalMessageInfo

func (m *DataAccessNFTRedeemReceipt) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *DataAccessNFTRedeemReceipt) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *DataAccessNFTRedeemReceipt) GetNftId() uint64 {
	if m != nil {
		return m.NftId
	}
	return 0
}

func (m *DataAccessNFTRedeemReceipt) GetRedeemer() string {
	if m != nil {
		return m.Redeemer
	}
	return ""
}

func (m *DataAccessNFTRedeemReceipt) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// DataValidator defines a detail of data validator.
type DataValidator struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *DataValidator) Reset()         { *m = DataValidator{} }
func (m *DataValidator) String() string { return proto.CompactTextString(m) }
func (*DataValidator) ProtoMessage()    {}
func (*DataValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{4}
}
func (m *DataValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValidator.Merge(m, src)
}
func (m *DataValidator) XXX_Size() int {
	return m.Size()
}
func (m *DataValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValidator.DiscardUnknown(m)
}

var xxx_messageInfo_DataValidator proto.InternalMessageInfo

func (m *DataValidator) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *DataValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// PoolParams defines parameters for data pool
type PoolParams struct {
	DataSchema            []string       `protobuf:"bytes,1,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	TargetNumData         uint64         `protobuf:"varint,2,opt,name=target_num_data,json=targetNumData,proto3" json:"target_num_data,omitempty"`
	MaxNftSupply          uint64         `protobuf:"varint,3,opt,name=max_nft_supply,json=maxNftSupply,proto3" json:"max_nft_supply,omitempty"`
	NftPrice              *types.Coin    `protobuf:"bytes,4,opt,name=nft_price,json=nftPrice,proto3" json:"nft_price,omitempty"`
	TrustedDataValidators []string       `protobuf:"bytes,5,rep,name=trusted_data_validators,json=trustedDataValidators,proto3" json:"trusted_data_validators,omitempty"`
	TrustedDataIssuers    []string       `protobuf:"bytes,6,rep,name=trusted_data_issuers,json=trustedDataIssuers,proto3" json:"trusted_data_issuers,omitempty"`
	Deposit               *types.Coin    `protobuf:"bytes,7,opt,name=deposit,proto3" json:"deposit,omitempty"`
	DownloadPeriod        *time.Duration `protobuf:"bytes,8,opt,name=download_period,json=downloadPeriod,proto3,stdduration" json:"download_period,omitempty"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{5}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *PoolParams) GetTargetNumData() uint64 {
	if m != nil {
		return m.TargetNumData
	}
	return 0
}

func (m *PoolParams) GetMaxNftSupply() uint64 {
	if m != nil {
		return m.MaxNftSupply
	}
	return 0
}

func (m *PoolParams) GetNftPrice() *types.Coin {
	if m != nil {
		return m.NftPrice
	}
	return nil
}

func (m *PoolParams) GetTrustedDataValidators() []string {
	if m != nil {
		return m.TrustedDataValidators
	}
	return nil
}

func (m *PoolParams) GetTrustedDataIssuers() []string {
	if m != nil {
		return m.TrustedDataIssuers
	}
	return nil
}

func (m *PoolParams) GetDeposit() *types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *PoolParams) GetDownloadPeriod() *time.Duration {
	if m != nil {
		return m.DownloadPeriod
	}
	return nil
}

func init() {
	proto.RegisterType((*Pool)(nil), "panacea.datapool.v2.Pool")
	proto.RegisterType((*DataValidationCertificate)(nil), "panacea.datapool.v2.DataValidationCertificate")
	proto.RegisterType((*UnsignedDataValidationCertificate)(nil), "panacea.datapool.v2.UnsignedDataValidationCertificate")
	proto.RegisterType((*DataAccessNFTRedeemReceipt)(nil), "panacea.datapool.v2.DataAccessNFTRedeemReceipt")
	proto.RegisterType((*DataValidator)(nil), "panacea.datapool.v2.DataValidator")
	proto.RegisterType((*PoolParams)(nil), "panacea.datapool.v2.PoolParams")
}

func init() { proto.RegisterFile("panacea/datapool/v2/pool.proto", fileDescriptor_4ffa39381925211c) }

var fileDescriptor_4ffa39381925211c = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0x8e, 0xf3, 0x33, 0x99, 0xa9, 0x99, 0xc9, 0x4a, 0x4d, 0x96, 0xf5, 0x0e, 0xc8, 0x99, 0x1d,
	0x01, 0xca, 0x05, 0x9b, 0x64, 0xa5, 0x9c, 0xd9, 0xdd, 0x80, 0x12, 0x21, 0x45, 0x91, 0x17, 0x38,
	0xc0, 0xc1, 0xea, 0xe9, 0x2e, 0x7b, 0x5a, 0x8c, 0xdd, 0xa6, 0x7f, 0x42, 0xf6, 0x2d, 0x38, 0xad,
	0x38, 0x70, 0xe1, 0x1d, 0x78, 0x08, 0x8e, 0x7b, 0xe4, 0x06, 0x4a, 0x5e, 0x04, 0x75, 0xdb, 0xce,
	0xec, 0x48, 0x1b, 0x10, 0x27, 0xbb, 0xbe, 0xaf, 0xaa, 0xbb, 0xba, 0xea, 0xab, 0x82, 0xa8, 0xa6,
	0x15, 0x65, 0x48, 0x13, 0x4e, 0x0d, 0xad, 0xa5, 0x5c, 0x26, 0x57, 0xc7, 0x89, 0xfb, 0xc6, 0xb5,
	0x92, 0x46, 0x92, 0xf7, 0x5a, 0x3e, 0xee, 0xf8, 0xf8, 0xea, 0x78, 0xb2, 0x5f, 0xc8, 0x42, 0x7a,
	0x3e, 0x71, 0x7f, 0x8d, 0xeb, 0x24, 0x62, 0x52, 0x97, 0x52, 0x27, 0x73, 0xaa, 0x31, 0xb9, 0x3a,
	0x9a, 0xa3, 0xa1, 0x47, 0x09, 0x93, 0xa2, 0xea, 0xf8, 0x42, 0xca, 0x62, 0x89, 0x89, 0xb7, 0xe6,
	0x36, 0x4f, 0xb8, 0x55, 0xd4, 0x08, 0xd9, 0xf2, 0xb3, 0xd7, 0x9b, 0xb0, 0x7d, 0x29, 0xe5, 0x92,
	0x3c, 0x82, 0x5d, 0x77, 0x53, 0x26, 0x78, 0x18, 0x4c, 0x83, 0xc3, 0xed, 0xb4, 0xe7, 0xcc, 0x73,
	0x4e, 0x9e, 0xc0, 0xc8, 0x13, 0x94, 0x73, 0x85, 0x5a, 0x87, 0x9b, 0xd3, 0xe0, 0x70, 0x90, 0x0e,
	0x1d, 0xf6, 0xac, 0x81, 0xc8, 0x3e, 0xec, 0x28, 0x69, 0x2b, 0x1e, 0x6e, 0xf9, 0xc8, 0xc6, 0x20,
	0x9f, 0x83, 0x77, 0xca, 0x6a, 0xaa, 0x68, 0xa9, 0xc3, 0xed, 0x69, 0x70, 0x38, 0x3c, 0x3e, 0x88,
	0xdf, 0xf1, 0xb6, 0xd8, 0x65, 0x70, 0xe9, 0xdd, 0x52, 0xa8, 0xef, 0xfe, 0xc9, 0x14, 0x46, 0xcc,
	0xaa, 0xac, 0xb2, 0x65, 0xe6, 0xbc, 0xc3, 0x1d, 0x7f, 0x3c, 0x30, 0xab, 0x2e, 0x6c, 0x79, 0x4a,
	0x0d, 0x25, 0x9f, 0xc0, 0x03, 0xc7, 0x0a, 0xad, 0x2d, 0xf2, 0xac, 0xca, 0x8d, 0x0e, 0x7b, 0xde,
	0x69, 0x5c, 0xd9, 0xf2, 0xdc, 0xa3, 0x17, 0xb9, 0xd1, 0xe4, 0x7d, 0xe8, 0x69, 0x43, 0x8d, 0xd5,
	0xe1, 0xae, 0x4f, 0xbf, 0xb5, 0x48, 0x08, 0xbb, 0xcc, 0x15, 0x44, 0xaa, 0xb0, 0xef, 0x89, 0xce,
	0x9c, 0xbd, 0x0e, 0xe0, 0xb1, 0xbb, 0xe2, 0x5b, 0xba, 0x14, 0xdc, 0x57, 0xec, 0x05, 0x2a, 0x23,
	0x72, 0xc1, 0xa8, 0x41, 0xf2, 0x3d, 0x8c, 0x6d, 0xa5, 0x45, 0x51, 0x21, 0xcf, 0x18, 0x2a, 0xe3,
	0x6b, 0x36, 0x3c, 0x3e, 0x79, 0xe7, 0xeb, 0xbe, 0x69, 0x3d, 0xef, 0x3d, 0x2e, 0x1d, 0x75, 0x87,
	0x39, 0x90, 0x7c, 0x08, 0x03, 0x67, 0x51, 0x63, 0x15, 0xfa, 0x72, 0x8f, 0xd2, 0x15, 0x30, 0xfb,
	0x3d, 0x80, 0x27, 0xff, 0x79, 0xe2, 0xfd, 0xed, 0xbc, 0xeb, 0xd5, 0xe6, 0xdb, 0xbd, 0xfa, 0x00,
	0x06, 0x2e, 0xe3, 0x6c, 0x41, 0xf5, 0xc2, 0x77, 0x71, 0x94, 0xf6, 0x1d, 0x70, 0x46, 0xf5, 0x82,
	0x7c, 0x0c, 0x7b, 0x9e, 0xbc, 0x6a, 0x6e, 0x92, 0xca, 0xf7, 0x72, 0x90, 0x8e, 0xf9, 0xea, 0x7a,
	0xa9, 0x5c, 0xda, 0x0a, 0x7f, 0xb4, 0xa8, 0x0d, 0x2a, 0xdf, 0xaa, 0x41, 0xba, 0x02, 0x66, 0xbf,
	0x05, 0x30, 0x71, 0xe9, 0x3e, 0x63, 0x0c, 0xb5, 0xbe, 0xf8, 0xf2, 0xeb, 0x14, 0x39, 0x62, 0x99,
	0x22, 0x43, 0x51, 0x9b, 0xff, 0x9b, 0xef, 0x43, 0xe8, 0x55, 0xb9, 0x71, 0xde, 0xad, 0xe4, 0xaa,
	0xdc, 0x9c, 0x73, 0x32, 0x81, 0xbe, 0xf2, 0xc7, 0x62, 0x97, 0xe3, 0x9d, 0xed, 0x74, 0x3c, 0x5f,
	0x4a, 0xf6, 0x43, 0xb6, 0x40, 0x51, 0x2c, 0x4c, 0x2b, 0xa6, 0xa1, 0xc7, 0xce, 0x3c, 0x34, 0xfb,
	0x02, 0xc6, 0xa7, 0x6b, 0x4f, 0x9a, 0x40, 0x1f, 0x2b, 0x5e, 0x4b, 0x51, 0x35, 0x1d, 0x1e, 0xa4,
	0x77, 0xb6, 0x93, 0xce, 0xfa, 0x48, 0x74, 0xe6, 0xec, 0xd7, 0x2d, 0x80, 0x95, 0xa2, 0xc9, 0x01,
	0x0c, 0x7d, 0xf9, 0x34, 0x5b, 0x60, 0x49, 0xc3, 0x60, 0xba, 0x75, 0x38, 0x48, 0xc1, 0x41, 0x2f,
	0x3d, 0xe2, 0x44, 0x6c, 0xa8, 0x2a, 0xd0, 0xac, 0x94, 0xde, 0x3c, 0x76, 0xdc, 0xc0, 0x9d, 0xd8,
	0x3f, 0x82, 0xbd, 0x92, 0x5e, 0x3b, 0x95, 0x67, 0xda, 0xd6, 0xf5, 0xf2, 0x55, 0xfb, 0xf8, 0x51,
	0x49, 0xaf, 0x2f, 0x72, 0xf3, 0xd2, 0x63, 0xe4, 0x04, 0x06, 0xce, 0xa3, 0x56, 0x82, 0x61, 0x3b,
	0x74, 0x8f, 0xe3, 0x66, 0x4b, 0xc4, 0x6e, 0x4b, 0xc4, 0xed, 0x96, 0x88, 0x5f, 0x48, 0x51, 0xa5,
	0xfd, 0x2a, 0x37, 0x97, 0xce, 0x95, 0x9c, 0xc0, 0x23, 0xa3, 0xac, 0x36, 0xc8, 0xb3, 0xf5, 0x6e,
	0xeb, 0x70, 0xc7, 0xa7, 0xfc, 0xb0, 0xa5, 0xd7, 0x4a, 0xa4, 0xc9, 0x67, 0xb0, 0xbf, 0x16, 0xe7,
	0x67, 0x51, 0xb9, 0x39, 0x74, 0x41, 0xe4, 0xad, 0xa0, 0xf3, 0x86, 0x21, 0x4f, 0x61, 0x97, 0x63,
	0x2d, 0xb5, 0x30, 0x7e, 0x1a, 0xff, 0x35, 0xbf, 0xce, 0x93, 0x9c, 0xc1, 0x03, 0x2e, 0x7f, 0xaa,
	0x96, 0x92, 0xf2, 0xac, 0x46, 0x25, 0x24, 0xf7, 0x13, 0xeb, 0x82, 0x9b, 0x15, 0x17, 0x77, 0x2b,
	0x2e, 0x3e, 0x6d, 0x57, 0xdc, 0xf3, 0xed, 0x5f, 0xfe, 0x3a, 0x08, 0xd2, 0xbd, 0x2e, 0xee, 0xd2,
	0x87, 0x3d, 0xff, 0xea, 0x8f, 0x9b, 0x28, 0x78, 0x73, 0x13, 0x05, 0x7f, 0xdf, 0x44, 0xc1, 0xcf,
	0xb7, 0xd1, 0xc6, 0x9b, 0xdb, 0x68, 0xe3, 0xcf, 0xdb, 0x68, 0xe3, 0xbb, 0xa3, 0x42, 0x98, 0x85,
	0x9d, 0xc7, 0x4c, 0x96, 0x49, 0x89, 0x5c, 0x38, 0x6d, 0x24, 0xed, 0x44, 0x7f, 0xca, 0xa4, 0xc2,
	0xe4, 0x7a, 0xb5, 0xb2, 0xcd, 0xab, 0x1a, 0xf5, 0xbc, 0xe7, 0x6f, 0x7d, 0xfa, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xaf, 0x58, 0x1d, 0x40, 0xd3, 0x05, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumIssuedNfts != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.NumIssuedNfts))
		i--
		dAtA[i] = 0x30
	}
	if m.CurNumData != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CurNumData))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolParams != nil {
		{
			size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataValidationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataValidationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataValidationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.UnsignedCert != nil {
		{
			size, err := m.UnsignedCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedDataValidationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedDataValidationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedDataValidationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataValidator) > 0 {
		i -= len(m.DataValidator)
		copy(dAtA[i:], m.DataValidator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.DataValidator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintPool(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataAccessNFTRedeemReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataAccessNFTRedeemReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataAccessNFTRedeemReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Redeemer) > 0 {
		i -= len(m.Redeemer)
		copy(dAtA[i:], m.Redeemer)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Redeemer)))
		i--
		dAtA[i] = 0x22
	}
	if m.NftId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.NftId))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DownloadPeriod != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.DownloadPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.DownloadPeriod):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintPool(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x42
	}
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrustedDataIssuers) > 0 {
		for iNdEx := len(m.TrustedDataIssuers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataIssuers[iNdEx])
			copy(dAtA[i:], m.TrustedDataIssuers[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.TrustedDataIssuers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TrustedDataValidators) > 0 {
		for iNdEx := len(m.TrustedDataValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataValidators[iNdEx])
			copy(dAtA[i:], m.TrustedDataValidators[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.TrustedDataValidators[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NftPrice != nil {
		{
			size, err := m.NftPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxNftSupply != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.MaxNftSupply))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetNumData != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TargetNumData))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	if m.PoolParams != nil {
		l = m.PoolParams.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.CurNumData != 0 {
		n += 1 + sovPool(uint64(m.CurNumData))
	}
	if m.NumIssuedNfts != 0 {
		n += 1 + sovPool(uint64(m.NumIssuedNfts))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *DataValidationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsignedCert != nil {
		l = m.UnsignedCert.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *UnsignedDataValidationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.DataValidator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *DataAccessNFTRedeemReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	if m.NftId != 0 {
		n += 1 + sovPool(uint64(m.NftId))
	}
	l = len(m.Redeemer)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovPool(uint64(m.BlockHeight))
	}
	return n
}

func (m *DataValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if m.TargetNumData != 0 {
		n += 1 + sovPool(uint64(m.TargetNumData))
	}
	if m.MaxNftSupply != 0 {
		n += 1 + sovPool(uint64(m.MaxNftSupply))
	}
	if m.NftPrice != nil {
		l = m.NftPrice.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if len(m.TrustedDataValidators) > 0 {
		for _, s := range m.TrustedDataValidators {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if len(m.TrustedDataIssuers) > 0 {
		for _, s := range m.TrustedDataIssuers {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.DownloadPeriod != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.DownloadPeriod)
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolParams == nil {
				m.PoolParams = &PoolParams{}
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurNumData", wireType)
			}
			m.CurNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIssuedNfts", wireType)
			}
			m.NumIssuedNfts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIssuedNfts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataValidationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataValidationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataValidationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsignedCert == nil {
				m.UnsignedCert = &UnsignedDataValidationCertificate{}
			}
			if err := m.UnsignedCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedDataValidationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedDataValidationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedDataValidationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = append(m.DataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DataHash == nil {
				m.DataHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataAccessNFTRedeemReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataAccessNFTRedeemReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataAccessNFTRedeemReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			m.NftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redeemer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redeemer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNumData", wireType)
			}
			m.TargetNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNftSupply", wireType)
			}
			m.MaxNftSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNftSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftPrice == nil {
				m.NftPrice = &types.Coin{}
			}
			if err := m.NftPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataValidators = append(m.TrustedDataValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataIssuers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataIssuers = append(m.TrustedDataIssuers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposit == nil {
				m.Deposit = &types.Coin{}
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownloadPeriod == nil {
				m.DownloadPeriod = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.DownloadPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
