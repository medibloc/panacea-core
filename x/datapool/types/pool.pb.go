// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: panacea/datapool/v2/pool.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pool defines a data pool
type Pool struct {
	PoolId                uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	PoolAddress           string                                 `protobuf:"bytes,2,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	Round                 uint64                                 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PoolParams            *PoolParams                            `protobuf:"bytes,4,opt,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	CurNumData            uint64                                 `protobuf:"varint,5,opt,name=cur_num_data,json=curNumData,proto3" json:"cur_num_data,omitempty"`
	NumIssuedNfts         uint64                                 `protobuf:"varint,6,opt,name=num_issued_nfts,json=numIssuedNfts,proto3" json:"num_issued_nfts,omitempty"`
	Status                string                                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Curator               string                                 `protobuf:"bytes,8,opt,name=curator,proto3" json:"curator,omitempty"`
	Deposit               types.Coin                             `protobuf:"bytes,9,opt,name=deposit,proto3" json:"deposit"`
	NftContractAddr       string                                 `protobuf:"bytes,10,opt,name=nft_contract_addr,json=nftContractAddr,proto3" json:"nft_contract_addr,omitempty"`
	WasDepositReturned    bool                                   `protobuf:"varint,11,opt,name=was_deposit_returned,json=wasDepositReturned,proto3" json:"was_deposit_returned,omitempty"`
	CuratorCommission     map[uint64]types.Coin                  `protobuf:"bytes,12,rep,name=curator_commission,json=curatorCommission,proto3" json:"curator_commission" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CuratorCommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,13,opt,name=curator_commission_rate,json=curatorCommissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"curator_commission_rate" yaml:"curator_commission_rate"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *Pool) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *Pool) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Pool) GetPoolParams() *PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *Pool) GetCurNumData() uint64 {
	if m != nil {
		return m.CurNumData
	}
	return 0
}

func (m *Pool) GetNumIssuedNfts() uint64 {
	if m != nil {
		return m.NumIssuedNfts
	}
	return 0
}

func (m *Pool) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Pool) GetCurator() string {
	if m != nil {
		return m.Curator
	}
	return ""
}

func (m *Pool) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Pool) GetNftContractAddr() string {
	if m != nil {
		return m.NftContractAddr
	}
	return ""
}

func (m *Pool) GetWasDepositReturned() bool {
	if m != nil {
		return m.WasDepositReturned
	}
	return false
}

func (m *Pool) GetCuratorCommission() map[uint64]types.Coin {
	if m != nil {
		return m.CuratorCommission
	}
	return nil
}

// DataValidationCertificate defines the certificate for data validation w/ data validator signature.
type DataValidationCertificate struct {
	UnsignedCert *UnsignedDataValidationCertificate `protobuf:"bytes,1,opt,name=unsigned_cert,json=unsignedCert,proto3" json:"unsigned_cert,omitempty"`
	Signature    []byte                             `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DataValidationCertificate) Reset()         { *m = DataValidationCertificate{} }
func (m *DataValidationCertificate) String() string { return proto.CompactTextString(m) }
func (*DataValidationCertificate) ProtoMessage()    {}
func (*DataValidationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{1}
}
func (m *DataValidationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataValidationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataValidationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataValidationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValidationCertificate.Merge(m, src)
}
func (m *DataValidationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *DataValidationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValidationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_DataValidationCertificate proto.InternalMessageInfo

func (m *DataValidationCertificate) GetUnsignedCert() *UnsignedDataValidationCertificate {
	if m != nil {
		return m.UnsignedCert
	}
	return nil
}

func (m *DataValidationCertificate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// UnsignedDataValidationCertificate defines the unsigned certificate for data validation.
type UnsignedDataValidationCertificate struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round         uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	DataHash      []byte `protobuf:"bytes,3,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	DataValidator string `protobuf:"bytes,4,opt,name=data_validator,json=dataValidator,proto3" json:"data_validator,omitempty"`
	Requester     string `protobuf:"bytes,5,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (m *UnsignedDataValidationCertificate) Reset()         { *m = UnsignedDataValidationCertificate{} }
func (m *UnsignedDataValidationCertificate) String() string { return proto.CompactTextString(m) }
func (*UnsignedDataValidationCertificate) ProtoMessage()    {}
func (*UnsignedDataValidationCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{2}
}
func (m *UnsignedDataValidationCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsignedDataValidationCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsignedDataValidationCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsignedDataValidationCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsignedDataValidationCertificate.Merge(m, src)
}
func (m *UnsignedDataValidationCertificate) XXX_Size() int {
	return m.Size()
}
func (m *UnsignedDataValidationCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsignedDataValidationCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_UnsignedDataValidationCertificate proto.InternalMessageInfo

func (m *UnsignedDataValidationCertificate) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UnsignedDataValidationCertificate) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *UnsignedDataValidationCertificate) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *UnsignedDataValidationCertificate) GetDataValidator() string {
	if m != nil {
		return m.DataValidator
	}
	return ""
}

func (m *UnsignedDataValidationCertificate) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

// DataPassRedeemReceipt defines a receipt for redeeming data pass to get data.
type DataPassRedeemReceipt struct {
	PoolId     uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round      uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	DataPassId uint64 `protobuf:"varint,3,opt,name=data_pass_id,json=dataPassId,proto3" json:"data_pass_id,omitempty"`
	Redeemer   string `protobuf:"bytes,4,opt,name=redeemer,proto3" json:"redeemer,omitempty"`
}

func (m *DataPassRedeemReceipt) Reset()         { *m = DataPassRedeemReceipt{} }
func (m *DataPassRedeemReceipt) String() string { return proto.CompactTextString(m) }
func (*DataPassRedeemReceipt) ProtoMessage()    {}
func (*DataPassRedeemReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{3}
}
func (m *DataPassRedeemReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataPassRedeemReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataPassRedeemReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataPassRedeemReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPassRedeemReceipt.Merge(m, src)
}
func (m *DataPassRedeemReceipt) XXX_Size() int {
	return m.Size()
}
func (m *DataPassRedeemReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPassRedeemReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_DataPassRedeemReceipt proto.InternalMessageInfo

func (m *DataPassRedeemReceipt) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *DataPassRedeemReceipt) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *DataPassRedeemReceipt) GetDataPassId() uint64 {
	if m != nil {
		return m.DataPassId
	}
	return 0
}

func (m *DataPassRedeemReceipt) GetRedeemer() string {
	if m != nil {
		return m.Redeemer
	}
	return ""
}

// DataValidator defines a detail of data validator.
type DataValidator struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *DataValidator) Reset()         { *m = DataValidator{} }
func (m *DataValidator) String() string { return proto.CompactTextString(m) }
func (*DataValidator) ProtoMessage()    {}
func (*DataValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{4}
}
func (m *DataValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataValidator.Merge(m, src)
}
func (m *DataValidator) XXX_Size() int {
	return m.Size()
}
func (m *DataValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_DataValidator.DiscardUnknown(m)
}

var xxx_messageInfo_DataValidator proto.InternalMessageInfo

func (m *DataValidator) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *DataValidator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// PoolParams defines parameters for data pool
type PoolParams struct {
	DataSchema            []string    `protobuf:"bytes,1,rep,name=data_schema,json=dataSchema,proto3" json:"data_schema,omitempty"`
	TargetNumData         uint64      `protobuf:"varint,2,opt,name=target_num_data,json=targetNumData,proto3" json:"target_num_data,omitempty"`
	MaxNftSupply          uint64      `protobuf:"varint,3,opt,name=max_nft_supply,json=maxNftSupply,proto3" json:"max_nft_supply,omitempty"`
	NftPrice              *types.Coin `protobuf:"bytes,4,opt,name=nft_price,json=nftPrice,proto3" json:"nft_price,omitempty"`
	TrustedDataValidators []string    `protobuf:"bytes,5,rep,name=trusted_data_validators,json=trustedDataValidators,proto3" json:"trusted_data_validators,omitempty"`
	TrustedDataIssuers    []string    `protobuf:"bytes,6,rep,name=trusted_data_issuers,json=trustedDataIssuers,proto3" json:"trusted_data_issuers,omitempty"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{5}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetDataSchema() []string {
	if m != nil {
		return m.DataSchema
	}
	return nil
}

func (m *PoolParams) GetTargetNumData() uint64 {
	if m != nil {
		return m.TargetNumData
	}
	return 0
}

func (m *PoolParams) GetMaxNftSupply() uint64 {
	if m != nil {
		return m.MaxNftSupply
	}
	return 0
}

func (m *PoolParams) GetNftPrice() *types.Coin {
	if m != nil {
		return m.NftPrice
	}
	return nil
}

func (m *PoolParams) GetTrustedDataValidators() []string {
	if m != nil {
		return m.TrustedDataValidators
	}
	return nil
}

func (m *PoolParams) GetTrustedDataIssuers() []string {
	if m != nil {
		return m.TrustedDataIssuers
	}
	return nil
}

// InstantRevenueDistribution defines poolID information to distribution revenue.
type InstantRevenueDistribution struct {
	PoolIds []uint64 `protobuf:"varint,1,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *InstantRevenueDistribution) Reset()         { *m = InstantRevenueDistribution{} }
func (m *InstantRevenueDistribution) String() string { return proto.CompactTextString(m) }
func (*InstantRevenueDistribution) ProtoMessage()    {}
func (*InstantRevenueDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{6}
}
func (m *InstantRevenueDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstantRevenueDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstantRevenueDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstantRevenueDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstantRevenueDistribution.Merge(m, src)
}
func (m *InstantRevenueDistribution) XXX_Size() int {
	return m.Size()
}
func (m *InstantRevenueDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_InstantRevenueDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_InstantRevenueDistribution proto.InternalMessageInfo

func (m *InstantRevenueDistribution) GetPoolIds() []uint64 {
	if m != nil {
		return m.PoolIds
	}
	return nil
}

// SalesInfo defines sales information
type SalesHistory struct {
	PoolId        uint64      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Round         uint64      `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	SellerAddress string      `protobuf:"bytes,3,opt,name=seller_address,json=sellerAddress,proto3" json:"seller_address,omitempty"`
	DataHashes    [][]byte    `protobuf:"bytes,4,rep,name=data_hashes,json=dataHashes,proto3" json:"data_hashes,omitempty"`
	PaidCoin      *types.Coin `protobuf:"bytes,5,opt,name=paid_coin,json=paidCoin,proto3" json:"paid_coin,omitempty"`
}

func (m *SalesHistory) Reset()         { *m = SalesHistory{} }
func (m *SalesHistory) String() string { return proto.CompactTextString(m) }
func (*SalesHistory) ProtoMessage()    {}
func (*SalesHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ffa39381925211c, []int{7}
}
func (m *SalesHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SalesHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SalesHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SalesHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SalesHistory.Merge(m, src)
}
func (m *SalesHistory) XXX_Size() int {
	return m.Size()
}
func (m *SalesHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SalesHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SalesHistory proto.InternalMessageInfo

func (m *SalesHistory) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *SalesHistory) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SalesHistory) GetSellerAddress() string {
	if m != nil {
		return m.SellerAddress
	}
	return ""
}

func (m *SalesHistory) GetDataHashes() [][]byte {
	if m != nil {
		return m.DataHashes
	}
	return nil
}

func (m *SalesHistory) GetPaidCoin() *types.Coin {
	if m != nil {
		return m.PaidCoin
	}
	return nil
}

func init() {
	proto.RegisterType((*Pool)(nil), "panacea.datapool.v2.Pool")
	proto.RegisterMapType((map[uint64]types.Coin)(nil), "panacea.datapool.v2.Pool.CuratorCommissionEntry")
	proto.RegisterType((*DataValidationCertificate)(nil), "panacea.datapool.v2.DataValidationCertificate")
	proto.RegisterType((*UnsignedDataValidationCertificate)(nil), "panacea.datapool.v2.UnsignedDataValidationCertificate")
	proto.RegisterType((*DataPassRedeemReceipt)(nil), "panacea.datapool.v2.DataPassRedeemReceipt")
	proto.RegisterType((*DataValidator)(nil), "panacea.datapool.v2.DataValidator")
	proto.RegisterType((*PoolParams)(nil), "panacea.datapool.v2.PoolParams")
	proto.RegisterType((*InstantRevenueDistribution)(nil), "panacea.datapool.v2.InstantRevenueDistribution")
	proto.RegisterType((*SalesHistory)(nil), "panacea.datapool.v2.SalesHistory")
}

func init() { proto.RegisterFile("panacea/datapool/v2/pool.proto", fileDescriptor_4ffa39381925211c) }

var fileDescriptor_4ffa39381925211c = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0xf9, 0x63, 0x3f, 0xdb, 0x29, 0x1d, 0x92, 0x66, 0x63, 0x90, 0xe3, 0x5a, 0xb4,
	0xb2, 0x90, 0xba, 0xdb, 0x04, 0x29, 0x40, 0x4f, 0xd0, 0xa4, 0x52, 0x22, 0xa4, 0x28, 0xda, 0x08,
	0x0e, 0x70, 0x58, 0x8d, 0x77, 0x9f, 0x93, 0x51, 0xbd, 0x33, 0xcb, 0xcc, 0xac, 0x1b, 0x5f, 0x11,
	0x07, 0x8e, 0x9c, 0xb8, 0xf1, 0x2d, 0xb8, 0x72, 0xef, 0xb1, 0x47, 0xc4, 0x21, 0x42, 0xc9, 0x37,
	0xe0, 0x13, 0xa0, 0x99, 0x59, 0xdb, 0x09, 0x4d, 0x52, 0xf5, 0xb4, 0xfb, 0xde, 0xef, 0xbd, 0x37,
	0xbf, 0x79, 0xf3, 0xe6, 0x37, 0xd0, 0xce, 0x29, 0xa7, 0x09, 0xd2, 0x30, 0xa5, 0x9a, 0xe6, 0x42,
	0x0c, 0xc3, 0xd1, 0x76, 0x68, 0xbe, 0x41, 0x2e, 0x85, 0x16, 0xe4, 0xc3, 0x12, 0x0f, 0x26, 0x78,
	0x30, 0xda, 0x6e, 0xad, 0x9e, 0x88, 0x13, 0x61, 0xf1, 0xd0, 0xfc, 0xb9, 0xd0, 0x56, 0x3b, 0x11,
	0x2a, 0x13, 0x2a, 0xec, 0x53, 0x85, 0xe1, 0x68, 0xab, 0x8f, 0x9a, 0x6e, 0x85, 0x89, 0x60, 0xdc,
	0xe1, 0xdd, 0x9f, 0x96, 0x60, 0xe1, 0x48, 0x88, 0x21, 0x59, 0x87, 0x65, 0x53, 0x29, 0x66, 0xa9,
	0xef, 0x75, 0xbc, 0xde, 0x42, 0xb4, 0x64, 0xcc, 0x83, 0x94, 0x3c, 0x84, 0x86, 0x05, 0x68, 0x9a,
	0x4a, 0x54, 0xca, 0x9f, 0xef, 0x78, 0xbd, 0x5a, 0x54, 0x37, 0xbe, 0xaf, 0x9d, 0x8b, 0xac, 0xc2,
	0xa2, 0x14, 0x05, 0x4f, 0xfd, 0x8a, 0xcd, 0x74, 0x06, 0xf9, 0x0a, 0x6c, 0x50, 0x9c, 0x53, 0x49,
	0x33, 0xe5, 0x2f, 0x74, 0xbc, 0x5e, 0x7d, 0x7b, 0x33, 0xb8, 0x81, 0x7b, 0x60, 0x18, 0x1c, 0xd9,
	0xb0, 0x08, 0xf2, 0xe9, 0x3f, 0xe9, 0x40, 0x23, 0x29, 0x64, 0xcc, 0x8b, 0x2c, 0x36, 0xd1, 0xfe,
	0xa2, 0x2d, 0x0f, 0x49, 0x21, 0x0f, 0x8b, 0x6c, 0x8f, 0x6a, 0x4a, 0x1e, 0xc3, 0x3d, 0x83, 0x32,
	0xa5, 0x0a, 0x4c, 0x63, 0x3e, 0xd0, 0xca, 0x5f, 0xb2, 0x41, 0x4d, 0x5e, 0x64, 0x07, 0xd6, 0x7b,
	0x38, 0xd0, 0x8a, 0x3c, 0x80, 0x25, 0xa5, 0xa9, 0x2e, 0x94, 0xbf, 0x6c, 0xe9, 0x97, 0x16, 0xf1,
	0x61, 0x39, 0x29, 0x24, 0xd5, 0x42, 0xfa, 0x55, 0x0b, 0x4c, 0x4c, 0xf2, 0x25, 0x2c, 0xa7, 0x98,
	0x0b, 0xc5, 0xb4, 0x5f, 0xb3, 0xcc, 0x37, 0x02, 0xd7, 0xca, 0xc0, 0xb4, 0x32, 0x28, 0x5b, 0x19,
	0xec, 0x0a, 0xc6, 0x9f, 0x2f, 0xbc, 0x3e, 0xdf, 0x9c, 0x8b, 0x26, 0xf1, 0xe4, 0x53, 0xb8, 0xcf,
	0x07, 0x3a, 0x4e, 0x04, 0xd7, 0x92, 0x26, 0xda, 0x76, 0xce, 0x07, 0x5b, 0xfe, 0x1e, 0x1f, 0xe8,
	0xdd, 0xd2, 0x6f, 0xba, 0x47, 0x9e, 0xc2, 0xea, 0x2b, 0xaa, 0xe2, 0x32, 0x35, 0x96, 0xa8, 0x0b,
	0xc9, 0x31, 0xf5, 0xeb, 0x1d, 0xaf, 0x57, 0x8d, 0xc8, 0x2b, 0xaa, 0xf6, 0x1c, 0x14, 0x95, 0x08,
	0x41, 0x20, 0x25, 0xc7, 0x38, 0x11, 0x59, 0xc6, 0x94, 0x62, 0x82, 0xfb, 0x8d, 0x4e, 0xa5, 0x57,
	0xdf, 0x7e, 0x7a, 0x6b, 0x77, 0x83, 0x5d, 0x97, 0xb3, 0x3b, 0x4d, 0x79, 0xc1, 0xb5, 0x1c, 0x97,
	0xd4, 0xef, 0x27, 0xff, 0x47, 0xc9, 0x2f, 0x1e, 0xac, 0xbf, 0xbd, 0x4e, 0x2c, 0xa9, 0x46, 0xbf,
	0x69, 0xf6, 0xf2, 0xfc, 0xc8, 0xa4, 0xfe, 0x7d, 0xbe, 0xf9, 0xf8, 0x84, 0xe9, 0xd3, 0xa2, 0x1f,
	0x24, 0x22, 0x0b, 0xcb, 0x69, 0x73, 0x9f, 0x27, 0x2a, 0x7d, 0x19, 0xea, 0x71, 0x8e, 0x2a, 0xd8,
	0xc3, 0xe4, 0xdf, 0xf3, 0xcd, 0xf6, 0x98, 0x66, 0xc3, 0x67, 0xdd, 0x5b, 0xca, 0x76, 0xa3, 0xb5,
	0xb7, 0x68, 0x44, 0x54, 0x63, 0x2b, 0x86, 0x07, 0x37, 0xb3, 0x27, 0x1f, 0x40, 0xe5, 0x25, 0x8e,
	0xcb, 0x81, 0x35, 0xbf, 0x24, 0x84, 0xc5, 0x11, 0x1d, 0x16, 0x68, 0xc7, 0xf4, 0xae, 0x43, 0x8b,
	0x5c, 0xdc, 0xb3, 0xf9, 0x2f, 0xbc, 0xee, 0x6f, 0x1e, 0x6c, 0x98, 0x71, 0xfa, 0x8e, 0x0e, 0x59,
	0x4a, 0x35, 0x13, 0x7c, 0x17, 0xa5, 0x66, 0x03, 0x96, 0x50, 0x8d, 0xe4, 0x07, 0x68, 0x16, 0x5c,
	0xb1, 0x13, 0x8e, 0x69, 0x9c, 0xa0, 0xd4, 0x76, 0xb9, 0xfa, 0xf6, 0xce, 0x8d, 0xbd, 0xfe, 0xb6,
	0x8c, 0xbc, 0xb5, 0x5c, 0xd4, 0x98, 0x14, 0x33, 0x4e, 0xf2, 0x31, 0xd4, 0x8c, 0x45, 0x75, 0x21,
	0x1d, 0xe7, 0x46, 0x34, 0x73, 0x74, 0xff, 0xf0, 0xe0, 0xe1, 0x3b, 0x2b, 0xde, 0x7e, 0x75, 0xa7,
	0xf7, 0x72, 0xfe, 0xea, 0xbd, 0xfc, 0x08, 0x6a, 0x86, 0x71, 0x7c, 0x4a, 0xd5, 0xa9, 0xbd, 0xb1,
	0x8d, 0xa8, 0x6a, 0x1c, 0xfb, 0x54, 0x9d, 0x92, 0x47, 0xb0, 0x62, 0xc1, 0x91, 0x5b, 0x49, 0x48,
	0x7b, 0x6f, 0x6b, 0x51, 0x33, 0x9d, 0x2d, 0x2f, 0xa4, 0xa1, 0x2d, 0xf1, 0xc7, 0x02, 0x95, 0x46,
	0x69, 0xaf, 0x65, 0x2d, 0x9a, 0x39, 0xba, 0x3f, 0x7b, 0xb0, 0x66, 0xe8, 0x1e, 0x51, 0xa5, 0x22,
	0x4c, 0x11, 0xb3, 0x08, 0x13, 0x64, 0xb9, 0x7e, 0x5f, 0xaa, 0x1d, 0x68, 0x58, 0x36, 0x39, 0x55,
	0xca, 0xe4, 0x38, 0x7d, 0x81, 0xb4, 0xac, 0x7d, 0x90, 0x92, 0x16, 0x54, 0xa5, 0x5d, 0x01, 0x27,
	0x4c, 0xa7, 0x76, 0xf7, 0x05, 0x34, 0xf7, 0xae, 0xb1, 0x6e, 0x41, 0x15, 0x79, 0x9a, 0x0b, 0xc6,
	0xdd, 0x21, 0xd6, 0xa2, 0xa9, 0x6d, 0x94, 0xe0, 0xba, 0xc2, 0x4d, 0xcc, 0xee, 0xef, 0xf3, 0x00,
	0x33, 0x81, 0x22, 0x9b, 0x50, 0xb7, 0x9c, 0x54, 0x72, 0x8a, 0x19, 0xf5, 0xbd, 0x4e, 0xa5, 0x57,
	0x73, 0x94, 0x8e, 0xad, 0xc7, 0x68, 0x92, 0xa6, 0xf2, 0x04, 0xf5, 0x4c, 0xb8, 0xdc, 0xa6, 0x9a,
	0xce, 0x3d, 0xd1, 0xae, 0x4f, 0x60, 0x25, 0xa3, 0x67, 0x46, 0xb4, 0x62, 0x55, 0xe4, 0xf9, 0x70,
	0x5c, 0x6e, 0xaf, 0x91, 0xd1, 0xb3, 0xc3, 0x81, 0x3e, 0xb6, 0x3e, 0xb2, 0x03, 0x35, 0x13, 0x91,
	0x4b, 0x96, 0x60, 0xa9, 0xa1, 0x77, 0x0c, 0x75, 0x95, 0x0f, 0xf4, 0x91, 0x09, 0x25, 0x3b, 0xb0,
	0xae, 0x65, 0xa1, 0x34, 0xa6, 0xf1, 0xf5, 0x03, 0x55, 0xfe, 0xa2, 0xa5, 0xbc, 0x56, 0xc2, 0xd7,
	0x5a, 0xa4, 0x8c, 0x20, 0x5d, 0xcb, 0xb3, 0xd2, 0x2a, 0x8d, 0xac, 0x9a, 0x24, 0x72, 0x25, 0xe9,
	0xc0, 0x21, 0xdd, 0xcf, 0xa1, 0x75, 0xc0, 0x95, 0xa6, 0x5c, 0x47, 0x38, 0x42, 0x5e, 0xe0, 0x1e,
	0x53, 0x5a, 0xb2, 0x7e, 0x61, 0xe6, 0x94, 0x6c, 0x40, 0xb5, 0x3c, 0x71, 0x65, 0x7b, 0xb5, 0x10,
	0x2d, 0xbb, 0x23, 0x57, 0xdd, 0x3f, 0x3d, 0x68, 0x1c, 0xd3, 0x21, 0xaa, 0x7d, 0xa6, 0xb4, 0x90,
	0xe3, 0xf7, 0x9d, 0x8e, 0x47, 0xb0, 0xa2, 0x70, 0x38, 0x44, 0x39, 0x7d, 0x9b, 0x2a, 0x6e, 0x56,
	0x9d, 0x77, 0xf2, 0x3a, 0x4d, 0x0e, 0xcc, 0xcc, 0x3b, 0x9a, 0x77, 0xa8, 0xd2, 0x6b, 0xb8, 0x03,
	0xdb, 0xb7, 0x1e, 0xd3, 0xe2, 0x9c, 0xb2, 0x34, 0x36, 0xcf, 0xa2, 0x1d, 0xe6, 0xbb, 0x5b, 0x6c,
	0x62, 0xad, 0xec, 0x7f, 0xf3, 0xfa, 0xa2, 0xed, 0xbd, 0xb9, 0x68, 0x7b, 0xff, 0x5c, 0xb4, 0xbd,
	0x5f, 0x2f, 0xdb, 0x73, 0x6f, 0x2e, 0xdb, 0x73, 0x7f, 0x5d, 0xb6, 0xe7, 0xbe, 0xdf, 0xba, 0x22,
	0x89, 0x19, 0xa6, 0xac, 0x3f, 0x14, 0x49, 0x58, 0xca, 0xc5, 0x93, 0x44, 0x48, 0x0c, 0xcf, 0x66,
	0x6f, 0xbb, 0x55, 0xc8, 0xfe, 0x92, 0x7d, 0x8f, 0x3f, 0xfb, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x28,
	0x36, 0x43, 0xe3, 0xfc, 0x07, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CuratorCommissionRate.Size()
		i -= size
		if _, err := m.CuratorCommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.CuratorCommission) > 0 {
		for k := range m.CuratorCommission {
			v := m.CuratorCommission[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintPool(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPool(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.WasDepositReturned {
		i--
		if m.WasDepositReturned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.NftContractAddr) > 0 {
		i -= len(m.NftContractAddr)
		copy(dAtA[i:], m.NftContractAddr)
		i = encodeVarintPool(dAtA, i, uint64(len(m.NftContractAddr)))
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Curator) > 0 {
		i -= len(m.Curator)
		copy(dAtA[i:], m.Curator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Curator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NumIssuedNfts != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.NumIssuedNfts))
		i--
		dAtA[i] = 0x30
	}
	if m.CurNumData != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.CurNumData))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolParams != nil {
		{
			size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataValidationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataValidationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataValidationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.UnsignedCert != nil {
		{
			size, err := m.UnsignedCert.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsignedDataValidationCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsignedDataValidationCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsignedDataValidationCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataValidator) > 0 {
		i -= len(m.DataValidator)
		copy(dAtA[i:], m.DataValidator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.DataValidator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintPool(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataPassRedeemReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataPassRedeemReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPassRedeemReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redeemer) > 0 {
		i -= len(m.Redeemer)
		copy(dAtA[i:], m.Redeemer)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Redeemer)))
		i--
		dAtA[i] = 0x22
	}
	if m.DataPassId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.DataPassId))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrustedDataIssuers) > 0 {
		for iNdEx := len(m.TrustedDataIssuers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataIssuers[iNdEx])
			copy(dAtA[i:], m.TrustedDataIssuers[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.TrustedDataIssuers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TrustedDataValidators) > 0 {
		for iNdEx := len(m.TrustedDataValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustedDataValidators[iNdEx])
			copy(dAtA[i:], m.TrustedDataValidators[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.TrustedDataValidators[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NftPrice != nil {
		{
			size, err := m.NftPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxNftSupply != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.MaxNftSupply))
		i--
		dAtA[i] = 0x18
	}
	if m.TargetNumData != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.TargetNumData))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataSchema) > 0 {
		for iNdEx := len(m.DataSchema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataSchema[iNdEx])
			copy(dAtA[i:], m.DataSchema[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.DataSchema[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InstantRevenueDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstantRevenueDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstantRevenueDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		dAtA7 := make([]byte, len(m.PoolIds)*10)
		var j6 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintPool(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SalesHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SalesHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SalesHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PaidCoin != nil {
		{
			size, err := m.PaidCoin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataHashes) > 0 {
		for iNdEx := len(m.DataHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataHashes[iNdEx])
			copy(dAtA[i:], m.DataHashes[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.DataHashes[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SellerAddress) > 0 {
		i -= len(m.SellerAddress)
		copy(dAtA[i:], m.SellerAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.SellerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	if m.PoolParams != nil {
		l = m.PoolParams.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.CurNumData != 0 {
		n += 1 + sovPool(uint64(m.CurNumData))
	}
	if m.NumIssuedNfts != 0 {
		n += 1 + sovPool(uint64(m.NumIssuedNfts))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Curator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovPool(uint64(l))
	l = len(m.NftContractAddr)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.WasDepositReturned {
		n += 2
	}
	if len(m.CuratorCommission) > 0 {
		for k, v := range m.CuratorCommission {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovPool(uint64(k)) + 1 + l + sovPool(uint64(l))
			n += mapEntrySize + 1 + sovPool(uint64(mapEntrySize))
		}
	}
	l = m.CuratorCommissionRate.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *DataValidationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsignedCert != nil {
		l = m.UnsignedCert.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *UnsignedDataValidationCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.DataValidator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *DataPassRedeemReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	if m.DataPassId != 0 {
		n += 1 + sovPool(uint64(m.DataPassId))
	}
	l = len(m.Redeemer)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *DataValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataSchema) > 0 {
		for _, s := range m.DataSchema {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if m.TargetNumData != 0 {
		n += 1 + sovPool(uint64(m.TargetNumData))
	}
	if m.MaxNftSupply != 0 {
		n += 1 + sovPool(uint64(m.MaxNftSupply))
	}
	if m.NftPrice != nil {
		l = m.NftPrice.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if len(m.TrustedDataValidators) > 0 {
		for _, s := range m.TrustedDataValidators {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if len(m.TrustedDataIssuers) > 0 {
		for _, s := range m.TrustedDataIssuers {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	return n
}

func (m *InstantRevenueDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovPool(uint64(e))
		}
		n += 1 + sovPool(uint64(l)) + l
	}
	return n
}

func (m *SalesHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	if m.Round != 0 {
		n += 1 + sovPool(uint64(m.Round))
	}
	l = len(m.SellerAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if len(m.DataHashes) > 0 {
		for _, b := range m.DataHashes {
			l = len(b)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if m.PaidCoin != nil {
		l = m.PaidCoin.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolParams == nil {
				m.PoolParams = &PoolParams{}
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurNumData", wireType)
			}
			m.CurNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIssuedNfts", wireType)
			}
			m.NumIssuedNfts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIssuedNfts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Curator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasDepositReturned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WasDepositReturned = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuratorCommission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CuratorCommission == nil {
				m.CuratorCommission = make(map[uint64]types.Coin)
			}
			var mapkey uint64
			mapvalue := &types.Coin{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPool
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPool
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Coin{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPool(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPool
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CuratorCommission[mapkey] = *mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuratorCommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CuratorCommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataValidationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataValidationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataValidationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsignedCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnsignedCert == nil {
				m.UnsignedCert = &UnsignedDataValidationCertificate{}
			}
			if err := m.UnsignedCert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsignedDataValidationCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsignedDataValidationCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsignedDataValidationCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = append(m.DataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DataHash == nil {
				m.DataHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPassRedeemReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataPassRedeemReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataPassRedeemReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPassId", wireType)
			}
			m.DataPassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataPassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redeemer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redeemer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSchema = append(m.DataSchema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNumData", wireType)
			}
			m.TargetNumData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetNumData |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNftSupply", wireType)
			}
			m.MaxNftSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNftSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftPrice == nil {
				m.NftPrice = &types.Coin{}
			}
			if err := m.NftPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataValidators = append(m.TrustedDataValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedDataIssuers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedDataIssuers = append(m.TrustedDataIssuers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstantRevenueDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstantRevenueDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstantRevenueDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPool
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPool
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SalesHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SalesHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SalesHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHashes = append(m.DataHashes, make([]byte, postIndex-iNdEx))
			copy(m.DataHashes[len(m.DataHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaidCoin == nil {
				m.PaidCoin = &types.Coin{}
			}
			if err := m.PaidCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
