syntax = "proto3";
package panacea.oracle.v2alpha2;

option go_package = "github.com/medibloc/panacea-core/v2/x/oracle/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

// OracleStatus enumerates the status of oracle.
enum OracleStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORACLE_STATUS_UNSPECIFIED
  ORACLE_STATUS_UNSPECIFIED = 0;

  // ACTIVE defines the oracle status that is active
  ORACLE_STATUS_ACTIVE = 1;
  // JAILED defines the oracle status that has been jailed
  ORACLE_STATUS_JAILED = 2;
  // UPGRADING defines the oracle status that is being upgraded to new version of oracle
  ORACLE_STATUS_UPGRADING = 3;
}

// Oracle defines a detail of oracle.
message Oracle {
  string address = 1;
  OracleStatus status = 2;
  uint64 uptime = 3; // in block
  google.protobuf.Timestamp jailed_at = 4 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = true,
    (gogoproto.moretags) = "yaml:\"jailed_at\""
  ];
}

// OracleRegistrationStatus enumerates the status of OracleRegistration.
enum OracleRegistrationStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORACLE_REGISTRATION_STATUS_UNSPECIFIED
  ORACLE_REGISTRATION_STATUS_UNSPECIFIED = 0;

  // VOTING_PERIOD defines the status of OracleRegistration in voting period.
  ORACLE_REGISTRATION_STATUS_VOTING_PERIOD = 1;
  // PASSED defines the status of OracleRegistration passed.
  ORACLE_REGISTRATION_STATUS_PASSED = 2;
  // PASSED defines the status of OracleRegistration rejected.
  ORACLE_REGISTRATION_STATUS_REJECTED = 3;
}

// OracleRegistration defines the detailed states of the registration of oracle.
message OracleRegistration {
  string unique_id = 1;
  string address = 2;
  // Node public key is a pair with a node private key which is generated in SGX by each oracle.
  // This key is used to share the oracle private key from other oracles.
  bytes node_pub_key = 3;
  // Anyone can validate that the node key pair is generated in SGX using this node key remote report.
  bytes node_pub_key_remote_report = 4;
  // The trusted block info is required for light client.
  // Other oracle can validate whether the oracle set correct trusted block info.
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  // Encrypted oracle private key by node public key, which can only be decrypted in SGX securely.
  bytes encrypted_oracle_priv_key = 7;
  // The status of OracleRegistration.
  OracleRegistrationStatus status = 8;
  VotingPeriod voting_period = 9;
  TallyResult tally_result = 10;
  // Nonce required for AES256-GCM encryption
  bytes nonce = 11;
  // Type of registration through which path
  OracleRegistrationType registration_type = 12;
}

// TallyResult defines the tally result of the votes.
message TallyResult {
  string yes = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string no = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  // Votes yes, but the value is different with the consensus value
  repeated ConsensusTally invalid_yes = 3;
  string total = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  // The consensus value between oracles
  bytes consensus_value = 5;
  repeated VoterInfo valid_voters = 6;
}

// VoterInfo defines the voter info
message VoterInfo {
  string voter_address = 1;
  string voting_power = 2[(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// ConsensusTally defines the consensus value and the vote amount.
message ConsensusTally {
  bytes consensus_value = 1;
  string voting_amount = 2[(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  repeated VoterInfo voter_info = 3;
}

// VotingPeriod defines the voting period of transactions governed by oracles.
message VotingPeriod {
  google.protobuf.Timestamp voting_start_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"voting_start_time\""
  ];
  google.protobuf.Timestamp voting_end_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"voting_end_time\""
  ];
}

// OracleRegistrationVote defines the vote for oracle registration
message OracleRegistrationVote {
  string unique_id = 1;
  string voter_unique_id = 2;
  string voter_address = 3;
  string voting_target_address = 4;
  VoteOption vote_option = 5;
  bytes encrypted_oracle_priv_key = 6;
}

// VoteOption enumerates the vote option.
enum VoteOption {
  option (gogoproto.goproto_enum_prefix) = false;

  // VOTE_OPTION_UNSPECIFIED
  VOTE_OPTION_UNSPECIFIED = 0;

  // VOTE_OPTION_VALID
  VOTE_OPTION_YES = 1;

  // VOTE_OPTION_INVALID
  VOTE_OPTION_NO = 2;
}

// UpgradeOracleInfo defines the info of oracle upgrade, which includes the target height of upgrade and unique ID of the new version of oracle
message OracleUpgradeInfo {
  option (gogoproto.equal) = true;

  string unique_id = 1;

  int64 height = 2;
}

// OracleRegistrationType defines of oracle registration type.
enum OracleRegistrationType {
  option (gogoproto.goproto_enum_prefix) = false;

  // UNSPECIFIED type
  ORACLE_REGISTRATION_TYPE_UNSPECIFIED = 0;

  // For oracles newly added
  ORACLE_REGISTRATION_TYPE_NEW = 1;

  // For oracles to be upgraded
  ORACLE_REGISTRATION_TYPE_UPGRADE = 2;
}