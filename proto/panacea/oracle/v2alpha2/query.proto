syntax = "proto3";
package panacea.oracle.v2alpha2;

option go_package = "github.com/medibloc/panacea-core/x/oracle/types2";

import "panacea/oracle/v2alpha2/oracle.proto";
import "panacea/oracle/v2alpha2/genesis.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

// Query defines the gRPC querier service.
service Query {
  // Oracles returns a list of oracles.
  rpc Oracles(QueryOraclesRequest) returns (QueryOraclesResponse) {
    option (google.api.http).get = "/panacea/oracle/v2alpha2/oracles";
  }

  // Oracle returns a oracle.
  rpc Oracle(QueryOracleRequest) returns (QueryOracleResponse) {
    option (google.api.http).get = "/panacea/oracle/v2alpha2/oracles/{address}";
  }

  // OracleRegistration returns a OracleRegistration details.
  rpc OracleRegistration(QueryOracleRegistrationRequest) returns (QueryOracleRegistrationResponse) {
    option (google.api.http).get = "/panacea/oracle/v2alpha2/oracle_registrations/unique_id/{unique_id}/addresses/{address}";
  }

  // Params returns params of oracle module.
  rpc Params(QueryOracleParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/panacea/oracle/v2alpha2/params";
  }
}

// QueryOraclesRequest is the request type for the Query/Oracles RPC method.
message QueryOraclesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryOracleResponse is the response type for the Query/Oracles RPC method.
message QueryOraclesResponse {
  repeated Oracle oracles = 1;
}

// QueryOracleRequest is the request type for the Query/Oracle RPC method.
message QueryOracleRequest {
  string address = 1;
}

// QueryOracleResponse is the response type for the Query/Oracle RPC method.
message QueryOracleResponse {
  Oracle oracle = 1;
}

// QueryOracleRegistrationRequest is the request type for the Query/OracleRegistration RPC method.
message QueryOracleRegistrationRequest {
  string unique_id = 1;
  string address = 2;
}

// QueryOracleRegistrationResponse is the response type for the Query/OracleRegistration RPC method.
message QueryOracleRegistrationResponse {
  OracleRegistration oracle_registration = 1;
}

// QueryOracleParamsRequest is the request type for the Query/OracleParams RPC method.
message QueryOracleParamsRequest {}

// QueryParamsResponse is the response type for the Query/OracleParams RPC method.
message QueryParamsResponse {
  Params params = 1;
}

// OracleRegistrationStatus enumerates the status of OracleRegistration.
enum OracleRegistrationStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORACLE_REGISTRATION_STATUS_UNSPECIFIED
  ORACLE_REGISTRATION_STATUS_UNSPECIFIED = 0;

  // VOTING_PERIOD defines the status of OracleRegistration in voting period.
  ORACLE_REGISTRATION_STATUS_VOTING_PERIOD = 1;
  // PASSED defines the status of OracleRegistration passed.
  ORACLE_REGISTRATION_STATUS_PASSED = 2;
  // PASSED defines the status of OracleRegistration rejected.
  ORACLE_REGISTRATION_STATUS_REJECTED = 3;
}

// OracleRegistration defines the detailed states of the registration of oracle.
message OracleRegistration {
  string unique_id = 1;
  string address = 2;
  // Node public key is a pair of node private key which is generated in SGX by each oracle.
  // This key is used to share the oracle private key from other oracles.
  bytes node_pub_key = 3;
  // Anyone can validate that the node key pair is generated in SGX using this node key remote report.
  bytes node_pub_key_remote_report = 4;
  // The trusted block info is required for light client.
  // Other oracle can validate whether the oracle set correct trusted block info.
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  // Encrypted oracle private key by node public key, which can only be decrypted in SGX securely.
  bytes encrypted_oracle_priv_key = 7;
  // The status of OracleRegistration.
  OracleRegistrationStatus status = 8;
  VotingPeriod voting_period = 9;
  TallyResult tally_result = 10;
}