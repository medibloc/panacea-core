syntax = "proto3";
package panacea.oracle.v2alpha2;

option go_package = "github.com/medibloc/panacea-core/v2/x/oracle/types";

import "panacea/oracle/v2alpha2/oracle.proto";
import "panacea/oracle/v2alpha2/genesis.proto";
import "gogoproto/gogo.proto";

// Msg defines the Msg service.
service Msg {
  // RegisterOracle defines a method for registration of oracle.
  rpc RegisterOracle(MsgRegisterOracle) returns (MsgRegisterOracleResponse);

  // VoteOracleRegistration  defines a method for voting registration of oracle.
  rpc VoteOracleRegistration(MsgVoteOracleRegistration) returns (MsgVoteOracleRegistrationResponse);

  // UpgradeOracle defines a method for upgrade of oracle.
  rpc UpgradeOracle(MsgUpgradeOracle) returns (MsgUpgradeOracleResponse);
}

// MsgRegisterOracle defines the Msg/RegisterOracle request type.
message MsgRegisterOracle {
  string unique_id = 1;
  string oracle_address = 2;  // panacea1.. account address
  bytes node_pub_key = 3;
  bytes node_pub_key_remote_report = 4;
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  bytes nonce = 7;
}

// MsgRegisterOracleResponse defines the Msg/RegisterOracle response type.
message MsgRegisterOracleResponse {
}

// MsgVoteOracleRegistration defines the Msg/VoteOracleRegistration request type.
message MsgVoteOracleRegistration {
  OracleRegistrationVote oracle_registration_vote = 1;
  bytes signature = 2;
}

// MsgVoteOracleRegistrationResponse defines the Msg/VoteOracleRegistration response type.
message MsgVoteOracleRegistrationResponse {}

// MsgUpgradeOracle defines the Msg/UpgradeOracle request type.
message MsgUpgradeOracle {
  string unique_id = 1;
  string oracle_address = 2;  // panacea1.. account address
  bytes node_pub_key = 3;
  bytes node_pub_key_remote_report = 4;
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  bytes nonce = 7;
}

// MsgUpgradeOracleResponse defines the Msg/UpgradeOracle response type.
message MsgUpgradeOracleResponse {
}