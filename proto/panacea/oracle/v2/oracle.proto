syntax = "proto3";
package panacea.oracle.v2;

option go_package = "github.com/medibloc/panacea-core/x/oracle/types";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

// Oracle defines a detail of oracle.
message Oracle {
  string oracle_address = 1;
  string unique_id = 2;
  string endpoint = 3;
  google.protobuf.Timestamp update_time = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  string oracle_commission_rate = 5 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string oracle_commission_max_rate = 6 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string oracle_commission_max_change_rate = 7 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// OracleRegistration defines the detailed states of the registration of oracle.
message OracleRegistration {
  string unique_id = 1;
  string oracle_address = 2;
  // Node public key is a pair with a node private key which is generated in SGX by each oracle.
  // This key is used to share the oracle private key from other oracles.
  bytes node_pub_key = 3;
  // Anyone can validate that the node key pair is generated in SGX using this node key remote report.
  bytes node_pub_key_remote_report = 4;
  // A newly joining oracle must report a trusted block info which was used to initialize its light client.
  // Other oracles will validate whether this trusted block info is correct,
  //   in order to prevent malicious operators from making the oracle look at a malicious chain node.
  // Other oracles don't have to worry about whether this block info was set by a malicious operator,
  //   because this message has to be generated inside SGX.
  // Also, after this oracle registration is complete, the light client is protected from malicious operators by SGX.
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  string endpoint = 7;
  string oracle_commission_rate = 8 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string oracle_commission_max_rate = 9 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  string oracle_commission_max_change_rate = 10 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  bytes encrypted_oracle_priv_key = 11;
}

// OracleUpgrade defines the states of oracle upgrade
message OracleUpgrade {
  string unique_id = 1;
  string oracle_address = 2;
  // Node public key is a pair with a node private key which is generated in SGX by each oracle.
  // This key is used to share the oracle private key from other oracles.
  bytes node_pub_key = 3;
  // Anyone can validate that the node key pair is generated in SGX using this node key remote report.
  bytes node_pub_key_remote_report = 4;
  // An oracle to be upgraded must report a trusted block info which was used to initialize its light client with a new version of oracle.
  // Other oracles will validate whether this trusted block info is correct,
  //   in order to prevent malicious operators from making the oracle look at a malicious chain node.
  // Other oracles don't have to worry about whether this block info was set by a malicious operator,
  //   because this message has to be generated inside SGX.
  // Also, after this oracle upgrade is complete, the light client is protected from malicious operators by SGX.
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  bytes encrypted_oracle_priv_key = 7;
}

// OracleUpgradeInfo defines the info of oracle upgrade, which includes the target height of upgrade and unique ID of the new version of oracle
message OracleUpgradeInfo {
  option (gogoproto.equal) = true;

  string unique_id = 1;

  int64 height = 2;
}