syntax = "proto3";
package panacea.oracle.v2;

option go_package = "github.com/medibloc/panacea-core/x/oracle/types";

import "gogoproto/gogo.proto";

// Oracle defines a detail of oracle.
message Oracle {
  string operator_address = 1;
  OracleStatus status = 2;
  string unique_id = 3;
  string endpoint = 4;
  string oracle_commission_rate = 5 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

// OracleStatus enumerates the status of oracle.
enum OracleStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORACLE_STATUS_UNSPECIFIED
  ORACLE_STATUS_UNSPECIFIED = 0;

  // ORACLE_STATUS_ACTIVE defines the oracle status that is active
  ORACLE_STATUS_ACTIVE = 1;

  // ORACLE_STATUS_INACTIVE defines the oracle status that is inactive
  ORACLE_STATUS_INACTIVE = 2;
}

// OracleRegistration defines the detailed states of the registration of oracle.
message OracleRegistration {
  string unique_id = 1;
  string operator_address = 2;
  // Node public key is a pair with a node private key which is generated in SGX by each oracle.
  // This key is used to share the oracle private key from other oracles.
  bytes node_pub_key = 3;
  // Anyone can validate that the node key pair is generated in SGX using this node key remote report.
  bytes node_pub_key_remote_report = 4;
  // The trusted block info is required for light client.
  // Other oracle can validate whether the oracle set correct trusted block info.
  int64 trusted_block_height = 5;
  bytes trusted_block_hash = 6;
  string endpoint = 7;
  string oracle_commission_rate = 8 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  // Nonce required for AES256-GCM encryption
  bytes nonce = 9;
}