syntax = "proto3";
package panacea.datadeal.v2;

option go_package = "github.com/medibloc/panacea-core/x/datadeal/types";

import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "panacea/datadeal/v2/deal.proto";
import "panacea/datadeal/v2/consent.proto";

// Query defines the gRPC querier service.
service Query {
  // Deals return a list of Deal.
  rpc Deals(QueryDealsRequest) returns (QueryDealsResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2/deals";
  }

  // Deal returns a Deal.
  rpc Deal(QueryDealRequest) returns (QueryDealResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2/deals/{deal_id}";
  }

  // Consents returns a list of Consent.
  rpc Consents(QueryConsents) returns (QueryConsentsResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2/deals/{deal_id}/consents";
  }

  // Consent returns a Consent
  rpc Consent(QueryConsent) returns (QueryConsentResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2/deals/{deal_id}/consents/{data_hash}";
  }

}

// QueryDealsRequest defines the request type for the Query/Deals RPC method.
message QueryDealsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDealsResponse defines the response type for the Query/Deals RPC method.
message QueryDealsResponse {
  repeated Deal deals = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDealRequest defines the request type for the Query/Deal RPC method.
message QueryDealRequest {
  uint64 deal_id = 1;
}

// QueryDealResponse defines the response type for the Query/Deal RPC method.
message QueryDealResponse {
  Deal deal = 1;
}

// QueryConsents defines the request type for the Query/Consents RPC method.
message QueryConsents {
  uint64 deal_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryConsentsResponse defines the response type for the Query/Consents RPC method.
message QueryConsentsResponse {
  repeated Consent consents = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryConsent defines the request type for the Query/Consent RPC method.
message QueryConsent {
  uint64 deal_id = 1;
  string data_hash = 2;
}

// QueryConsentResponse defines the response type for the Query/Consent RPC method.
message QueryConsentResponse {
  Consent consent = 1;
}

