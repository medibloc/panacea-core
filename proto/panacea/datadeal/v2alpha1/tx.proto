syntax = "proto3";
package panacea.datadeal.v2alpha1;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/medibloc/panacea-core/v2/x/datadeal/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg defines the Msg service.
service Msg {
  // CreateDeal defines a method for creating a deal.
  rpc CreateDeal(MsgCreateDeal) returns (MsgCreateDealResponse);
  // SellData defines a method for selling a data.
  rpc SellData(MsgSellData) returns (MsgSellDataResponse);
  // DeactivateDeal defines a method for deactivating a deal.
  rpc DeactivateDeal(MsgDeactivateDeal) returns (MsgDeactivateDealResponse);
}

//MsgCreateDeal defines the Msg/CreateDeal request type.
message MsgCreateDeal {
  repeated string data_schema = 1;
  cosmos.base.v1beta1.Coin budget = 2;
  uint64 max_num_data = 3;
  repeated string trusted_oracles = 4;
  string owner = 5;
}

//MsgCreateDealResponse defines the Msg/CreateDeal response type.
message MsgCreateDealResponse {
  uint64 deal_id = 1;
}

//MsgSellData defines the Msg/SellData request type.
message MsgSellData {
  DataCert cert = 1;
  string seller = 2;
}

//MsgSellDataResponse defines the Msg/SellData response type.
message MsgSellDataResponse {
  cosmos.base.v1beta1.Coin reward = 1;
}

// DataCert defines data validation certificate.
message DataCert {
  UnsignedDataCert unsigned_cert = 1;
  bytes signature = 2;
}

// UnsignedDataCert defines unsigned data validation certificate.
message UnsignedDataCert {
  uint64 deal_id = 1;
  bytes data_hash = 2;
  bytes encrypted_data_url = 3;
  string oracle_address = 4;
  string requester_address = 5;
}

// MsgDeactivateDeal defines the Msg/DeactivateDeal request type.
message MsgDeactivateDeal {
  uint64 deal_id = 1;
  string deactivate_requester = 2;
}

// MsgDeactivateDealResponse defines the Msg/DeactivateDeal response type.
message MsgDeactivateDealResponse {
  uint64 deal_id = 1;
}