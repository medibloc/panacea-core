syntax = "proto3";
package panacea.datadeal.v2alpha2;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

import "panacea/datadeal/v2alpha2/deal.proto";
import "panacea/datadeal/v2alpha2/datasale.proto";
import "panacea/datadeal/v2alpha2/tx.proto";

option go_package = "github.com/medibloc/panacea-core/v2/x/datadeal/types";

// Query defines the gRPC querier service.
service Query {
  // Deal returns a Deal.
  rpc Deal(QueryDealRequest) returns (QueryDealResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2alpha2/deals/{deal_id}";
  }
  // Deals return a list of Deal.
  rpc Deals(QueryDealsRequest) returns (QueryDealsResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2alpha2/deals";
  }
  // DataSale returns a DataSale.
  rpc DataSale(QueryDataSaleRequest) returns (QueryDataSaleResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2alpha2/datasales/{deal_id}/{data_hash}";
  }
  // DataSales returns a list of DataSale.
  rpc DataSales(QueryDataSalesRequest) returns (QueryDataSalesResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2alpha2/datasales/{deal_id}";
  }
  // DataVerificationVote returns a DataVerificationVote.
  rpc DataVerificationVote(QueryDataVerificationVoteRequest) returns (QueryDataVerificationVoteResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2alpha2/data_verification_votes/{deal_id}/{data_hash}/{voter_address}";
  }
  // DataDeliveryVote returns a DataDeliveryVote.
  rpc DataDeliveryVote(QueryDataDeliveryVoteRequest) returns (QueryDataDeliveryVoteResponse) {
    option (google.api.http).get = "/panacea/datadeal/v2alpha2/data_delivery_votes/{deal_id}/{data_hash}/{voter_address}";
  }
}

// QueryDealRequest defines the request type for the Query/Deal RPC method.
message QueryDealRequest {
  uint64 deal_id = 1;
}

// QueryDealResponse defines the response type for the Query/Deal RPC method.
message QueryDealResponse {
  Deal deal = 1;
}

// QueryDealsRequest defines the request type for the Query/Deals RPC method.
message QueryDealsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDealsResponse defines the response type for the Query/Deals RPC method.
message QueryDealsResponse {
  repeated Deal deal = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDataSaleRequest defines the request type for the Query/DataSale RPC method.
message QueryDataSaleRequest {
  uint64 deal_id = 1;
  string data_hash = 2;
}

// QueryDataSaleResponse defines the response type for the Query/DataSale RPC method.
message QueryDataSaleResponse {
  DataSale data_sale = 1;
}

// QueryDataSalesRequest defines the request type for the Query/DataSales RPC method.
message QueryDataSalesRequest {
  uint64 deal_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDataSalesResponse defines the response type for the Query/DataSales RPC method.
message QueryDataSalesResponse {
  repeated DataSale data_sale = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDataVerificationRequest defines the request type for the Query/DataVerificationVote RPC method.
message QueryDataVerificationVoteRequest {
  uint64 deal_id = 1;
  string data_hash = 2;
  string voter_address = 3;
}

// QueryDataVerificationVoteResponse defines the response type for the Query/DataVerificationVote RPC method.
message QueryDataVerificationVoteResponse {
  DataVerificationVote data_verification_vote = 1;
}

// QueryDataDeliveryVoteRequest defines the request type for the Query/DataDeliveryVote RPC method.
message QueryDataDeliveryVoteRequest{
  uint64 deal_id =1;
  string data_hash =2;
  string voter_address =3;
}

// QueryDataDeliveryVoteResponse defines the response type for the Query/DataDeliveryVote RPC method.
message QueryDataDeliveryVoteResponse{
  DataDeliveryVote data_delivery_vote=1;
}
