syntax = "proto3";
package panacea.datapool.v2;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/medibloc/panacea-core/x/datapool/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/duration.proto";
import "panacea/datapool/v2/pool.proto";

// Msg defines the Msg service.
service Msg {
  // RegisterDataValidator defines a method for registration of data validator.
  rpc RegisterDataValidator(MsgRegisterDataValidator) returns (MsgRegisterDataValidatorResponse);

  // UpdateDataValidator defines a method for updating of data validator.
  rpc UpdateDataValidator(MsgUpdateDataValidator) returns (MsgUpdateDataValidatorResponse);

  // CreatePool defines a method for creating data pool.
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  // SellData defines a method for selling data
  rpc SellData(MsgSellData) returns (MsgSellDataResponse);

  // BuyDataAccessNFT defines a method for buying data access NFT
  rpc BuyDataAccessNFT(MsgBuyDataAccessNFT) returns (MsgBuyDataAccessNFTResponse);

  // RedeemDataAccessNFT defines a method for redeeming data access NFT to get data
  rpc RedeemDataAccessNFT(MsgRedeemDataAccessNFT) returns (MsgRedeemDataAccessNFTResponse);

  // RegisterNFTContract defines a method for deployment and registration of NFT contract
  rpc RegisterNFTContract(MsgRegisterNFTContract) returns (MsgRegisterNFTContractResponse);

  // UpgradeNFTContract defines a method for upgrade and migration of NFT contract
  rpc UpgradeNFTContract(MsgUpgradeNFTContract) returns (MsgUpgradeNFTContractResponse);
}

// MsgRegisterDataValidator defines the Msg/RegisterDataValidator request type.
message MsgRegisterDataValidator {
  DataValidator validator_detail = 1;      // Detail of data validator
}

// MsgRegisterDataValidatorResponse defines the Msg/RegisterDataValidator response type.
message MsgRegisterDataValidatorResponse {
}

// MsgUpdateDataValidator defines the Msg/UpdateDataValidator request type.
message MsgUpdateDataValidator {
  string data_validator = 1;
  string endpoint = 2;
}

// MsgUpdateResponse defines the Msg/UpdateDataValidator response type.
message MsgUpdateDataValidatorResponse {

}

// MsgCreatePool defines the Msg/CreatePool request type.
message MsgCreatePool {
  string      curator = 1;        // 'panacea1' address
  PoolParams  pool_params = 2;    // pool parameters
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
message MsgCreatePoolResponse {
  uint64 pool_id = 1;
  uint64 round = 2;           // Always 1 for v0
  uint64 curation_nft_id = 3; // A NFT that presents the right to curate this pool continuously
}

// MsgSellData defines the Msg/SellData request type.
message MsgSellData {
  DataValidationCertificate cert = 1;     // certificate for data validation
  string                    seller = 2;   // 'panacea1' address of seller
}

// MsgSellDataResponse defines the Msg/SellData response type.
message MsgSellDataResponse {
  cosmos.base.v1beta1.Coin accum_pool_share_token = 1;  // denom: DP-{pood-id}
}

// MsgBuyDataAccessNFT defines the Msg/BuyDataAccessNFT request type.
message MsgBuyDataAccessNFT {
  uint64                   pool_id = 1;
  uint64                   round = 2;
  cosmos.base.v1beta1.Coin payment = 3;
  string                   buyer = 4;   // 'panacea1' address of buyer
}

// MsgBuyDataAccessNFTResponse defines the Msg/BuyDataAccessNFT response type.
message MsgBuyDataAccessNFTResponse {
  uint64 pool_id = 1;
  uint64 round = 2;
  uint64 nft_id = 3;
}

// MsgRedeemDataAccessNFT defines the Msg/RedeemDataAccessNFT request type.
message MsgRedeemDataAccessNFT {
  uint64 pool_id = 1;
  uint64 round = 2;
  uint64 nft_id = 3;
  string redeemer = 4;  // 'panacea1' address
}

// MsgRedeemDataAccessNFTResponse defines the Msg/RedeemDataAccessNFT response type.
message MsgRedeemDataAccessNFTResponse {
  DataAccessNFTRedeemReceipt receipt = 1;
}

// MsgRegisterNFTContract defines the Msg/RegisterNFTContract type.
message MsgRegisterNFTContract {
  bytes  wasm_code = 1;   // wasm byte code of NFT contract
  string sender = 2;
}

// MsgRegisterNFTContractResponse defines the Msg/RegisterNFTContract response type.
message MsgRegisterNFTContractResponse {}

// MsgUpgradeNFTContract defines the Msg/UpgradeNFTContract type.
message MsgUpgradeNFTContract {
  bytes  new_wasm_code = 1;   // wasm byte code of NFT contract
  string sender = 2;
}

// MsgUpgradeNFTContractResponse defines the Msg/UpgradeNFTContract response type.
message MsgUpgradeNFTContractResponse {}