syntax = "proto3";
package panacea.datapool.v2;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/medibloc/panacea-core/x/datapool/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/duration.proto";
import "panacea/datapool/v2/pool.proto";

// Msg defines the Msg service.
service Msg {
  // RegisterDataValidator defines a method for registration of data validator.
  rpc RegisterDataValidator(MsgRegisterDataValidator) returns (MsgRegisterDataValidatorResponse);

  // CreatePool defines a method for creating data pool.
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  // SellData defines a method for selling data
  rpc SellData(MsgSellData) returns (MsgSellDataResponse);

  // BuyDataAccessNft defines a method for buying data access NFT
  rpc BuyDataAccessNft(MsgBuyDataAccessNft) returns (MsgBuyDataAccessNftResponse);

  // RedeemDataAccessNft defines a method for redeeming data access NFT to get data
  rpc RedeemDataAccessNft(MsgRedeemDataAccessNft) returns (MsgRedeemDataAccessNftResponse);
}

// MsgRegisterDataValidator defines the Msg/RegisterDataValidator request type.
message MsgRegisterDataValidator {
  DataValidator validator_detail = 1;      // Detail of data validator
}

// MsgRegisterDataValidatorResponse defines the Msg/RegisterDataValidator response type.
message MsgRegisterDataValidatorResponse {
}

// MsgCreatePool defines the Msg/CreatePool request type.
message MsgCreatePool {
  string      curator = 1;        // 'panacea1' address
  PoolParams  pool_params = 2;    // pool parameters
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
message MsgCreatePoolResponse {
  uint64 pool_id = 1;
  uint64 round = 2;           // Always 1 for v0
  uint64 curation_nft_id = 3; // A NFT that presents the right to curate this pool continuously
}

// MsgSellData defines the Msg/SellData request type.
message MsgSellData {
  DataValidationCertificate cert = 1;     // certificate for data validation
  string                    seller = 2;   // 'panacea1' address of seller
}

// MsgSellDataResponse defines the Msg/SellData response type.
message MsgSellDataResponse {
  cosmos.base.v1beta1.Coin accum_pool_share_token = 1;  // denom: DP-{pood-id}
}

// MsgBuyDataAccessNft defines the Msg/BuyDataAccessNft request type.
message MsgBuyDataAccessNft {
  uint64                   pool_id = 1;
  uint64                   round = 2;
  cosmos.base.v1beta1.Coin payment = 3;
  string                   buyer = 4;   // 'panacea1' address of buyer
}

// MsgBuyDataAccessNftResponse defines the Msg/BuyDataAccessNft response type.
message MsgBuyDataAccessNftResponse {
  uint64 pool_id = 1;
  uint64 round = 2;
  uint64 nft_id = 3;
}

// MsgRedeemDataAccessNft defines the Msg/RedeemDataAccessNft request type.
message MsgRedeemDataAccessNft {
  uint64 pool_id = 1;
  uint64 round = 2;
  uint64 nft_id = 3;
  string redeemer = 4;  // 'panacea1' address
}

// MsgRedeemDataAccessNftResponse defines the Msg/RedeemDataAccessNFT response type.
message MsgRedeemDataAccessNftResponse {
  DataAccessNftRedeemReceipt receipt = 1;
}