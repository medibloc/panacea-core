syntax = "proto3";
package panacea.datapool.v2;

option go_package = "github.com/medibloc/panacea-core/x/datapool/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Pool defines a data pool
message Pool {
  uint64                                pool_id = 1;
  string                                pool_address = 2;
  uint64                                round = 3;
  PoolParams                            pool_params = 4;
  uint64                                cur_num_data = 5;                                        // current number of data
  uint64                                num_issued_nfts = 6;                                     // current issued NFTs
  string                                status = 7;
  string                                curator = 8;
  cosmos.base.v1beta1.Coin              deposit = 9 [(gogoproto.nullable) = false];             // deposit
  string                                nft_contract_addr = 10;                                 // NFT contract address of pool
  bool                                  was_deposit_returned = 11;
  map<uint64, cosmos.base.v1beta1.Coin> curator_commission = 12 [(gogoproto.nullable) = false]; // key: round, value: paid curator commission balance
  string                                curator_commission_rate = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"curator_commission_rate\"",
    (gogoproto.nullable) = false
  ]; // curator commission rate
}

// DataValidationCertificate defines the certificate for data validation w/ data validator signature.
message DataValidationCertificate {
  UnsignedDataValidationCertificate unsigned_cert = 1;  // unsigned certificate
  bytes                             signature = 2;      // signature for data validation by data validator
}

// UnsignedDataValidationCertificate defines the unsigned certificate for data validation.
message UnsignedDataValidationCertificate {
  uint64 pool_id = 1;           // pool Id for selling data
  uint64 round = 2;             // Always 1 for v0
  bytes  data_hash = 3;         // sha-256 hash of the data
  string data_validator = 4;    // 'panacea1' address of data validator
  string requester = 5;         // 'panacea1' address of seller
}

// DataPassRedeemReceipt defines a receipt for redeeming data pass to get data.
message DataPassRedeemReceipt {
  uint64 pool_id = 1;
  uint64 round = 2;
  uint64 data_pass_id = 3;
  string redeemer = 4;      // 'panacea1' address of redeemer
}

// DataValidator defines a detail of data validator.
message DataValidator {
  string endpoint = 1;
  string address = 2;
}

// PoolParams defines parameters for data pool
message PoolParams {
  repeated string          data_schema = 1;             // JSON Schema URIs
  uint64                   target_num_data = 2;         // A target num of data to be collected
  uint64                   max_nft_supply = 3;          // A max num of NFTs that can be minted (= A total num of potential buyers)
  cosmos.base.v1beta1.Coin nft_price = 4;               // A price of a NFT
  repeated string          trusted_data_validators = 5; // Trusted data validators' addresses
  repeated string          trusted_data_issuers = 6;    // Optional. Data issuers that is trusted by the curator
}

// InstantRevenueDistribution defines poolID information to distribution revenue.
message InstantRevenueDistribution {
  repeated uint64 pool_ids = 1;  // Execute information for pool reward distribution
}

// SalesInfo defines sales information
message SalesHistory {
  uint64 pool_id = 1;                     // pool Id for selling data
  uint64 round = 2;                       // Always 1 for v0
  string seller_address = 3;                     // address to be distributed
  repeated bytes data_hashes = 4;
  cosmos.base.v1beta1.Coin paid_coin = 5; // Proceeds distributed in the round
}

// DataPassRedeemHistory defines a list of redeem histories
message DataPassRedeemHistory {
  string redeemer = 1;
  uint64 pool_id = 2;
  repeated DataPassRedeemReceipt data_pass_redeem_receipts = 3 [
    (gogoproto.nullable) = false
  ]; // list of redeem receipts
}