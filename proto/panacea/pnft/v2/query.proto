syntax = "proto3";
package panacea.pnft.v2;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "panacea/pnft/v2/denom.proto";
import "panacea/pnft/v2/pnft.proto";

option java_multiple_files = true;
option go_package = "github.com/medibloc/panacea-core/x/pnft/types";

// Query defines the gRPC querier service.
service Query {
  // Denoms returns denom list.
  rpc Denoms(QueryDenomsRequest) returns (QueryDenomsResponse) {
    option (google.api.http).get =
        "/panacea/pnft/v2/denoms";
  }

  rpc DenomsByOwner(QueryDenomsByOwnerRequest) returns (QueryDenomsByOwnerResponse) {
    option (google.api.http).get =
        "/panacea/pnft/v2/denoms/owners/{owner}";
  }

  // Denom returns denom detail.
  rpc Denom(QueryDenomRequest) returns (QueryDenomResponse) {
    option (google.api.http).get =
        "/panacea/pnft/v2/denoms/{id}";
  }

  rpc PNFTs(QueryPNFTsRequest) returns (QueryPNFTsResponse) {
    option (google.api.http).get = "/panacea/pnft/v2/denoms/{denom_id}/pnfts";
  }

  rpc PNFTsByDenomOwner(QueryPNFTsByDenomOwnerRequest) returns (QueryPNFTsByDenomOwnerResponse) {
    option (google.api.http).get = "/panacea/pnft/v2/denoms/{denom_id}/owners/{owner}/pnfts";
  }


  rpc PNFT(QueryPNFTRequest) returns (QueryPNFTResponse) {
    option (google.api.http).get = "/panacea/pnft/v2/denoms/{denom_id}/pnfts/{id}";
  }
}

// QueryDenomsRequest is the response type for the Query RPC method.
message QueryDenomsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDenomsResponse is the response type for the Query RPC method.
message QueryDenomsResponse {
  repeated panacea.pnft.v2.Denom denoms = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDenomsByOwnerRequest is the response type for the Query RPC method.
message QueryDenomsByOwnerRequest {
  string owner = 1;
}

// QueryDenomsByOwnerResponse is the response type for the Query RPC method.
message QueryDenomsByOwnerResponse {
  repeated panacea.pnft.v2.Denom denoms = 1;
}

// QueryDenomRequest is the response type for the Query RPC method.
message QueryDenomRequest {
  string id = 1;
}

// QueryDenomResponse is the response type for the Query RPC method.
message QueryDenomResponse {
  panacea.pnft.v2.Denom denom = 1;
}

// QueryPNFTsRequest is the response type for the Query RPC method.
message QueryPNFTsRequest {
  string denom_id = 1;
}

// QueryPNFTsResponse is the response type for the Query RPC method.
message QueryPNFTsResponse {
  repeated panacea.pnft.v2.Pnft pnfts = 1;
}

// QueryPNFTsRequest is the response type for the Query RPC method.
message QueryPNFTsByDenomOwnerRequest {
  string denom_id = 1;
  string owner = 2;
}

// QueryPNFTsResponse is the response type for the Query RPC method.
message QueryPNFTsByDenomOwnerResponse {
  repeated panacea.pnft.v2.Pnft pnfts = 1;
}

// QueryPNFTRequest is the response type for the Query RPC method.
message QueryPNFTRequest {
  string denom_id = 1;
  string id = 2;
}

// QueryPNFTResponse is the response type for the Query RPC method.
message QueryPNFTResponse {
  panacea.pnft.v2.Pnft pnft = 1;
}