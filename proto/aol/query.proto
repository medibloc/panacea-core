syntax = "proto3";
package medibloc.panaceacore.aol;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "aol/owner.proto";
import "aol/record.proto";
import "aol/writer.proto";
import "aol/topic.proto";

option go_package = "github.com/medibloc/panacea-core/x/aol/types";

// Query defines the gRPC querier service.
service Query {
	rpc Topic(QueryGetTopicRequest) returns (QueryGetTopicResponse) {
		option (google.api.http).get = "/panacea/aol/topic/{ownerAddress}/{topicName}";
	}

	rpc Topics(QueryListTopicsRequest) returns (QueryListTopicsResponse) {
		option (google.api.http).get = "/panacea/aol/topic/{ownerAddress}";
	}

	rpc Writer(QueryGetWriterRequest) returns (QueryGetWriterResponse) {
		option (google.api.http).get = "/panacea/aol/writer/{ownerAddress}/{topicName}/{writerAddress}";
	}

	rpc Writers(QueryListWritersRequest) returns (QueryListWritersResponse) {
		option (google.api.http).get = "/panacea/aol/writer/{ownerAddress}/{topicName}";
	}

	rpc Record(QueryGetRecordRequest) returns (QueryGetRecordResponse) {
		option (google.api.http).get = "/panacea/aol/record/{ownerAddress}/{topicName}/{offset}";
	}
}

// this line is used by starport scaffolding # 3
message QueryGetTopicRequest {
	string ownerAddress = 1;
	string topicName = 2;
}

message QueryGetTopicResponse {
	Topic Topic = 1;
}

message QueryListTopicsRequest {
	string ownerAddress = 1;
	cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryListTopicsResponse {
	repeated string topicNames = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetWriterRequest {
	string ownerAddress = 1;
	string topicName = 2;
	string writerAddress = 3;
}

message QueryGetWriterResponse {
	Writer Writer = 1;
}

message QueryListWritersRequest {
	string ownerAddress = 1;
	string topicName = 2;
	cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryListWritersResponse {
	repeated string writerAddresses = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetRecordRequest {
	string ownerAddress = 1;
	string topicName = 2;
	uint64 offset = 3;
}

message QueryGetRecordResponse {
	Record Record = 1;
}
