syntax = "proto3";
package medibloc.panaceacore.aol;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "aol/owner.proto";
import "aol/record.proto";
import "aol/writer.proto";
import "aol/topic.proto";

option go_package = "github.com/medibloc/panacea-core/x/aol/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2
	rpc Owner(QueryGetOwnerRequest) returns (QueryGetOwnerResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/owner/{id}";
	}
	rpc OwnerAll(QueryAllOwnerRequest) returns (QueryAllOwnerResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/owner";
	}

	rpc Record(QueryGetRecordRequest) returns (QueryGetRecordResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/record/{id}";
	}
	rpc RecordAll(QueryAllRecordRequest) returns (QueryAllRecordResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/record";
	}

	rpc Writer(QueryGetWriterRequest) returns (QueryGetWriterResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/writer/{id}";
	}
	rpc WriterAll(QueryAllWriterRequest) returns (QueryAllWriterResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/writer";
	}

	rpc Topic(QueryGetTopicRequest) returns (QueryGetTopicResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/topic/{id}";
	}
	rpc TopicAll(QueryAllTopicRequest) returns (QueryAllTopicResponse) {
		option (google.api.http).get = "/medibloc/panaceacore/aol/topic";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetOwnerRequest {
	uint64 id = 1;
}

message QueryGetOwnerResponse {
	Owner Owner = 1;
}

message QueryAllOwnerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOwnerResponse {
	repeated Owner Owner = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetRecordRequest {
	uint64 id = 1;
}

message QueryGetRecordResponse {
	Record Record = 1;
}

message QueryAllRecordRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllRecordResponse {
	repeated Record Record = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetWriterRequest {
	uint64 id = 1;
}

message QueryGetWriterResponse {
	Writer Writer = 1;
}

message QueryAllWriterRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWriterResponse {
	repeated Writer Writer = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetTopicRequest {
	uint64 id = 1;
}

message QueryGetTopicResponse {
	Topic Topic = 1;
}

message QueryAllTopicRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTopicResponse {
	repeated Topic Topic = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
